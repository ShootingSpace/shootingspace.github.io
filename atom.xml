<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Computer Science &amp; AI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shukebeta.me/"/>
  <updated>2018-09-20T09:39:27.256Z</updated>
  <id>http://shukebeta.me/</id>
  
  <author>
    <name>Cong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLP与信息处理 06 - 不同树结构的字符串符号表</title>
    <link href="http://shukebeta.me/NLP-06-string-symbol-table-other-Trie/"/>
    <id>http://shukebeta.me/NLP-06-string-symbol-table-other-Trie/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2018-09-20T09:39:27.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="各种树的变种"><a href="#各种树的变种" class="headerlink" title="各种树的变种"></a>各种树的变种</h2><p>为了适应不同的应用场景, 人们使用不同的树结构来实现符号表.<br><a id="more"></a></p><h3 id="九宫格输入法"><a href="#九宫格输入法" class="headerlink" title="九宫格输入法"></a>九宫格输入法</h3><p>对于手机的九宫格输入法, 简单的实现方式是多次敲击: 通过反复按键输入一个字母，直到出现所需的字母。</p><p>但 <a href="http://www.t9.com/" target="_blank" rel="noopener">http://www.t9.com/</a> 的 T9 texting 支持更高效的输入方法:<br>・Find all words that correspond to given sequence of numbers.<br>・Press 0 to see all completion options.<br><img src="https://en.wikipedia.org/wiki/File:Telephone-keypad2.svg" alt="" title="image from: https://en.wikipedia.org/"><br>Ex. hello<br>・多次敲击: 4 4 3 3 5 5 5 5 5 5 6 6 6<br>・T9: 4 3 5 5 6</p><p>可以使用 8-way trie 来实现.</p><h3 id="三元搜索Trie"><a href="#三元搜索Trie" class="headerlink" title="三元搜索Trie"></a>三元搜索Trie</h3><p><code>R</code>较大的R-way trie的空间效率不高，读取比较大的文件往往导致内存不足。但弊端是开辟出的数组内存利用率其实不高。现在很多系统都使用Unicode，分支可高达<code>65,536</code>. 所以需要更高效的方法。</p><p>Ternary search tries:<br>・Store characters and values in nodes (not keys).<br>・Each node has 3 children: smaller (left), equal (middle), larger (right).<br><img src="/images/tst.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br>Search in a TST: Follow links corresponding to each character in the key.<br>・If less, take left link; if greater, take right link.<br>・If equal, take the middle link and move to the next key character.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TST</span>&lt;<span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Value val;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">private</span> Node left, mid, right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Value val)</span></span></span><br><span class="line"><span class="function">    </span>&#123; root = put(root, key, val, <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, String key, Value val, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123; x = <span class="keyword">new</span> Node(); x.c = c; &#125;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; x.c) x.left = put(x.left, key, val, d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; x.c) x.right = put(x.right, key, val, d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; key.length() - <span class="number">1</span>) x.mid = put(x.mid, key, val, d+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> x.val = val;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> get(key) != <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node x = get(root, key, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">get</span><span class="params">(Node x, String key, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">         <span class="keyword">if</span> (c &lt; x.c) <span class="keyword">return</span> get(x.left, key, d);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; x.c) <span class="keyword">return</span> get(x.right, key, d);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; key.length() - <span class="number">1</span>) <span class="keyword">return</span> get(x.mid, key, d+<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TSTs比hashing更快（特别是对于搜索缺失键的情况）。</p><h3 id="基数树"><a href="#基数树" class="headerlink" title="基数树"></a>基数树</h3><p>Radix Tree, 也叫 Patricia trie (Practical Algorithm to Retrieve Information Coded in Alphanumeric), crit-bit tree, 压缩前缀树:<br>・Remove one-way branching.<br>・Each node represents a sequence of characters.<br>・Implementation: one step beyond this course.<br><img src="https://en.wikipedia.org/wiki/File:Patricia_trie.svg" alt="" title="image from: https://en.wikipedia.org/"><br>对于基数树的每个节点，如果该节点是唯一的子树的话，就和父节点合并。</p><p>Applications.<br>・Database search.<br>・P2P network search.<br>・IP routing tables: find longest prefix match.<br>・Compressed quad-tree for N-body simulation.<br>・Efficiently storing and querying XML documents.</p><h3 id="后缀树"><a href="#后缀树" class="headerlink" title="后缀树"></a>后缀树</h3><p>后缀树（Suffix tree）指字符串后缀的基数树: 一个<code>String S</code>的后缀树是一个边（edge）被标记为字符串的树。因此每一个<code>S</code>的后缀都唯一对应一条从根节点到叶节点的路径。这样就形成了一个<code>S</code>的后缀的基数树。<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Suffix_tree_BANANA.svg/250px-Suffix_tree_BANANA.svg.png" alt="" title="image from: https://en.wikipedia.org/"></p><p>Applications.<br>・Linear-time: longest repeated substring, longest common substring, longest palindromic substring, substring search, tandem repeats, ….<br>・Computational biology databases (BLAST, FASTA).</p><h2 id="字符符号表总结"><a href="#字符符号表总结" class="headerlink" title="字符符号表总结"></a>字符符号表总结</h2><p>Red-black BST.<br>・Performance guarantee: log N key compares.<br>・Supports ordered symbol table API.</p><p>Hash tables.<br>・Performance guarantee: constant number of probes.<br>・Requires good hash function for key type.</p><p>Tries. R-way, TST.<br>・Performance guarantee: log N characters accessed.<br>・Supports character-based operations.<br><img src="/images/string_symbol_table_cost_sum.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"></p><blockquote><p>You can get at anything by examining 50-100 bits</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;各种树的变种&quot;&gt;&lt;a href=&quot;#各种树的变种&quot; class=&quot;headerlink&quot; title=&quot;各种树的变种&quot;&gt;&lt;/a&gt;各种树的变种&lt;/h2&gt;&lt;p&gt;为了适应不同的应用场景, 人们使用不同的树结构来实现符号表.&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Algorithm" scheme="http://shukebeta.me/tags/Algorithm/"/>
    
      <category term="Trie" scheme="http://shukebeta.me/tags/Trie/"/>
    
      <category term="Information Retrieval" scheme="http://shukebeta.me/tags/Information-Retrieval/"/>
    
      <category term="Symbol table" scheme="http://shukebeta.me/tags/Symbol-table/"/>
    
  </entry>
  
  <entry>
    <title>NLP与信息处理 05 - 字符串符号表和三元搜索Trie</title>
    <link href="http://shukebeta.me/NLP-05-string-symbol-table-Trie/"/>
    <id>http://shukebeta.me/NLP-05-string-symbol-table-Trie/</id>
    <published>2018-09-14T16:00:00.000Z</published>
    <updated>2018-09-20T09:39:18.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><blockquote><p>在计算机科学中，符号表是一种用于语言翻译器（例如编译器和解释器）中的数据结构。在符号表中，程序源代码中的每个标识符都和它的声明或使用信息绑定在一起，比如其数据类型、作用域以及内存地址。<br>常用哈希表来实现.</p></blockquote><p>符号表的应用非常广泛, 可用于实现Set, Dictionary, 文件索引, 稀疏向量/矩阵等数据结构和相关的运算操作, 还有其他如过滤查询(Exception filter), 一致性查询(concordance queries)等操作.</p><p>字符符号表就是专门针对字符操作的符号表, API:<br>Prefix match - Keys with prefix <code>sh</code>: <code>she</code>, <code>shells</code>, and <code>shore</code>.<br>Wildcard match - Keys that match <code>.he</code>: <code>she</code> and <code>the</code>.<br>Longest prefix - Key that is the longest prefix of <code>shellsort</code>: <code>shells</code>.<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StringST</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    StringST(); create a symbol table with string keys</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Value val)</span></span>; put key-value pair into the symbol table</span><br><span class="line">    <span class="function">Value <span class="title">get</span><span class="params">(String key)</span></span>; value paired with key</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String key)</span></span>; delete key and corresponding value</span><br><span class="line">    <span class="function">Iterable&lt;String&gt; <span class="title">keys</span><span class="params">()</span></span>; all keys</span><br><span class="line">    <span class="function">Iterable&lt;String&gt; <span class="title">keysWithPrefix</span><span class="params">(String s)</span></span>; keys having s as a prefix</span><br><span class="line">    <span class="function">Iterable&lt;String&gt; <span class="title">keysThatMatch</span><span class="params">(String s)</span></span>; <span class="function">keys that match <span class="title">s</span> <span class="params">(where . is a wildcard)</span></span></span><br><span class="line"><span class="function">    String <span class="title">longestPrefixOf</span><span class="params">(String s)</span></span>; longest key that is a prefix of s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="以Trie为基础的字符符号表"><a href="#以Trie为基础的字符符号表" class="headerlink" title="以Trie为基础的字符符号表"></a>以Trie为基础的字符符号表</h3><p>algs4中提供了用 R-way trie 来实现符号表(symbol table)例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieST</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">256</span>; <span class="comment">// extended ASCII</span></span><br><span class="line">    <span class="keyword">private</span> Node root = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object value;</span><br><span class="line">        <span class="keyword">private</span> Node[] next = <span class="keyword">new</span> Node[R];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Value val)</span> </span>&#123;</span><br><span class="line">        root = put(root, key, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, String key, Value val, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) x = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">if</span> (d == key.length()) &#123; x.value = val; <span class="keyword">return</span> x; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        x.next[c] = put(x.next[c], key, val, d+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span> </span>&#123; <span class="keyword">return</span> get(key) != <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Node x = get(root, key, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> (Value) x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">get</span><span class="params">(Node x, String key, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (d == key.length()) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">char</span> c = key.charAt(d);</span><br><span class="line">        <span class="keyword">return</span> get(x.next[c], key, d+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按顺序迭代所有键：<br>·中序遍历trie，找到的键添加到队列中<br>·维护从根到当前节点路径的字符序列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">keys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> Queue&lt;String&gt;();</span><br><span class="line">    collect(root, <span class="string">""</span>, queue);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collect</span><span class="params">(Node x, String prefix, Queue&lt;String&gt; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x.val != <span class="keyword">null</span>) q.enqueue(prefix);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="number">0</span>; c &lt; R; c++)</span><br><span class="line">        collect(x.next[c], prefix + c, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="前缀匹配"><a href="#前缀匹配" class="headerlink" title="前缀匹配"></a>前缀匹配</h3><p>Find all keys in a symbol table starting with a given prefix.<br>Ex. Autocomplete in a cell phone, search bar, text editor, or shell.<br>・User types characters one at a time.<br>・System reports all matching strings.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">keysWithPrefix</span><span class="params">(String prefix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue&lt;String&gt; queue = <span class="keyword">new</span> Queue&lt;String&gt;();</span><br><span class="line">    Node x = get(root, prefix, <span class="number">0</span>);</span><br><span class="line">    collect(x, prefix, queue);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="最长前缀"><a href="#最长前缀" class="headerlink" title="最长前缀"></a>最长前缀</h3><p>Find longest key in symbol table that is a prefix of query string.<br>Ex. To send packet toward destination IP address, router chooses IP address in routing table that is longest prefix match.</p><p>・Search for query string.<br>・Keep track of longest key encountered.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPrefixOf</span><span class="params">(String query)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = search(root, query, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> query.substring(<span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Node x, String query, <span class="keyword">int</span> d, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> length;</span><br><span class="line">    <span class="keyword">if</span> (x.val != <span class="keyword">null</span>) length = d;</span><br><span class="line">    <span class="keyword">if</span> (d == query.length()) <span class="keyword">return</span> length;</span><br><span class="line">    <span class="keyword">char</span> c = query.charAt(d);</span><br><span class="line">    <span class="keyword">return</span> search(x.next[c], query, d+<span class="number">1</span>, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;符号表&quot;&gt;&lt;a href=&quot;#符号表&quot; class=&quot;headerlink&quot; title=&quot;符号表&quot;&gt;&lt;/a&gt;符号表&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，符号表是一种用于语言翻译器（例如编译器和解释器）中的数据结构。在符号表中，程序源代码中的每个标识符都和它的声明或使用信息绑定在一起，比如其数据类型、作用域以及内存地址。&lt;br&gt;常用哈希表来实现.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;符号表的应用非常广泛, 可用于实现Set, Dictionary, 文件索引, 稀疏向量/矩阵等数据结构和相关的运算操作, 还有其他如过滤查询(Exception filter), 一致性查询(concordance queries)等操作.&lt;/p&gt;
&lt;p&gt;字符符号表就是专门针对字符操作的符号表, API:&lt;br&gt;Prefix match - Keys with prefix &lt;code&gt;sh&lt;/code&gt;: &lt;code&gt;she&lt;/code&gt;, &lt;code&gt;shells&lt;/code&gt;, and &lt;code&gt;shore&lt;/code&gt;.&lt;br&gt;Wildcard match - Keys that match &lt;code&gt;.he&lt;/code&gt;: &lt;code&gt;she&lt;/code&gt; and &lt;code&gt;the&lt;/code&gt;.&lt;br&gt;Longest prefix - Key that is the longest prefix of &lt;code&gt;shellsort&lt;/code&gt;: &lt;code&gt;shells&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Algorithm" scheme="http://shukebeta.me/tags/Algorithm/"/>
    
      <category term="Trie" scheme="http://shukebeta.me/tags/Trie/"/>
    
      <category term="Information Retrieval" scheme="http://shukebeta.me/tags/Information-Retrieval/"/>
    
      <category term="Symbol table" scheme="http://shukebeta.me/tags/Symbol-table/"/>
    
  </entry>
  
  <entry>
    <title>NLP与信息处理 04 - “和谐” - 多模式匹配算法 - AC自动机</title>
    <link href="http://shukebeta.me/NLP-04-string-match-algorithm-ac-automaton/"/>
    <id>http://shukebeta.me/NLP-04-string-match-algorithm-ac-automaton/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-09-20T10:11:15.059Z</updated>
    
    <content type="html"><![CDATA[<p>虽然KMP可以用于<a href="/NLP-01-string-searching-algorithm-01-kmp">单模式匹配问题</a>，但如果是多模式问题, KMP的性能就得不到保证。比如根据墙内法律要求, 墙内的搜索引擎需要过滤敏感词后才能合法运营。敏感词的数量不少, 如果要求包含敏感词的网页不能被搜索到, 那么搜索引擎在爬取网页信息时, 就要标记网页的文本中是否包含任意个敏感词.<br><a id="more"></a></p><p>这就是典型的多模匹配问题. 这种情况下如果使用Trie，那么需要遍历网页的每一个字符位置，对每一个位置进行Trie前缀匹配。如果词典的词语数量为N，每个词语长度为L，文章的长度为M，那么需要进行的计算次数是在<code>N*M*L</code>这个级别的. 即使把词语的长度L简化为常数级别的, 整个算法的复杂度也至少是$O(n^2)$.</p><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><p>可以看到，KMP算法可以避免back up（在检查字符的过程中不需要回头），而Trie可以存储多个模式的信息。如果把二者结合在一起，也许能从性能上解决多模式（任意位置）匹配问题。这就是Aho–Corasick算法（AC自动机）。</p><blockquote><p>Aho–Corasick算法是由Alfred V. Aho和Margaret J.Corasick 发明的字符串搜索算法，用于在输入的一串字符串中匹配有限组字典中的子串。它与普通字符串匹配的不同点在于同时与所有字典串进行匹配。算法均摊情况下具有近似于线性的时间复杂度，约为字符串的长度加所有匹配的数量。</p></blockquote><p>所以算法的关键就是通过Trie把多个模式构建为一个DFA（Deterministic finite state automaton），然后让模式串末尾对应的状态作为一个DFA的终止节点。这样，对于一个要检查的长字符串（如一段网页内容），让这个字符串在DFA上跑一趟，每一个字符表示一种跳转方式，如果这段字符能够跳到任何一个终结节点, 那么就表明这段字符串匹配了至少一个模式, 如果整段字符跑完都没到达终结节点, 那么这个网页就是”和谐的”.</p><p>在单模式匹配中, 用KMP构建的DFA是比较简单的, 从左到右, 开头的状态就是开始状态, 结尾的状态就是结束状态:<br><img src="/images/build_dfa.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br>而多模式匹配中, 在Trie的结构基础上构建出来的DFA更像一个DFA的样子:<br><img src="/images/ushers_dfa.png" alt="" title="经典的ushers自动机，模式串是he/ she/ his /hers, 忽略了部分到根节点的转移边. image from: https://baike.baidu.com/pic"><br>Trie中的节点, 就类似于DFA中的状态. 如果让字符串<code>shis</code>在上面跑, 假如仅仅是靠Trie(也即是没有虚线标识的转移), 那么第一次从字符串的第一个字符<code>s</code>开始转移, 经过转移路径<code>0 - 85 - 90</code>之后就转不动了, 因为Trie记录的模式中没有<code>shi</code>, 这个时候得back up, 从第二个位置<code>h</code>开始再匹配一遍. 这个过程中就产生重复匹配, 而参考KMP的思路, 在匹配<code>shi</code>的过程中, 其实已经挖掘出了<code>hi</code>这个子串了, 而这个子串是跟模式<code>his</code>对应的, 如果有办法不回头继续匹配下去就能提高性能了.</p><p>而DFA中虚线的失败转移就是用来解决这个问题的: 当走到状态<code>90</code>时, 前面有了小部分子串<code>h</code>刚好对应状态<code>74</code>, 这个时候用虚线作为失败转移, 转移到<code>74</code>, 在状态<code>74</code>中寻找下一个转移<code>i</code>, 这样就实现了不回头继续匹配了.</p><p>因为AC自动机是在Trie的基础上添加边, 用于指示各个节点经过不同字符后跳转到哪个节点, 结果就变成了图, 所以也叫做<strong>Trie图</strong>.</p><p>要构建AC自动机:</p><ol><li>首先要把所有模式都吃进一个Trie中(最近看多进击的巨人了), 构建出一个由不同实线串联起来的状态机, 其中代表更好吻合一个模式的状态标记为终结节点(如上图绿色节点)</li><li>然后补全其他字符的转移(失败转移), 用虚线表示. 补全了所有字符的转移方式, 才能让字符串永不回头地匹配下去, 避免了back up, 保证性能.</li></ol><p>问题的关键在如何补全所有的状态转移.</p><h3 id="补全状态转移"><a href="#补全状态转移" class="headerlink" title="补全状态转移"></a>补全状态转移</h3><p><img src="/images/ushers_dfa.png" alt="" title="经典的ushers自动机，模式串是he/ she/ his /hers, 忽略了部分到根节点的转移边. image from: https://baike.baidu.com/pic"><br>这里要在Trie结构中定义一个<a href="https://hihocoder.com/problemset/problem/1036" target="_blank" rel="noopener">后缀节点</a>的概念: Trie中对应路径(已有模式)去掉部分前缀字符后剩余的后缀字符在Trie中对应的结点. 比如上图中, <code>h</code>作为<code>sh</code>的一个后缀, <code>h</code>对应的Trie节点<code>74</code>就是<code>sh</code>对应节点<code>90</code>的后缀节点. 等于说, <strong>节点和其后缀节点对应的模式有一部分后缀是相同</strong>.</p><p>如果知道了每一个节点的后缀节点, 那么在匹配的过程中, 在任一位置匹配失败, 都可以通过失败转移的方式转移到后缀节点, 继续进行后续匹配, 而不会遗漏, 因为后缀节点对应这个目前为止已匹配字符的某一部分后缀. 等于说, 后缀节点告诉我们, 在字符串中出现与模式不同的字符串时(匹配失败), 如何转移到其他状态.</p><p>所以问题的关键又变成了如何求后缀节点.</p><h3 id="求后缀节点"><a href="#求后缀节点" class="headerlink" title="求后缀节点"></a>求后缀节点</h3><p>观察Trie结构可以发现两个要点</p><ol><li>字符串任何一个位置对应的状态节点，一定比它的后缀节点更深，比如前面例子中状态节点<code>90</code>在第二层, 而其后缀节点<code>74</code>在第一层. 这点也是理所当然的, 毕竟后缀比较短. 从动态规划的角度考虑, 字符串任一位置<code>i</code>对应的状态节点的后缀节点一定是<code>k&lt;i</code>的节点中的某一个.</li><li>因为每一个状态<code>i</code>都是由其父节点<code>j</code>通过某一个字符<code>c</code>转移而来, 那么<code>i</code>的后缀节点一定是<code>j</code>的后缀节点通过同样的字符<code>c</code>转移而来. 或者说, 如果<code>j</code>的后缀节点是<code>jj</code>, 那么<code>j</code>和<code>jj</code>有着相同的后缀, 它们通过同样的转移字符<code>c</code>转移后, 二者到达的节点也一定有着相同的后缀.</li></ol><p>比如上面Ushers自动机例子中, 如果用字符串<code>sshis</code>来跑, 那么<code>ssh</code>对应的状态<code>90</code>, 是由前缀<code>ss</code>通过字符<code>h</code>转移而来. 因为<code>ssh</code>的后缀节点, 同样是某一个有共同后缀的字符(<code>h</code>或者<code>sh</code>)对应的状态(在这里是<code>h</code>对应的<code>74</code>). 可以发现<code>74</code>是由根节点<code>0</code>通过同样的字符<code>h</code>转移而来的. 反过来说, 节点<code>0</code>就是节点<code>90</code>的父节点<code>85</code>的后缀节点.</p><p>在多个模式中, 如果有某模式的前缀刚好是另一模式的子串(后缀). 比如上面Ushers自动机例子中, 模式<code>her</code>(或者<code>he</code>)的前缀<code>he</code>就是模式<code>she</code>的子串, 则会二者存在失败转移的关联. 如果没有, 那么就跳回初始状态节点.</p><p>所以补全所有状态转移的具体实现方法就是运用动态规划的原理:</p><ul><li>从Trie根节点开始, 逐层往下补全每一层的状态转移, 也就是宽度优先遍历(BFS), 这样下层的状态转移就可以利用上层的结果. 动态规划的转移方程可以描述为: <strong>每一个通过字符<code>c</code>转移而来的状态节点<code>i</code>的后缀节点 = <code>i</code>的父节点的后缀节点通过<code>c</code>转移到的状态节点</strong></li><li>初始状态包含两部分:<ul><li>一个是根节点(初始状态<code>0</code>), 它的后缀节点就是它自己,</li><li>另一个是第一层的状态节点, 如<code>85, 74</code>, 因为它们对应的是长度为<code>1</code>的字符, 没有后缀, 所以它们的后缀节点也是根节点<code>0</code>.</li></ul></li></ul><p>在实现中还要注意, <strong>后缀结点为标记结点的结点也需要被标记</strong>. 因为在状态转移过程中, 如果某个虚线转移刚好转移到终结节点, 但在字符串遍历的过程中, 并没有选择走这一条线, 就会忽略了这个终结节点, 导致匹配失败, 或者多走了更多的路. 比如在上面的例子中, 如果把模式<code>she</code>改为<code>shee</code>, <code>91</code>不再是终结节点, 而是延伸到<code>92</code>为终结节点, <code>91</code>的后缀节点是<code>76</code>. 如果用字符串<code>sshe</code>来跑这个DFA, 就会出现走到最后字符<code>e</code>时, 在节点<code>91</code>结束, 匹配失败. 所以需要把<code>91</code>也标记为终结节点.</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 把字典通过insert把所有单词插入Trie树，</span></span><br><span class="line"><span class="comment"> * 然后通过setSuffix()构建出对应的Trie图，</span></span><br><span class="line"><span class="comment"> * 然后从Trie图的根节点开始，沿着文章str的每一个字符，走出对应的边，</span></span><br><span class="line"><span class="comment"> * 直到遇到一个标记结点或者整个str都遍历完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode trie;</span><br><span class="line">    Queue&lt;TrieNode&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        trie = <span class="keyword">new</span> TrieNode(<span class="keyword">null</span>, <span class="string">' '</span>);</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode curNode = trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x : word.toCharArray()) &#123;</span><br><span class="line">            curNode = insert(curNode, x);</span><br><span class="line">        &#125;</span><br><span class="line">        curNode.setLast(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** insert char x, means create a new node in the x edge.</span></span><br><span class="line"><span class="comment">     * return created node  */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode <span class="title">insert</span><span class="params">(TrieNode node, <span class="keyword">char</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.get(x) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.set(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.get(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** BFS on the trie */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue.add(trie);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">/** poll() removes the present head.</span></span><br><span class="line"><span class="comment">             http://www.tutorialspoint.com/java/util/linkedlist_poll.htm */</span></span><br><span class="line">            TrieNode node = queue.poll();</span><br><span class="line">            setSuffix(node);</span><br><span class="line">            complementDFA(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Set node's suffix, complement lacking edge</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode <span class="title">setSuffix</span><span class="params">(TrieNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.root == <span class="keyword">null</span>) &#123; <span class="comment">// Trie root</span></span><br><span class="line">            node.suffix = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.root.root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.suffix = node.root.suffix;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.suffix = node.root.suffix.get(node.fromIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.suffix.isLast) &#123;</span><br><span class="line">            node.isLast = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Complement DFA according to suffix */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">complementDFA</span><span class="params">(TrieNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.isLast) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node.edges.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.edges[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    node.edges[i] = node;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.edges[i] = node.suffix.edges[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                queue.add(node.edges[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> contains = <span class="keyword">false</span>;</span><br><span class="line">        TrieNode curNode = trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> x = s.charAt(i);</span><br><span class="line">            curNode = curNode.get(x);</span><br><span class="line">            <span class="keyword">if</span> (curNode.isLast) &#123;</span><br><span class="line">                contains = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> contains;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ATO0 = <span class="number">97</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isLast;</span><br><span class="line">        TrieNode[] edges;</span><br><span class="line">        TrieNode root;</span><br><span class="line">        <span class="keyword">char</span> fromIndex;</span><br><span class="line">        TrieNode suffix;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">(TrieNode root, <span class="keyword">char</span> from)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = root;</span><br><span class="line">            fromIndex = from;</span><br><span class="line">            edges = <span class="keyword">new</span> TrieNode[R];</span><br><span class="line">            isLast = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TrieNode <span class="title">get</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> edges[ch - ATO0];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** instantiate the ch child in edges */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">            edges[ch - ATO0] = <span class="keyword">new</span> TrieNode(<span class="keyword">this</span>, ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast</span><span class="params">(<span class="keyword">boolean</span> isLast)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isLast = isLast;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Trie t = <span class="keyword">new</span> Trie();</span><br><span class="line">        String[] X = &#123;<span class="string">"sb"</span>, <span class="string">"dsb"</span>, <span class="string">"cjdsb"</span>, <span class="string">"qnmlgb"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String x : X) &#123;</span><br><span class="line">            t.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t.setSuffix();</span><br><span class="line">        String s = <span class="string">"aadbaaadaaac"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t.search(s)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"YES"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然KMP可以用于&lt;a href=&quot;/NLP-01-string-searching-algorithm-01-kmp&quot;&gt;单模式匹配问题&lt;/a&gt;，但如果是多模式问题, KMP的性能就得不到保证。比如根据墙内法律要求, 墙内的搜索引擎需要过滤敏感词后才能合法运营。敏感词的数量不少, 如果要求包含敏感词的网页不能被搜索到, 那么搜索引擎在爬取网页信息时, 就要标记网页的文本中是否包含任意个敏感词.&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Algorithm" scheme="http://shukebeta.me/tags/Algorithm/"/>
    
      <category term="Trie图" scheme="http://shukebeta.me/tags/Trie%E5%9B%BE/"/>
    
      <category term="AC自动机" scheme="http://shukebeta.me/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>NLP与信息处理 03 - 单模式匹配与拼写检查 - Trie</title>
    <link href="http://shukebeta.me/NLP-03-string-match-algorithm-Trie/"/>
    <id>http://shukebeta.me/NLP-03-string-match-algorithm-Trie/</id>
    <published>2018-09-09T16:00:00.000Z</published>
    <updated>2018-09-20T09:38:09.618Z</updated>
    
    <content type="html"><![CDATA[<p>Trie 也称字典树，名称来源于Re<font color="red">trie</font>val，支持$O(n)$插入和查询操作，以空间换取时间的数据结构. 用于词频统计和输入统计领域, 可以高效地存储大规模的字典数据, 也可以用于模糊匹配, 搜索最长前缀词等.</p><blockquote><p>A <strong>trie</strong>, also called <strong>digital tre</strong>e, <strong>radix tree</strong> or <strong>prefix tree</strong> is a kind of search tree - an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. Unlike a binary search tree, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. Keys tend to be associated with leaves, though some inner nodes may correspond to keys of interest. Hence, keys are not necessarily associated with every node.</p></blockquote><a id="more"></a><p><img src="/images/Trie_example.png" alt="" title="A trie for keys &quot;A&quot;,&quot;to&quot;, &quot;tea&quot;, &quot;ted&quot;, &quot;ten&quot;, &quot;i&quot;, &quot;in&quot;, and &quot;inn&quot;. Image from https://en.wikipedia.org/wiki/Trie"></p><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>Trie没有规定每一个节点的分支数量, 用<strong>R-way Trie</strong>来表示分支数量为<code>R</code>的Trie. 对于不同的应用, 可以设置不同的<code>R</code>.</p><h3 id="字符（模糊）匹配与拼写检查"><a href="#字符（模糊）匹配与拼写检查" class="headerlink" title="字符（模糊）匹配与拼写检查"></a>字符（模糊）匹配与拼写检查</h3><p>应用例子是在一本字典中查找特定前缀的所有单词. 简化的例子是在英文字典中, 根据查询前缀, 返回相同前缀的所有单词数. 同样的结构可以用来检查拼写错误.</p><p>那么只需要在每一个节点存储该节点以下所有单词数就行了. 每一个节点包含一个长度26的数组，以方便快速定位对应的26个字母, 类似B-tree:<img src="/images/b_tree.png" alt="" title="image from https://www.coursera.org/learn/algorithms-part1"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字母本身可以用来作为索引：a - 97, z - 122</span></span><br><span class="line"><span class="comment"> * Color 是备用属性， 用于标记该节点是否为单词结尾，这里暂时用不到。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ATO0 = <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Trie[] node;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        node = <span class="keyword">new</span> Trie[ALPHABET];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String words)</span> </span>&#123;</span><br><span class="line">        Trie[] curNode = node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x : words.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = x - ATO0;</span><br><span class="line">            insert(curNode, index);</span><br><span class="line">            curNode = curNode[index].node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Trie[] curNode, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curNode[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            curNode[index] = <span class="keyword">new</span> Trie(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curNode[index].n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Trie[] curNode = node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x : prefix.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = x - ATO0;</span><br><span class="line">            <span class="keyword">if</span> (curNode[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count = curNode[index].n;</span><br><span class="line">            curNode = curNode[index].node;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要问题扩展为返回所有相同前缀的单词，那么就要在插入字典时，在对应单词结尾的节点标记颜色。</p><h3 id="提高扩展性"><a href="#提高扩展性" class="headerlink" title="提高扩展性"></a>提高扩展性</h3><p>用固定长度为26的数组来处理英文，好处是数组内存占用小，索引时也不需要搜索，直接用字符码作为索引。也可以根据ASCII码进一步扩大数组长度以支持更多字符。</p><p>为了提高可扩展性，可以考虑用其他更灵活的数据结构来替代数组，比如HashMap，同时把HashMap放进一个TrieNode类。这样以后要修改核心的存储结构，只需要改动TrieNode即可，其余的接口不用改。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode node;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.node = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode curNode = node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x : word.toCharArray()) &#123;</span><br><span class="line">            curNode = curNode.set(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode curNode = node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x : prefix.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curNode.get(x) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            curNode = curNode.get(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curNode.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, TrieNode&gt; map;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">char</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">(Character val)</span> </span>&#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.value = val;</span><br><span class="line">            map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TrieNode <span class="title">get</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TrieNode <span class="title">set</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">            TrieNode t = map.get(ch);</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                t = <span class="keyword">new</span> TrieNode(ch);</span><br><span class="line">                <span class="keyword">this</span>.map.put(ch, t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t.count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HashMap的寻址虽然会靠字符码作为地址的数组慢一点点，但也是非常快的:$O(\log N)$。但HashMap本身是比较耗内存的数据结构, 所以如果知道要处理的数据是在特定范围内的, 比如节点就是在256个字符中, 那么还是不要不用HashMap.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trie 也称字典树，名称来源于Re&lt;font color=&quot;red&quot;&gt;trie&lt;/font&gt;val，支持$O(n)$插入和查询操作，以空间换取时间的数据结构. 用于词频统计和输入统计领域, 可以高效地存储大规模的字典数据, 也可以用于模糊匹配, 搜索最长前缀词等.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;trie&lt;/strong&gt;, also called &lt;strong&gt;digital tre&lt;/strong&gt;e, &lt;strong&gt;radix tree&lt;/strong&gt; or &lt;strong&gt;prefix tree&lt;/strong&gt; is a kind of search tree - an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. Unlike a binary search tree, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. Keys tend to be associated with leaves, though some inner nodes may correspond to keys of interest. Hence, keys are not necessarily associated with every node.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Algorithm" scheme="http://shukebeta.me/tags/Algorithm/"/>
    
      <category term="Trie" scheme="http://shukebeta.me/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>NLP与信息处理 02 - 字符搜索匹配算法 02 - Boyer-Moore(BM) 和 Rabin-Karp(RK)</title>
    <link href="http://shukebeta.me/NLP-02-string-searching-algorithm-02-bm-rk/"/>
    <id>http://shukebeta.me/NLP-02-string-searching-algorithm-02-bm-rk/</id>
    <published>2018-09-08T16:00:00.000Z</published>
    <updated>2018-09-18T09:45:20.520Z</updated>
    
    <content type="html"><![CDATA[<p>字符串搜索/匹配算法中, Boyer-Moore(BM)比前面的<a href="/NLP-01-string-searching-algorithm-kmp">Knuth–Morris–Pratt(KMP)</a>更高效. BM算法从右到左扫描模式中的字符。当匹配的字符在模式中不存在时，可以跳过最多达M个字符.<img src="/images/bm.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br><a id="more"></a></p><h2 id="BM"><a href="#BM" class="headerlink" title="BM"></a>BM</h2><p>在决定要跳过多少字符时, 分几种情况考虑:<br>Case 1. mismatch character <code>T</code> not in pattern: increment <code>i</code> one character beyond <code>T</code><br>Case 2a. Mismatch character in pattern: mismatch character <code>N</code> in pattern, align text <code>N</code> with rightmost pattern <code>N</code><br>Case 2b. Mismatch character in pattern (but heuristic no help): mismatch character <code>E</code> in pattern,<br>align text <code>E</code> with rightmost pattern <code>E</code>? 还是 increment i by 1? 无法确定, 需要辅助信息.</p><p>需要预先计算模式各个字符在模式最右边出现的索引(若无则<code>-1</code>):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">right = <span class="keyword">new</span> <span class="keyword">int</span>[R];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; R; c++)</span><br><span class="line">right[c] = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">right[pat.charAt(j)] = j;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String txt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = txt.length();</span><br><span class="line"><span class="keyword">int</span> M = pat.length();</span><br><span class="line"><span class="keyword">int</span> skip;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N-M; i += skip)</span><br><span class="line">&#123;</span><br><span class="line">skip = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = M-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pat.charAt(j) != txt.charAt(i+j))</span><br><span class="line">&#123;</span><br><span class="line">skip = Math.max(<span class="number">1</span>, j - right[txt.charAt(i+j)]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (skip == <span class="number">0</span>) <span class="keyword">return</span> i; <span class="comment">// match</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Substring search with the Boyer-Moore mismatched character heuristic takes about <code>~ N / M</code> character compares to search for a pattern of length <code>M</code> in a text of length <code>N</code>.<br>Worst-case. Can be as bad as <code>~ M N</code>.</p></blockquote><p>Boyer-Moore变种: 通过添加类似KMP的规则来防止重复模式，可以将最坏情况改善为<code>~3 N</code>字符比较。</p><h2 id="RK"><a href="#RK" class="headerlink" title="RK"></a>RK</h2><p>Rabin-Karp 基于 modular hashing：<br>・Compute a hash of pattern characters <code>0</code> to <code>M - 1</code>.<br>・For each <code>i</code>, compute a hash of text characters <code>i</code> to <code>M + i - 1</code>.<br>・If pattern hash = text substring hash, check for a match.</p><p>所以算法的关键在于如何高效地计算哈希值：Horner’s method - 用于评估M阶多项式的线性时间方法<br><img src="/images/horner_method.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compute hash for M-digit key</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(String key, <span class="keyword">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">h = (R * h + key.charAt(j)) % Q;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>给定$x_i$，如何计算$x_{i+1}$：<br>$$x_i = t_i R^{M-1} + T_{i+1}R^{M-2} + … + t_{i+M-1}R^0$$<br>$$x_{i+1} = t_{i+1}R^{M-1} + T_{i+2}R^{M-2} + … + t_{i+M}R^0$$<br>$$x_{i+1} = (x_i - t_i R^{M-1}) R + t_{i+M}$$<br>M-digit, base-R integer, modulo Q，$R^{M-1}$是可以预先计算的.<br><img src="/images/rk.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabinKarp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> patHash; <span class="comment">// pattern hash value</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> M; <span class="comment">// pattern length</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> Q; <span class="comment">// modulus</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> R; <span class="comment">// radix</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> RM; <span class="comment">// R^(M-1) % Q</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RabinKarp</span><span class="params">(String pat)</span> </span>&#123;</span><br><span class="line">M = pat.length();</span><br><span class="line">R = <span class="number">256</span>;</span><br><span class="line">Q = longRandomPrime(); <span class="comment">// a large prime (but avoid overflow)</span></span><br><span class="line"></span><br><span class="line">RM = <span class="number">1</span>; <span class="comment">// precompute R^&#123;M – 1&#125; (mod Q)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M-<span class="number">1</span>; i++)</span><br><span class="line">RM = (R * RM) % Q;</span><br><span class="line">patHash = hash(pat, M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(String key, <span class="keyword">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* as before */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** check for hash collision using rolling hash function */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String txt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = txt.length();</span><br><span class="line"><span class="keyword">int</span> txtHash = hash(txt, M);</span><br><span class="line"><span class="keyword">if</span> (patHash == txtHash) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">txtHash = (txtHash + Q - RM*txt.charAt(i-M) % Q) % Q;</span><br><span class="line">txtHash = (txtHash*R + txt.charAt(i)) % Q;</span><br><span class="line"><span class="keyword">if</span> (patHash == txtHash) <span class="keyword">return</span> i - M + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有两种方式判断是否匹配：</p><ul><li>Monte Carlo version. Return match if hash match.<ul><li>Always runs in linear time. Extremely likely to return correct answer (but not always!).</li></ul></li><li>Las Vegas version. Check for substring match if hash match; continue search if false collision.<ul><li>Always returns correct answer. Extremely likely to run in linear time (but worst case is M N).</li></ul></li></ul><blockquote><p>In theory, if <code>Q</code> is a sufficiently large random prime (about $M N^2$), then the probability of a false collision is about <code>1 / N</code>.<br>In practice, choose <code>Q</code> to be a large prime (but not so large to cause overflow). Under reasonable assumptions, probability of a collision is about <code>1 / Q</code>.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/images/substring_search_cost_summary.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br>算法可以拓展到二维模式匹配, 多模式匹配等问题.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符串搜索/匹配算法中, Boyer-Moore(BM)比前面的&lt;a href=&quot;/NLP-01-string-searching-algorithm-kmp&quot;&gt;Knuth–Morris–Pratt(KMP)&lt;/a&gt;更高效. BM算法从右到左扫描模式中的字符。当匹配的字符在模式中不存在时，可以跳过最多达M个字符.&lt;img src=&quot;/images/bm.png&quot; alt=&quot;&quot; title=&quot;image from: https://www.coursera.org/learn/algorithms-part2/&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Algorithm" scheme="http://shukebeta.me/tags/Algorithm/"/>
    
      <category term="Boyer-Moore" scheme="http://shukebeta.me/tags/Boyer-Moore/"/>
    
  </entry>
  
  <entry>
    <title>NLP与信息处理 01 - 字符搜索匹配算法 01 - KMP</title>
    <link href="http://shukebeta.me/NLP-01-string-searching-algorithm-01-kmp/"/>
    <id>http://shukebeta.me/NLP-01-string-searching-algorithm-01-kmp/</id>
    <published>2018-09-07T16:00:00.000Z</published>
    <updated>2018-09-20T09:37:54.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>In computer science, string-searching algorithms, sometimes called string-matching algorithms, are an important class of string algorithms that try to find a place where one or several strings (also called patterns) are found within a larger string or text.</p></blockquote><p>字符串搜索/匹配算法在大规模文本应用中有非常重要的作用，比如文章敏感词搜索，多关键词过滤搜索等。如果使用暴力搜索，则时间复杂度很高（若 m 为关键字的长度， n 为要待搜索的字符串长度， k为关键字数量，则复杂度为$O(n \times m \times k)$。而好的算法可以让这些问题的时间复杂度大大降低。</p><p>常用的算法有Knuth–Morris–Pratt(KMP), Boyer-Moore(BM), Rabin-Karp(RK), Trie, Trie图, AC自动机等.<br><a id="more"></a></p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>Knuth–Morris–Pratt 算法在每次搜索匹配前，预处理模式字符串，记录模式字符串自身重复的情况，即包含左临界的子字符串和包含右临界的子字符串的重复长度，以此来作为后续匹配的参考。当实际去匹配带搜索字符串时，想象是我们拿着模式字符串从左到右匹配过去。任何时候，如果发现匹配不上的时，不是简单地右移一位继续重新匹配，而是在已匹配部分的范围内，直接跳过k个字符，右移到与模式开头部分重复的位置，并接着重复部分后面继续开始匹配（重复的部分证明已经匹配过）。</p><p>一个很好解释<a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">参考</a><br><img src="/images/kmp1.png" alt=""><img src="/images/kmp2.png" alt="" title="https://blog.csdn.net/v_july_v/article/details/7041827"><br>KMP算法的理论基础基于确定性有限状态自动机 DFA（Deterministic finite state automaton）。DFA可以理解为抽象的字符搜索机：</p><ul><li>有限数量的<strong>状态</strong>（包括开始和停止）。</li><li>字母表每个字符对应一个状态转换。</li><li>只接受能通往停止状态的转换序列。</li></ul><p><img src="/images/kmp_dfa.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br>如<code>ABCAABABABAB</code>对应<code>0→1→2→0→1→1→2→3→4→5→4→5→4</code></p><p>可以看出KMP算法的几个要点:</p><ul><li>状态State: 表示模式中已匹配的字符数。<code>pattern[]</code>最长前缀(同时是<code>txt[0..i]</code>的后缀)的长度.</li><li>需要预先从<code>pattern</code>中计算<code>dfa[][]</code></li><li>字符串遍历指针只会前进不会后退</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String txt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, N = txt.length();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; N &amp;&amp; j &lt; M; i++)</span><br><span class="line">j = dfa[txt.charAt(i)][j];</span><br><span class="line"><span class="keyword">if</span> (j == M) <span class="keyword">return</span> i - M;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Running time: at most N character accesses to Simulate DFA on text.</p><h3 id="使用DFA"><a href="#使用DFA" class="headerlink" title="使用DFA"></a>使用DFA</h3><p>用状态<code>state j</code>表示模式<code>pat</code>的前<code>j</code>个字符已经匹配. 用<code>dfa[c][j]</code>表示在状态<code>state j</code>时, 遇到下一个字符<code>c</code>, 应该转移到什么状态.</p><p>在状态<code>state j</code>：<br>· 如果匹配成功，<code>char c == pat.charAt(j)</code>，则转移到<code>state j+1</code>: <code>dfa[pat.charAt(j)][j] = j+1</code>.<br>· 如果失败，则从<code>pat[1..j-1]</code>对应的DFA状态<code>X</code>，向着<code>c</code>方向转移：<code>copy dfa[][X] to dfa[][j]</code>.<br>・Update <code>X</code>.<br><img src="/images/build_dfa.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part2/"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KMP</span><span class="params">(String pat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pat = pat;</span><br><span class="line">M = pat.length();</span><br><span class="line">dfa = <span class="keyword">new</span> <span class="keyword">int</span>[R][M];</span><br><span class="line">dfa[pat.charAt(<span class="number">0</span>)][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> X = <span class="number">0</span>, j = <span class="number">1</span>; j &lt; M; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; R; c++)</span><br><span class="line">dfa[c][j] = dfa[c][X]; <span class="comment">// copy mismatch cases</span></span><br><span class="line">dfa[pat.charAt(j)][j] = j+<span class="number">1</span>;</span><br><span class="line">X = dfa[pat.charAt(j)][X];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Running time. M character accesses (but space/time proportional to R M).</p><h3 id="NEXT数组"><a href="#NEXT数组" class="headerlink" title="NEXT数组"></a>NEXT数组</h3><p>假设现在文本串<code>S</code>匹配到<code>i</code>位置，模式串<code>P</code>匹配到<code>j</code>位置:<br><img src="https://img-blog.csdn.net/20140812223633281" alt="" title="image from: https://blog.csdn.net/v_july_v/article/details/7041827"><br>首先第一位NEXT值<code>next[0]</code>一定是<code>-1</code>, 后面的第<code>j+1</code>个值<code>next[j]</code>代表<code>[0, j-1]</code>部分有多少重复前后缀. 可以根据前一位的<code>next[j-1]</code>值<code>k</code>推断:</p><ul><li>如果<code>P[j] == P[k]</code>, 则意味着重复前后缀长度<code>+1</code>, 那么<code>next[j] = next[j-1] + 1 = k + 1</code>.</li><li>如果<code>P[j] != P[k]</code>, 则意味着前面重复前后缀无法继续下去. 此时不能简单地判定<code>next[j] = 0</code>, 需要继续往前看是否有更短小的重复前后缀. 又因为重复前后缀意味着前后端相同, 因此可以直接匹配<code>P[j] ?= P[k&#39;], k&#39; = next[k]</code>, 以此循环下去直到<code>k&#39; = -1</code>为止.</li></ul><p>以上算法还可以进一步优化: 当<code>P[j] != S[i]</code>时，下次必然匹配<code>P[next [j]] ?= S[i]</code>，此时如果<code>P[j] == P[next[j]]</code>，则意味着匹配必然失败. 这样就出现了冗余匹配。所以如果出现<code>P[j] == P[next[j]]</code>，则令<code>next[j] = next[next[j]] = next[next[j-1] + 1] = next[k + 1]</code>.<img src="http://hi.csdn.net/attachment/201106/14/8394323_13080758591kyV.jpg" alt="" title="image from: https://blog.csdn.net/v_july_v/article/details/7041827"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span>[] p, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; p.length - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//p[k]表示前缀，p[j]表示后缀</span></span><br><span class="line"><span class="keyword">if</span> (k == -<span class="number">1</span> || p[j] == p[k]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[++j] != p[++k]) &#123;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next[j] = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>对于优化后的next数组可以发现一点：如果模式串的后缀跟前缀相同，那么它们的next值也是相同的，例如模式串abcabc，它的前缀后缀都是abc，其优化后的next数组为：-1 0 0 -1 0 0，前缀后缀abc的next值都为-1 0 0.</p></blockquote><h3 id="基于NEXT数组的KMP算法"><a href="#基于NEXT数组的KMP算法" class="headerlink" title="基于NEXT数组的KMP算法"></a>基于NEXT数组的KMP算法</h3><p>基于前面求出的NEXT数组, 可以根据以下步骤实现KMP算法:</p><ul><li>假设现在文本串<code>S</code>匹配到<code>i</code>位置，模式串<code>P</code>匹配到<code>j</code>位置<ul><li>if <code>j = -1</code>, or <code>S[i] == P[j]</code>(当前字符匹配成功), then <code>i++, j++</code></li><li>else, <code>j = next[j]</code>。当失配时，模式串<code>P</code>相对于文本串<code>S</code>向右移动<code>j - next[j]</code>位(大于等于1)。</li></ul></li></ul><p><img src="https://img-blog.csdn.net/20150812214857858" alt="" title="image from: https://img-blog.csdn.net/20150812214857858"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 返回模式串第一次在文本串中出现的位置 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">char</span>[] p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; s.length &amp;&amp; j &lt; p.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == -<span class="number">1</span> || s[i] == p[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == p.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="KMP应用"><a href="#KMP应用" class="headerlink" title="KMP应用"></a>KMP应用</h3><p>判断一段文字（原串）里面是否存在敏感词（模式串）。原题地址 <a href="http://hihocoder.com/problemset/problem/1015?sid=1368409：" target="_blank" rel="noopener">http://hihocoder.com/problemset/problem/1015?sid=1368409：</a></p><p>输入：第一行一个整数N，表示测试数据组数。接下来的N*2行，每两行表示一个测试数据。在每一个测试数据中，第一行为模式串，由不超过10^4个大写字母组成，第二行为原串，由不超过10^6个大写字母组成。其中N&lt;=20.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">HA</span><br><span class="line">HAHAHA</span><br><span class="line">WQN</span><br><span class="line">WQN</span><br><span class="line">ADA</span><br><span class="line">ADADADA</span><br><span class="line">BABABB</span><br><span class="line">BABABABABABABABABB</span><br><span class="line">DAD</span><br><span class="line">ADDAADAADDAAADAAD</span><br></pre></td></tr></table></figure></p><p>输出: 对于每一个测试数据，按照它们在输入中出现的顺序输出一行Ans，表示模式串在原串中出现的次数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>这里是需要找出出现的次数，因此不仅仅是找到第一个，还要继续遍历原串统计剩余出现的次数，同时要考虑重叠的部分。关键的功能代码可以复制上面的，但是需要作出一些改动。</p><p>首先，因为部分重叠情况也是要统计的，比如<code>ADADADA</code>这个原串, 包含3个<code>ADA</code>. 所以要考虑即使匹配成功后, 模式串的索引<code>j</code>能够跳回前面的重复前缀位置. 考虑使用未优化过的NEXT计算方法.</p><p>除此之外, 通过额外计算多一位NEXT值, 记录完整的模式串的重复前后缀长度, 以协助索引.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span>[] p, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; p.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == -<span class="number">1</span> || p[j] == p[k]) &#123;</span><br><span class="line">            next[++j] = ++k;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于<code>ADA</code>, 原来未优化过的NEXT是<code>-1,0,0</code>, 现在是<code>-1,0,0,1</code>, 最后一位<code>1</code>表示<code>ADA</code>这个模式串的重复前后缀是长度为<code>1</code>的<code>A</code>.</p><p>借助额外长度的NEXT, 只需要小小地改动KMP计算逻辑, 最重要的是当<code>j</code>到达<code>NEXT</code>的额外位置时, 通过<code>j = next[j];</code>把<code>j</code>后拨到重复前缀的位置, 以方便进行后面的搜索.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 返回模式串在原串中出现的次数 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">KmpSearch</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">char</span>[] p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[p.length + <span class="number">1</span>]; <span class="comment">// 额外多计算一位</span></span><br><span class="line">    GetNext(p, next);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == -<span class="number">1</span> || s[i] == p[j]) &#123;</span><br><span class="line">            i++; j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == p.length) &#123;</span><br><span class="line">            c++;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;In computer science, string-searching algorithms, sometimes called string-matching algorithms, are an important class of string algorithms that try to find a place where one or several strings (also called patterns) are found within a larger string or text.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;字符串搜索/匹配算法在大规模文本应用中有非常重要的作用，比如文章敏感词搜索，多关键词过滤搜索等。如果使用暴力搜索，则时间复杂度很高（若 m 为关键字的长度， n 为要待搜索的字符串长度， k为关键字数量，则复杂度为$O(n \times m \times k)$。而好的算法可以让这些问题的时间复杂度大大降低。&lt;/p&gt;
&lt;p&gt;常用的算法有Knuth–Morris–Pratt(KMP), Boyer-Moore(BM), Rabin-Karp(RK), Trie, Trie图, AC自动机等.&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Algorithm" scheme="http://shukebeta.me/tags/Algorithm/"/>
    
      <category term="KMP" scheme="http://shukebeta.me/tags/KMP/"/>
    
      <category term="Aho–Corasick algorithm" scheme="http://shukebeta.me/tags/Aho%E2%80%93Corasick-algorithm/"/>
    
      <category term="Trie" scheme="http://shukebeta.me/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>算法和程序设计范例 03 - Dynamic Programming 03 - Knapsack背包问题</title>
    <link href="http://shukebeta.me/algorithm-paradigm-03-dynamic-programming-03/"/>
    <id>http://shukebeta.me/algorithm-paradigm-03-dynamic-programming-03/</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2018-09-14T12:21:12.105Z</updated>
    
    <content type="html"><![CDATA[<p>继上两篇<a href="/algorithm-paradigm-01-dynamic-programming-01">01 理解动态规划</a>和<a href="/algorithm-paradigm-02-dynamic-programming-02">02 应用动态规划</a>后, 这篇继续分享各种动态规划的高级应用案例.<br><a id="more"></a></p><h2 id="Knapsack背包问题"><a href="#Knapsack背包问题" class="headerlink" title="Knapsack背包问题"></a>Knapsack背包问题</h2><blockquote><p>背包问题（Knapsack problem）是一种组合优化的NP完全问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。问题的名称来源于如何选择最合适的物品放置于给定背包中。<br>也可以将背包问题描述为决定性问题，即在总重量不超过W的前提下，总价值是否能达到V。</p></blockquote><h3 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h3><p>最基础的背包问题：有N件物品和一个体积为V的背包, <strong>每种物品均只有一件</strong>, 第i件物品的大小/重量是<code>s[i]</code>，价值是<code>v[i]</code>. 求将哪些物品装入背包可使这些物品的体积总和不超过背包体积，且价值总和最大.</p><p>对于每一个物品，只有两种结果，放入或者不放入背包，那么<code>kn(i, j)</code>则表示背包容量剩余<code>j</code>时, 前<code>i</code>个物品能够达到的最大值:</p><ul><li><code>kn1 = kn(i-1, j-s(i)) + v(i)</code>表示物品<code>i</code>放入背包后的总价值, 为前<code>i-1</code>物品在第<code>i</code>个物品占用了背包容量<code>s(i)</code>后的的最优解加上第<code>i</code>个物品的价值<code>v(i)</code>.</li><li><code>kn2 = kn(i-1, j)</code>表示物品<code>i</code>并没有放入背包, 等于前<code>i-1</code>个物品在相同背包容量的最优价值.</li></ul><p>归纳出来的大小子问题间的关系(转移方程)为: <code>kn(i, j) = max(kn1, kn2) = max(kn(i-1, j-s(i)) + v(i), kn(i-1, j))</code>. 初始状态是对于不同背包剩余容量, 当没有物品可放时, 返回的最大价值一定是<code>0</code>. 所以背包问题, 就是二维的动态规划问题. 需要确定初始状态, 和哪些信息需要<strong>记忆</strong>.</p><p>可以简单地用一个二维数组记忆所有<code>kn(i, j)</code>, 但要考虑到当容量非常大, 物品非常多时, 这个二维数组是很大的, 比如当<code>(i, j) = (2000, 2000000)</code>, 会抛出<code>java.lang.OutOfMemoryError: Java heap space</code>. 特别是, 当每个物品的价值也比较大时, 二维数组的<code>j</code>维度其实利用率很低. 所以存在很多优化的空间.</p><p>优化的关键点在于减少记忆点. 注意到转移方程中:</p><ul><li><code>kn(i, *)</code>只需要用到<code>kn(i-1, *)</code>的值, 但我们又清楚地知道，物品在这里是没有顺序的意义的，所以这里的<code>i</code>仅仅是表示迭代的步骤, 只是为了遍历所有物品, 至于具体的顺序是不重要的, 所以不需要记录所有<code>i</code>对应的<code>kn(i, *)</code>, 仅仅记录最近一次计算值即可. 所以我们只需要至多两个数组用来记录<code>i-1</code>和<code>i</code>对应的<code>kn</code>值.</li><li><code>kn(i, j)</code>要用到<code>kn(i-1, k), k&lt;=j</code>的值, 具体要用到哪些<code>k</code>是取决于<code>i</code>. 所以<code>j</code>维度的值必须都要记录下来, 以防后续需要用到.</li><li>结合起来发现只需要一个一维数组<code>kn = new int[size + 1]</code>即可, <code>i</code>对应的值可以直接在数组上更新, 不需要额外的数组记录上一次迭代的值. 在实现中, 因为<code>kn(i, j)</code>要用到<code>kn(i-1, &lt;=j)</code>的值, 也就是<code>kn[&lt;j]</code>的值不能先于<code>kn[j]</code>更新, 所以<code>kn</code>的计算要从右往左(<code>j = size; j--</code>).</li><li>每次决定是否加入<code>i</code>物品之前, 如果剩余容量<code>j</code>小于<code>s[i]</code>, 那么肯定无法放入, 这个判断可以融合进<code>j</code>的遍历中, 因为<code>j</code>本身代表了剩余容量.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] values;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] sizes;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = values.length;</span><br><span class="line">    <span class="keyword">int</span>[] vs = <span class="keyword">new</span> <span class="keyword">int</span>[size + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// items</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = size; j &gt;= sizes[i]; j--) &#123;</span><br><span class="line">            vs[j] = Math.max(vs[j - sizes[i]] + values[i], vs[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vs[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化以后空间复杂度由$\theta(NS)$降到$\theta(S)$。但时间复杂度不变.</p><p>对于0-1背包问题，如果问题变为求恰好装满时的最大值, 参考<a href="https://blog.csdn.net/liangbopirates/article/details/9750463" target="_blank" rel="noopener">这篇博文</a>: 此时只有容量为<code>0</code>的背包可能被价值为<code>0</code>的物品(无物品)恰好装满，初始化合法状态<code>kn[0] = 0</code>, <code>kn[j &gt; 0]</code>为负数. 反之, 如果要求的是恰好装满时的最小值，初始化为正无穷。要注意的是改变初始化以后最后一个值是恰好装满的最大值，如果不能恰好装满，那肯定是一个负数，而且对于恰好装满的的初始化情况的不要求满的最大值是0-v背包容量的最大值。即是最后一行的MAX。</p><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>Unbounded Knapsack: 有<code>N</code>种物品和一个体积为<code>S</code>的背包，每种物品都有无限件可用。第<code>i</code>件物品的体积是<code>s[i]</code>，价值是<code>value[i]</code>。求解将哪些物品装入背包可使这些物品的体积总和不超过背包体积，且价值总和最大。</p><p>0-1背包的问题中每一种物品在背包中的数量只有<code>0</code>和<code>1</code>两种, 而完全背包问题每一种物品在背包中的数量是<code>0</code>个到<code>k = S/s[i]</code>个. 使用与0-1背包类似的定义, <code>kn(i, j)</code>表示背包容量剩余<code>j</code>时, 放入任意个前<code>i</code>个物品能够达到的最大值, 这样转移方程变为: <code>kn(i, j) = max{kn(i-1, j-k*s(i)) + k*v(i)}, 0 &lt;= k &lt;= S/s[i]</code>。可以直接在0-1背包的代码中增加一个循环，这样时间复杂度就增加了。对于取多少也可以利用二进制拆分，取的时候取<code>1, 2, 4, ...</code>。</p><h4 id="完全背包的算法优化"><a href="#完全背包的算法优化" class="headerlink" title="完全背包的算法优化"></a>完全背包的算法优化</h4><p>注意到完全背包本身也包含0-1背包的情况, 0-1背包是完全背包的特例. 完全背包的<code>kn(i, j)</code>包含了第<code>i</code>种物品的数量在<code>0 - S/s[i]</code>所有可能选择, 并取其最大值:</p><ul><li>若至少放一个物品<code>i</code>进背包, 那么在对物品<code>i</code>的数量进行<code>0 - S/s[i]</code>的遍历时, 迭代方程变为<code>kn1 = kn(i, j-s(i)) + v(i)</code></li><li>若第<code>i</code>个物品不放入背包时, 情况和0-1背包的<code>kn2</code>一样, <code>kn2 = kn(i-1, j)</code></li></ul><p>所以0-1背包的迭代方程<code>vs[j] = Math.max(vs[j - sizes[i]] + values[i], vs[j]);</code>可以直接套用在完全背包上.</p><p>只是<code>kn</code>的计算要改为从左往右(<code>j = 0; j &lt;= size; j++</code>). 因为此时<code>kn1</code>用的不再是上一次迭代的<code>kn(i-1, j-s(i))</code>, 而是本次迭代的<code>kn(i, j-s(i))</code>. 即<code>kn(i, j)</code>要用到<code>kn(i, &lt;=j)</code>的值, 所以<code>kn[&lt;j]</code>的值要先于<code>kn[j]</code>更新.</p><p>同样, 每次决定是否加入<code>i</code>物品之前, 如果剩余容量<code>j</code>小于<code>s[i]</code>, 那么肯定无法放入, 这个判断可以融合进<code>j</code>的遍历中.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] values;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] sizes;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">unboundedKnapsack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = values.length;</span><br><span class="line">    <span class="keyword">int</span>[] vs = <span class="keyword">new</span> <span class="keyword">int</span>[size + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// items</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = sizes[i]; j &lt;= size; j++) &#123;</span><br><span class="line">            vs[j] = Math.max(vs[j - sizes[i]] + values[i], vs[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vs[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优化后的时间复杂度为<code>O(NV)</code>.</p><p>在数据上也可以优化：如果物品<code>a</code>比<code>b</code>价值更高, 但体积更小, 那么完全可以不考虑物品<code>b</code>。对于随机生成的数据，这个方法往往会大大减少搜索空间。</p><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>有N种物品和一个体积为V的背包。第<code>i</code>种物品最多有<code>num[i]</code>件可用，每件体积是<code>sizes[i]</code>，价值是<code>value[i]</code>。求解将哪些物品装入背包可使这些物品的体积总和不超过背包体积，且价值总和最大。</p><p>多重背包问题可以采取基于0-1背包的算法基础上增加一层循环搜索<code>num[i]</code>. 但这样的时间复杂度是<code>O(NVC)</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// items</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num[i]; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = size; j &gt;= sizes[i]; j--) &#123;</span><br><span class="line">            vs[j] = Math.max(vs[j - sizes[i]] + values[i], vs[j]);</span><br><span class="line">　　  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多重背包问题其实包含0-1背包和完全背包，可以分类处理。</p><ul><li>如果满足<code>value[i]*num[i]&gt;=size</code>，这个时候就是完全背包问题, 而完全背包要比多重背包的复杂度低，是<code>O(NV)</code>。</li><li>如果满足<code>num[i]=1</code>就是0-1背包。</li></ul><h3 id="其他背包"><a href="#其他背包" class="headerlink" title="其他背包"></a>其他背包</h3><p>混合背包: 如果将0-1、完全、多重混合起来，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。需要分类求解，判断是哪一种，然后分别给出循环和循环顺序，分别调用状态转换方程。</p><p>其他还有二维费用背包，依赖背包，分组背包…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上两篇&lt;a href=&quot;/algorithm-paradigm-01-dynamic-programming-01&quot;&gt;01 理解动态规划&lt;/a&gt;和&lt;a href=&quot;/algorithm-paradigm-02-dynamic-programming-02&quot;&gt;02 应用动态规划&lt;/a&gt;后, 这篇继续分享各种动态规划的高级应用案例.&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
      <category term="Dynamic Programming" scheme="http://shukebeta.me/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>算法和程序设计范例 02 - Dynamic Programming 02 - 动态规划应用</title>
    <link href="http://shukebeta.me/algorithm-paradigm-02-dynamic-programming-02/"/>
    <id>http://shukebeta.me/algorithm-paradigm-02-dynamic-programming-02/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2018-09-17T07:14:16.327Z</updated>
    
    <content type="html"><![CDATA[<p>继上篇的<a href="/algorithm-paradigm-01-dynamic-programming-01">01 理解动态规划</a>后, 这篇继续分享各种动态规划的初级应用案例.<br><a id="more"></a></p><h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><p>跳上一个n级的台阶总共有多少种跳法，先后次序不同算不同的结果，限制条件是每次只能跳1级或者2级。</p><p>抽象出来的模型是：给定正整数<code>N</code>，有多少种累加方案，不同顺序当做不同方案，限制条件可以是给定的整数$n_0, n_1, …, n_k$作为可选累加元素.</p><p>对于限制条件为只有两种跳法, 即1阶或者2阶的, 问题可以分解为:</p><ul><li>假定第一次跳的是<code>1</code>阶，那么就剩下<code>n-1</code>个台阶，剩余跳法是<code>f(n-1)</code>;</li><li>假定第一次跳的是<code>2</code>阶，则剩下<code>n-2</code>个台阶，剩余跳法是<code>f(n-2)</code></li></ul><p>可以归纳出通用的公式: <code>f(n) = f(n-1) + f(n-2)</code>, 只有一阶的时候<code>f(1) = 1</code>, 只有两阶的时候可以有<code>f(2) = 2</code>, 刚好就是斐波那契数列. 所以这个简单的跳台阶问题就是计算斐波那契数列的问题。</p><p>反过来思考, 比如对于<code>8</code>个台阶, 有多少种回滚方案? 只有两种: 回滚1个台阶, 就到了<code>7</code>; 回滚2个台阶, 就到了<code>6</code>. 等于说: 假如有<code>f(7)</code>种方案跳到<code>7</code>, 有<code>f(6)</code>种方案跳到<code>6</code>，那么就有<code>f(7) + f(6)</code>种方案到达<code>8</code></p><p>从树结构来理解: 如果节点代表台阶数<code>n</code>对应的跳法<code>f(n)</code>, 节点与节点间的枝代表单次可以跳的阶数, 父节点的值就是其所有子节点的值和. 对于只有两种跳法限制问题, 父节点<code>f(n)</code>就只有两个子节点, 分别为<code>f(n-1)</code>和<code>f(n-2)</code>.</p><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>举例：Fibonacci sequence: ${\displaystyle 0,\;1,\;1,\;2,\;3,\;5,\;8,\;13,\;21,\;34,\;55,\;89,\;144,\;\ldots }$<br>$$F_0 = 0, F_1 = 1, F_2 = 1, F_n = F_{n-1} + F_{n-2} (n&gt;2) $$</p><p>Fibonacci numbers grow almost as fast as the powers of 2.</p><p>Recursive solution is exponential algorithm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fib1(n):</span><br><span class="line">    if n = 0:  return 0</span><br><span class="line">    if n = 1:  return 1</span><br><span class="line">    return fib1(n - 1) + fib1(n - 2)</span><br></pre></td></tr></table></figure></p><p>因为每一个<code>fib1()</code>都会生成指数级数量的子分支计算, 所以这个算法复杂度是$O(2^n)$.</p><p>但是注意到斐波那契数列公式是$F_n = F_{n-1} + F_{n-2}$, 也就是只要知道n前面两个值, 就能计算出$f_n$. 又因为斐波那契数列天然的是从低往高算, 那么每次迭代只需要用到前两次的值$F_{n-1}, F_{n-2}$, 计算后更新它们即可. 用这个思路来计算斐波那契数列, 复杂度就是$O(n)$.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> target; &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> n0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ways = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt;= target) &#123;</span><br><span class="line">        ways = n0 + n1;</span><br><span class="line">        n0 = n1;</span><br><span class="line">        n1 = ways;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ways;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h3><p>变态跳台阶就是是用来更复杂的限制条件, 比如可选单次跳阶数为<code>[1, ... n]</code>, 也就是无限制的情况, 也可以按照上面的思路推导.</p><p>比如从树结构的考虑, 就变成每个父节点<code>f(n)</code>可以有<code>n</code>个子节点, 就是<code>f(n-1), f(n-2), ..., f(n-n)</code>, 所以<code>f(n)</code>就是所有这些子节点的和. <code>f(n-n)</code>也就是<code>f(0)</code>意味着一次跳完所有阶数<code>n</code>, 所以<code>f(0) = 1</code>. 进一步归纳, <code>f(n-2) + ... + f(n-n) = f(n-1)</code>, 所以<code>f(n) = f(n-1) + f(n-1)</code>, 可以用递归或者动态规划来计算.</p><p>当然进一步归纳会发现$f(n) = 2^{n-1}$, 可以用位移来操作:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a &lt;&lt; (target - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只是要注意<code>int</code>是有范围的.</p><p>这里解释一下, java中有三种<a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html" target="_blank" rel="noopener">移位运算符</a>.</p><ul><li><code>&lt;&lt;</code>: 左移运算符，<code>num &lt;&lt; 1</code>, 把<code>num</code>的二进制左移一位, 右边的空位加<code>0</code>, 相当于<code>num * 2</code></li><li><code>&gt;&gt;</code>: 右移运算符，<code>num &gt;&gt; 1</code>, 减位, 相当于<code>num / 2</code></li><li><code>&gt;&gt;&gt;</code>:无符号右移，忽略符号位，空位都以0补齐</li></ul><h3 id="大变态跳台阶"><a href="#大变态跳台阶" class="headerlink" title="大变态跳台阶"></a>大变态跳台阶</h3><p>再举一个更复杂的限制条件, 可选单次跳阶数为$2^0, 2^1, …, 2^k$, $2^k$要小于<code>n</code>. 那么相应的,<br>$$f(n) = f(n - 2^0) + f(n - 2^1)… + f(n - 2^k), \quad s.t. \quad 2^k &lt;= n,$$<br>这样就意味着对于每个<code>f(n)</code>, 需要用到的<code>f(k)</code>值数量是不同的, 就不能简单地用固定数量的变量来保留较小值了.</p><p>对于不同的<code>f(n)</code>, 它们的很多子分支计算是共享的, 比如<code>f(6)</code>和<code>f(5)</code>都用到了<code>f(4)</code>. 那么在递归的过程中，只要把每次计算出来的较小的<code>f(k)</code>储存到数组中, 后续其他<code>f(n)</code>要用到<code>f(n - 2^k)</code>时, 直接从内存中取值即可. 初始值取<code>f(0) = f(1) = 1</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorIII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[target];</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> jump(f, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] f, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[target] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ways = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= target; i++) &#123;</span><br><span class="line">            ways += jump(f, target - (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">        &#125;</span><br><span class="line">        f[target] = ways;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个代码适用于<code>n &lt;= 1024</code>的情况.</p><h2 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h2><p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。</p><p>要判断一个数是不是丑数, 不断地分别除以<code>2, 3, 5</code>，然后检查<code>num</code>是否到达<code>1</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//(除数包括`4`可以让代码更简洁)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;<span class="number">6</span> &amp;&amp; num&gt;<span class="number">0</span>; i++)</span><br><span class="line">        <span class="keyword">while</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            num /= i;</span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要返回第<code>n</code>个丑数(<a href="https://leetcode.com/problems/ugly-number-ii/" target="_blank" rel="noopener">leetcode原题</a>), 情况就稍微复杂点. 从动态规划的角度考虑, 对于一个较大的丑数<code>N</code>, 必定是由某个更小的丑数<code>M</code>乘以<code>2, 3, 5</code>其中一个得来的. 所以可以从小到大不断生成丑数. 为了避免在循环中每一次计算都从头开始检查每一个数<code>k</code>对应的<code>2*k, 3*k, 5*k</code>, 需要用三个变量<code>last2, last3, last5</code>来分别记录最近一次用到的丑数的索引, 下一次计算时就直接从上一次停止的地方开始运行.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** return the nth ugly number */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">unglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> INIT = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span>[] uglys = <span class="keyword">new</span> <span class="keyword">int</span>[n + INIT];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;) &#123;</span><br><span class="line">        uglys[i] = ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> last2, last3, last5, m2, m3, m5;</span><br><span class="line">    last2 = last3 = last5 = <span class="number">0</span>;</span><br><span class="line">    m2 = m3 = m5 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = INIT; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = last2 + <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m2 &lt;= uglys[i - <span class="number">1</span>] &amp;&amp; uglys[j] * <span class="number">2</span> &gt; uglys[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                m2 = uglys[j] * <span class="number">2</span>;</span><br><span class="line">                last2 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = last3 + <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m3 &lt;= uglys[i - <span class="number">1</span>] &amp;&amp; uglys[j] * <span class="number">3</span> &gt; uglys[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                m3 = uglys[j] * <span class="number">3</span>;</span><br><span class="line">                last3 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = last5 + <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m5 &lt;= uglys[i - <span class="number">1</span>] &amp;&amp; uglys[j] * <span class="number">5</span> &gt; uglys[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                m5 = uglys[j] * <span class="number">5</span>;</span><br><span class="line">                last5 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uglys[i] = Math.min(Math.min(m2, m3), m5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uglys[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.geeksforgeeks.org/ugly-numbers/" target="_blank" rel="noopener">这里</a>提供了另一个理解这个问题的思路，并由此得出了一个更快的的算法(<code>O(n)</code>)：因为每个数字只能除以2,3,5，查看序列的一种视角是将序列分为三组，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 1×2, 2×2, 3×2, 4×2, 5×2, …</span><br><span class="line">(2) 1×3, 2×3, 3×3, 4×3, 5×3, …</span><br><span class="line">(3) 1×5, 2×5, 3×5, 4×5, 5×5, …</span><br></pre></td></tr></table></figure></p><p>可以发现每个子序列都是丑数序列本身<code>1, 2, 3, 4, 5......</code>分别乘以<code>2, 3, 5</code>。使用类似merge sort的合并方法，每次从三个数组中弹出最小的数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** return the nth ugly number */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">unglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ugly[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="number">0</span>, i3 = <span class="number">0</span>, i5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> next2 = <span class="number">2</span>, next3 = <span class="number">3</span>, next5 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> nextUgly = <span class="number">1</span>;</span><br><span class="line">    ugly[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        nextUgly = Math.min(next2, Math.min(next3, next5));</span><br><span class="line">        ugly[i] = nextUgly;</span><br><span class="line">        <span class="keyword">if</span> (next2 == nextUgly)</span><br><span class="line">           next2 = ugly[++i2] * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (next3 == nextUgly)</span><br><span class="line">           next3 = ugly[++i3] * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (next5 == nextUgly)</span><br><span class="line">           next5 = ugly[++i5] * <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nextUgly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最长公共子序列LCS"><a href="#最长公共子序列LCS" class="headerlink" title="最长公共子序列LCS"></a>最长公共子序列LCS</h2><p>对于一个字符串, 它的子序列，就是将给字符串中任意个元素去掉之后剩余的字符串, 所以子序列不要求是连续的, 但是维持原来的顺序. 在文本相似度比较中，常用到最长公共子序列（longest common sequence）。</p><p>另一个不一样的概念是最长公共子串（longest common substring）, 要求的是任意连续的子字符串。</p><p>同时遍历两个字符串, 如果<code>x[i] == y[j]</code>, 则<code>x[i]</code>和<code>y[j]</code>参与了最长公共子序列<code>z[k]</code>的构建.</p><p>如果用<code>lcs[i, j]</code>表示遍历到<code>x[0-i]</code>和<code>y[0-j]</code>时的LCS长度, 那么现在就需要判断<code>x[i]</code>和<code>y[j]</code>的关系, 分两种情况:</p><ul><li>如果二者相等, 那么<code>lcs1 = lcs[i - 1, j - 1] + 1</code></li><li>若不相等, 那么只能在<code>x</code>和<code>y</code>中选择一个进行推进, 选择依据就是取较大值, <code>lcs2 = max(lcs[i - 1, j], lcs[i, j - 1])</code></li></ul><p>初始状态自然是<code>lcs[0, 0] = 0</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[][] lcs;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestCS</span><span class="params">(String x, String y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] xList = x.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] yList = y.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= xList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= yList.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xList[i - <span class="number">1</span>] == yList[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                lcs[i][j] = lcs[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lcs[i][j] = Math.max(lcs[i - <span class="number">1</span>][j], lcs[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lcs[x.length()][y.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上篇的&lt;a href=&quot;/algorithm-paradigm-01-dynamic-programming-01&quot;&gt;01 理解动态规划&lt;/a&gt;后, 这篇继续分享各种动态规划的初级应用案例.&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
      <category term="Dynamic Programming" scheme="http://shukebeta.me/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>算法和程序设计范例 01 - Dynamic Programming 01 - 理解动态规划</title>
    <link href="http://shukebeta.me/algorithm-paradigm-01-dynamic-programming-01/"/>
    <id>http://shukebeta.me/algorithm-paradigm-01-dynamic-programming-01/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2018-09-14T10:33:22.527Z</updated>
    
    <content type="html"><![CDATA[<p>在解决问题中，有很多经典的方法，如 divide-and-conquer, graph exploration, and greedy。这些方法虽然很有效，但尤其自身的局限性。某些问题（Advanced problem: the knapsack problem, sequence alignment, and optimal binary search trees）需要其他思路解决，如 Dynamic programing 和 linear programming。</p><p>参考：<a href="https://people.eecs.berkeley.edu/~vazirani/algorithms/chap6.pdf" target="_blank" rel="noopener">https://people.eecs.berkeley.edu/~vazirani/algorithms/chap6.pdf</a><br><a id="more"></a></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划作为一种编程范例，可以从一个例子着手理解：求数列的 weighted independent sets (WIS, 最大非连续非相邻子集)和, 对于<code>a = [1, 4, 5, 4]</code>, 其WIS为<code>{a[1], a[3]} = 8</code>.</p><p>如果使用贪心法, 每次都在可选范围内取最大值, 那么就会得到<code>{a[2], a[0]} = 6</code>.</p><p>如果使用分而治之法, 把数组分为两半<code>a1 = [1, 4], a2 = [5, 4]</code>, 则分别得到WIS<code>{a1[1]}, {a2[0]}</code>, 合并后发现是相邻的, 与要求相悖.</p><p>要解决这个问题，关键的步骤是找到<strong>基于子问题最优解的最优解</strong>：想办法把缩小最优解备选方案的数量，在这个较小的空间中可以直接采取暴力搜索寻找最优解。</p><p>对于<code>a = [1, 4, 5, 4]</code>, 假设其MSI为<code>S</code>, 假如从最右边的元素开始考虑, <code>a[3] = 4</code>只有属于<code>S</code>和不属于<code>S</code>两种情况</p><ul><li>若<code>a[3] = 4</code>属于<code>S</code>: 那么<code>a[2] = 5</code>就肯定不属于<code>S</code>, 则<code>S1 = MSI([1, 4]) + MSI([4])</code></li><li>若<code>a[3]</code>不属于<code>S</code>: 那么<code>S</code>只能存在于<code>[1, 4, 5]</code>中, 问题就变成<code>S2 = MSI([1, 4, 5])</code></li></ul><p>所以归纳出<code>S = max(S1, S2) = max(MSI([1, 4]) + MSI([4]), MSI([1, 4, 5])) = ...</code>。 对于只剩下一个元素的去情况, <code>MSI([4]) = max(4) = 4</code>, 即<code>MSI([i]) = i</code></p><p>这就是一个递归的调用: 也就是从右往左, 每一个元素都要考虑一遍是否属于<code>S</code>, 每次会分裂出两种情况, 所以递归的复杂度是$Θ(2^n)$.</p><p>这个算法效率不高, 需要优化. 我们考虑这个问题到底有多少不同的子问题? 因为我们是从右往左扫描每一个元素, 对于每一个元素<code>i</code>, 不管其属于或不属于<code>S</code>, 待解决的递归子问题只有一个, 就是求其左边的所有元素(前缀)的MSI, 所以理论上有$Θ(n)$个不同的子问题.</p><p>所以虽然递归的调用是$Θ(2^n)$, 但需要解决的子问题只有$Θ(n)$, 那么就存在优化的空间. 办法就是通过<strong>记忆</strong>已经解决了的子问题的答案, 来避免重复的计算. 因为右边的元素的子问题答案需要用到其左边的子问题的答案, 所以计算时, 要从左往右计算， 所以这个算法成为forward算法. 在定义初始值时, <code>MSI(i)</code>表示<code>a[i]</code>的前缀<code>a[0 : i]</code>的MSI,</p><ol><li><code>MSI(0) = 0</code>, 因为<code>a[0]</code>左边没有任何元素.</li><li><code>MSI(1) = max(a[0:1]) = a[0]</code></li><li>对于<code>i &gt; 1</code>, <code>MSI(i) = max(MSI(i - 1), MSI(i - 2) + a[i - 1])</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] forwardMSI(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] msi = <span class="keyword">new</span> <span class="keyword">int</span>[a.length + <span class="number">1</span>];</span><br><span class="line">    msi[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    msi[<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; msi.length; i++) &#123;</span><br><span class="line">        msi[i] = Math.max(msi[i - <span class="number">1</span>], msi[i - <span class="number">2</span>] + a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但以上算法并没有记录MSI具体包含哪些子集，虽然可以通过修改<code>msi</code>数据结构来额外存储每个值对应的MSI点集, 但这样会影响效率而且浪费内存空间.</p><p>回忆前面从右往左的分析, 每个元素都会考量是否属于MSI<code>S</code>, 所以我们可以把<code>forwardMSI</code>中算好的<code>msi</code>数组从右往左依次判断一遍, 已决定是否把<code>a</code>对应位置的元素加入到<code>S</code>中.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">backwardMSI</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; s = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = msi.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msi[i - <span class="number">1</span>] &gt;= msi[i - <span class="number">2</span>] + a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s.add(a[i - <span class="number">1</span>]);</span><br><span class="line">            i -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进一步优化，我们可以用类似<code>backward</code>的算法一次过(<code>O(n)</code>)计算出MSI的集合和MSI的值, 对<code>backward</code>算法稍作改动, 在<code>a</code>表开头插入<code>0</code>（或者让<code>a[-1] = 0</code>）, 然后从右往左依次判断一遍, 直接用<code>a</code>表自身的值来判断, 得到一个Backward算法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">backwardMSII</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; s = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = get(a, i);</span><br><span class="line">        <span class="keyword">if</span> (get(a, i - <span class="number">1</span>) &gt;= get(a, i - <span class="number">2</span>) + x) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s.add(x);</span><br><span class="line">            sum += x;</span><br><span class="line">            i -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结动态规划的解法：</p><ul><li>定义合适的子问题集合: 这些子问题应该尽可能小，数量尽可能少。因为即使在最好的情况下，也要花费 constant time 来解决每个子问题，因此子问题的数量和大小就是整个算法运行时间的下限。</li><li>归纳转移方程：系统地解决从最小的子问题开始的所有子问题后，如何转向越来越大的子问题。</li><li>通过<strong>记忆</strong>减少重复的递归调用计算: 要求前面子问题的解决方案能够用来快速计算当前子问题。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在解决问题中，有很多经典的方法，如 divide-and-conquer, graph exploration, and greedy。这些方法虽然很有效，但尤其自身的局限性。某些问题（Advanced problem: the knapsack problem, sequence alignment, and optimal binary search trees）需要其他思路解决，如 Dynamic programing 和 linear programming。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://people.eecs.berkeley.edu/~vazirani/algorithms/chap6.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://people.eecs.berkeley.edu/~vazirani/algorithms/chap6.pdf&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
      <category term="Dynamic Programming" scheme="http://shukebeta.me/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Find All Collinear Points - A Pattern Recognition Problem</title>
    <link href="http://shukebeta.me/algorithms-applications-03-pattern-recognition/"/>
    <id>http://shukebeta.me/algorithms-applications-03-pattern-recognition/</id>
    <published>2018-08-03T16:00:00.000Z</published>
    <updated>2018-09-09T08:44:51.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Line-Patterns-Recognition"><a href="#The-Line-Patterns-Recognition" class="headerlink" title="The Line Patterns Recognition"></a>The Line Patterns Recognition</h2><p>A basic but important application of pattern recognition is to recognize line patterns in a given set of points.<br><a href="http://coursera.cs.princeton.edu/algs4/assignments/collinear.html" target="_blank" rel="noopener">http://coursera.cs.princeton.edu/algs4/assignments/collinear.html</a></p><p>The problem could be described as: Given a set of n distinct points in the plane, find every (maximal) line segment that connects a subset of 4 or more of the points.<img src="http://coursera.cs.princeton.edu/algs4/assignments/lines2.png" alt="" title="image from: http://coursera.cs.princeton.edu/algs4/"><br><a id="more"></a><br>Point data type. an immutable data type <strong>Point</strong> that represents a point in the plane by implementing the following API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>                         <span class="comment">// constructs the point (x, y)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span>                               <span class="comment">// draws this point</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">drawTo</span><span class="params">(Point that)</span>                   <span class="comment">// draws the line segment from this point to that point</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   String <span class="title">toString</span><span class="params">()</span>                         <span class="comment">// string representation</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>               <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Point that)</span>     <span class="comment">// compare two points by y-coordinates, breaking ties by x-coordinates</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>            <span class="keyword">double</span> <span class="title">slopeTo</span><span class="params">(Point that)</span>       <span class="comment">// the slope between this point and that point</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> Comparator&lt;Point&gt; <span class="title">slopeOrder</span><span class="params">()</span>              <span class="comment">// compare two points by slopes they make with this point</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Line segment data type. To represent line segments in the plane, use the data type LineSegment.java, which has the following API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSegment</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LineSegment</span><span class="params">(Point p, Point q)</span>        <span class="comment">// constructs the line segment between points p and q</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span>                        <span class="comment">// draws this line segment</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>                    <span class="comment">// string representation</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Apparently if using brute force, the order of growth of the running time of the program will be $n^4$ in the worst case.</p><p>A faster, sorting-based solution: Given a point p, the following method determines whether p participates in a set of 4 or more collinear points.</p><ol><li>Think of p as the origin.</li><li>For each other point q, determine the slope it makes with p.</li><li>Sort the points according to the slopes they makes with p.</li><li>Check if any 3 (or more) adjacent points in the sorted order have equal slopes with respect to p. If so, these points, together with p, are collinear.<br><img src="http://coursera.cs.princeton.edu/algs4/assignments/lines1.png" alt="" title="image from: http://coursera.cs.princeton.edu/algs4/"></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>There are two key points to get the order of growth of the running time to be $n^2\log n$ in the worst case, with space proportional to n plus the number of line segments returned, and work properly even if the input has 5 or more collinear points.</p><ol><li><strong>Stable</strong> sort: <code>Arrays.sort()</code> is guaranteed to be stable, so equal elements will not be reordered as a result of the sort. So the input points array is already sorted by points natural order once we sort the element at the first valid check step.</li><li>To avoid duplicate line segments, we need to check if new found collinear points pairs already exist in the LineSegment. If we loop over the LineSegment everytime we have a new line segments to check, this will results in large run time that will not satisfy the requirement. Instead, we need to make use of the inner features of the line patterns:<ol><li>Since the every possible segment is created by points it contains,</li><li>and we iterate through the sorted Points array to find segment</li><li>so every non-duplicate new segment is guaranteed to be created from its smallest point member</li><li>any duplicate segment is created later by its other member other than the smallest</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Line-Patterns-Recognition&quot;&gt;&lt;a href=&quot;#The-Line-Patterns-Recognition&quot; class=&quot;headerlink&quot; title=&quot;The Line Patterns Recognition&quot;&gt;&lt;/a&gt;The Line Patterns Recognition&lt;/h2&gt;&lt;p&gt;A basic but important application of pattern recognition is to recognize line patterns in a given set of points.&lt;br&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/collinear.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://coursera.cs.princeton.edu/algs4/assignments/collinear.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problem could be described as: Given a set of n distinct points in the plane, find every (maximal) line segment that connects a subset of 4 or more of the points.&lt;img src=&quot;http://coursera.cs.princeton.edu/algs4/assignments/lines2.png&quot; alt=&quot;&quot; title=&quot;image from: http://coursera.cs.princeton.edu/algs4/&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
      <category term="Sorting" scheme="http://shukebeta.me/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Randomized Queue with Reservoir Sampling</title>
    <link href="http://shukebeta.me/algorithms-applications-02-randomized-queue/"/>
    <id>http://shukebeta.me/algorithms-applications-02-randomized-queue/</id>
    <published>2018-07-20T16:00:00.000Z</published>
    <updated>2018-09-08T03:46:19.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Randomized-queue"><a href="#Randomized-queue" class="headerlink" title="Randomized queue"></a>Randomized queue</h3><p>For a randomized queue, the item removed is chosen <strong>uniformly</strong> at random from items in the data structure. API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RandomizedQueue</span><span class="params">()</span> </span>&#123;&#125;                 <span class="comment">// construct an empty randomized queue</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;&#125;                 <span class="comment">// is the randomized queue empty?</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;&#125;                        <span class="comment">// return the number of items on the randomized queue</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;&#125;           <span class="comment">// add the item</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;&#125;                    <span class="comment">// remove and return a random item</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">sample</span><span class="params">()</span> </span>&#123;&#125;                     <span class="comment">// return a random item (but do not remove it)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;&#125;         <span class="comment">// return an independent iterator over items in random order</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;&#125;   <span class="comment">// unit testing (optional)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Each iterator must return the items in <strong>uniformly</strong> random order. The order of two or more iterators to the same randomized queue must be mutually independent; each iterator must maintain its own random order.</p><p>More detail could be found at programming assignment <a href="http://coursera.cs.princeton.edu/algs4/assignments/queues.html" target="_blank" rel="noopener">specification</a> and <a href="http://coursera.cs.princeton.edu/algs4/checklists/queues.html" target="_blank" rel="noopener">checklist</a>.</p><h3 id="Permutation-client-memory-challenge"><a href="#Permutation-client-memory-challenge" class="headerlink" title="Permutation client memory challenge"></a>Permutation client memory challenge</h3><a id="more"></a><p>A client program <code>Permutation.java</code> that takes an integer k as a command-line argument; reads in a sequence of strings from standard input using <code>StdIn.readString()</code>; and prints exactly k of them, uniformly at random. Print each item from the sequence at most once.</p><p>The bonu point is to use only one RandomizedQueue object of maximum size at most k.</p><p>More specifically, as the program sees a sequence of input, one at a time, the programe could only keep k items in memory, and they should be selected at random from the sequence. If we know the total number of items (n), then the solution is easy: select ten distinct indices i between 1 and n with equal probability, and keep the i-th elements. The challenge is that we do not know the input sequence length in advance.</p><p>The idea is when reading in input strings one by one, we maintain the RandomizedQueue with size at most k on the fly. If the RandomizedQueue is full, then we need to decide whether a new input string should be accepted or not. If it should be accepted, then one of the old elements must be kicked out of the queues. The key point here is how to make the decision.</p><p>Two algorithms explain similar mechanism:<br>1.<br>For a loop over n, swap item <code>[n]</code> with a random item in the range <code>[0]</code> through <code>[n]</code>. We store only the first k elements (<code>[0 : k-1]</code>) as that are all we need. Afterwards, when we get a new string (index <code>[n]</code>), we’ll swap it with one of the first k strings for a given probability <code>P</code>, otherwise just discard it.</p><p>The <a href="https://en.wikipedia.org/wiki/Reservoir_sampling" target="_blank" rel="noopener">Reservoir sampling</a> algorithms could solve the problem:</p><blockquote><p>Reservoir sampling is a family of randomized algorithms for randomly choosing a sample of k items from a list S containing n items, where n is either a very large or unknown number. Typically n is large enough that the list doesn’t fit into main memory.</p><pre><code>1. Keep the first k items in memory.2. When the i-th item arrives (for $i&gt;k$):    * with probability $k/i$, keep the new item (discard an old one, selecting which to replace at random, each with chance $1/k$)    * with probability $1-k/i$, keep the old items (ignore the new one)</code></pre></blockquote><p>In our case of implementation, for a loop over n, swap item <code>[n]</code> with a random item in the range <code>[0]</code> through <code>[n]</code>. We store only the first k elements (<code>[0 : k-1]</code>) as that are all we need. Afterwards, when we get a new string (index <code>[n]</code>), we’ll swap it with one of the first k strings for a given probability <code>P</code>, otherwise just discard it.</p><p>There is another shuffle method called <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher–Yates shuffle</a> and its $O(n)$ version called Knuth shuffle which could shuffle a given sequence.</p><p>Test report:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Correctness:  43/43 tests passed</span><br><span class="line">Memory:       106/105 tests passed</span><br><span class="line">Timing:       136/136 tests passed</span><br><span class="line"></span><br><span class="line">Aggregate score: 100.10%</span><br><span class="line">[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]</span><br><span class="line"></span><br><span class="line">Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object</span><br><span class="line">                created is equal to k</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 5</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 50</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 500</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 5000</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 50000</span><br><span class="line">==&gt; passed</span><br><span class="line"></span><br><span class="line">Total: 3/2 tests passed!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Randomized-queue&quot;&gt;&lt;a href=&quot;#Randomized-queue&quot; class=&quot;headerlink&quot; title=&quot;Randomized queue&quot;&gt;&lt;/a&gt;Randomized queue&lt;/h3&gt;&lt;p&gt;For a randomized queue, the item removed is chosen &lt;strong&gt;uniformly&lt;/strong&gt; at random from items in the data structure. API:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomizedQueue&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iterable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomizedQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                 &lt;span class=&quot;comment&quot;&gt;// construct an empty randomized queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                 &lt;span class=&quot;comment&quot;&gt;// is the randomized queue empty?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                        &lt;span class=&quot;comment&quot;&gt;// return the number of items on the randomized queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Item item)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;           &lt;span class=&quot;comment&quot;&gt;// add the item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Item &lt;span class=&quot;title&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                    &lt;span class=&quot;comment&quot;&gt;// remove and return a random item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Item &lt;span class=&quot;title&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                     &lt;span class=&quot;comment&quot;&gt;// return a random item (but do not remove it)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterator&amp;lt;Item&amp;gt; &lt;span class=&quot;title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;         &lt;span class=&quot;comment&quot;&gt;// return an independent iterator over items in random order&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;   &lt;span class=&quot;comment&quot;&gt;// unit testing (optional)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Each iterator must return the items in &lt;strong&gt;uniformly&lt;/strong&gt; random order. The order of two or more iterators to the same randomized queue must be mutually independent; each iterator must maintain its own random order.&lt;/p&gt;
&lt;p&gt;More detail could be found at programming assignment &lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/queues.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;specification&lt;/a&gt; and &lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/checklists/queues.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;checklist&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Permutation-client-memory-challenge&quot;&gt;&lt;a href=&quot;#Permutation-client-memory-challenge&quot; class=&quot;headerlink&quot; title=&quot;Permutation client memory challenge&quot;&gt;&lt;/a&gt;Permutation client memory challenge&lt;/h3&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
      <category term="Reservoir Sampling" scheme="http://shukebeta.me/tags/Reservoir-Sampling/"/>
    
      <category term="Fisher–Yates shuffle" scheme="http://shukebeta.me/tags/Fisher%E2%80%93Yates-shuffle/"/>
    
  </entry>
  
  <entry>
    <title>Percolations problem</title>
    <link href="http://shukebeta.me/algorithms-applications-01-percolation/"/>
    <id>http://shukebeta.me/algorithms-applications-01-percolation/</id>
    <published>2018-07-02T16:00:00.000Z</published>
    <updated>2018-09-08T03:45:52.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Union-find-applications-Percolation"><a href="#Union-find-applications-Percolation" class="headerlink" title="Union-find applications: Percolation"></a>Union-find applications: Percolation</h3><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/percolation.html" target="_blank" rel="noopener">Problem discriptions</a></p><p>Percolation data type. To model a percolation system, create a data type Percolation with the following API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> n)</span></span>;                <span class="comment">// create n-by-n grid, with all sites blocked</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>    <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;    <span class="comment">// open site (row, col) if it is not open already</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;  <span class="comment">// is site (row, col) open?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;  <span class="comment">// is site (row, col) full?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>     <span class="keyword">int</span> <span class="title">numberOfOpenSites</span><span class="params">()</span></span>;       <span class="comment">// number of open sites</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span></span>;              <span class="comment">// does the system percolate?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:</p><ul><li>Initialize all sites to be blocked.</li><li>Repeat the following until the system percolates:<ul><li>Choose a site uniformly at random among all blocked sites.</li><li>Open the site.</li></ul></li><li>The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold.</li></ul><h4 id="The-back-wash-issue"><a href="#The-back-wash-issue" class="headerlink" title="The back wash issue"></a><a href="http://coursera.cs.princeton.edu/algs4/checklists/percolation.html" target="_blank" rel="noopener">The back wash issue</a></h4><p><img src="http://coursera.cs.princeton.edu/algs4/checklists/percolation-backwash.png" alt="" title="image from: http://coursera.cs.princeton.edu"><br><a id="more"></a><br>My solution inspired from this post <a href="https://www.sigmainfy.com/blog/avoid-backwash-in-percolation.html" target="_blank" rel="noopener">https://www.sigmainfy.com/blog/avoid-backwash-in-percolation.html</a>, with some improvements:</p><ol><li>Using one <code>WeightedQuickUnionUF(n * n)</code> objects to track each site’s parent.</li><li>Use a <code>byte[n * n]</code> to store the each site’s state.<ul><li>There are four possible states, represented as<ul><li><code>BLOCKED: 0b000</code></li><li><code>OPEN: 0b001</code></li><li><code>CONNECT_TO_BOTTOM: 0b010</code></li><li><code>CONNECT_TO_TOP: 0b100</code></li></ul></li><li>With byte operation <code>|</code>, we enable sites to have mixture of states.</li></ul></li><li><code>open(row, col)</code>: to open the current site <code>cur</code>, we need to<ul><li>find out its four possible neibourghs (<code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, if exist);</li><li>use <code>find()</code> to return the neibourghs’ parents (<code>upParent</code>, etc..), use <code>union()</code> to connect <code>cur</code> and its neibourghs;</li><li>Fianally, update <code>cur</code>‘s new parent <code>newParent</code>‘s state with the combination of <code>cur</code>‘s parent state and the neibourghs’ parents states.</li><li>in totalm, there involves 4 <code>union()</code> and 5 <code>find()</code> API calls at most but the time complexity is still $\Theta(\lg N)$</li></ul></li><li><code>isOpen()</code>: $\in \Theta(1)$ by checking the <code>byte[n * n]</code>.</li><li><code>isFull()</code>: $\in \Theta(1)$, use one call <code>find()</code> API and thus is $\in \Theta (\lg N)$</li><li><code>percolates()</code>: use a <code>boolean isPercolates</code> as mark, for any new open site that becomes both <code>CONNECT_TO_BOTTOM</code> and <code>CONNECT_TO_TOP</code>, we could mark the model as percolates.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Estimated student memory = 9.00 n^2 + 0.00 n + 160.00   (R^2 = 1.000)</span><br><span class="line"></span><br><span class="line">Test 2 (bonus): check that total memory &lt;= 11 n^2 + 128 n + 1024 bytes</span><br><span class="line"></span><br><span class="line">==&gt; passed</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Union-find-applications-Percolation&quot;&gt;&lt;a href=&quot;#Union-find-applications-Percolation&quot; class=&quot;headerlink&quot; title=&quot;Union-find applications: Percolation&quot;&gt;&lt;/a&gt;Union-find applications: Percolation&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/percolation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Problem discriptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Percolation data type. To model a percolation system, create a data type Percolation with the following API:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Percolation&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Percolation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;                &lt;span class=&quot;comment&quot;&gt;// create n-by-n grid, with all sites blocked&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// open site (row, col) if it is not open already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// is site (row, col) open?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// is site (row, col) full?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numberOfOpenSites&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;// number of open sites&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;percolates&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;              &lt;span class=&quot;comment&quot;&gt;// does the system percolate?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize all sites to be blocked.&lt;/li&gt;
&lt;li&gt;Repeat the following until the system percolates:&lt;ul&gt;
&lt;li&gt;Choose a site uniformly at random among all blocked sites.&lt;/li&gt;
&lt;li&gt;Open the site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;The-back-wash-issue&quot;&gt;&lt;a href=&quot;#The-back-wash-issue&quot; class=&quot;headerlink&quot; title=&quot;The back wash issue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/checklists/percolation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The back wash issue&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://coursera.cs.princeton.edu/algs4/checklists/percolation-backwash.png&quot; alt=&quot;&quot; title=&quot;image from: http://coursera.cs.princeton.edu&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
      <category term="Bitwise Operation" scheme="http://shukebeta.me/tags/Bitwise-Operation/"/>
    
  </entry>
  
  <entry>
    <title>注意力机制应用于斯坦福问答数据集 (SQuAD)</title>
    <link href="http://shukebeta.me/SQuAD/"/>
    <id>http://shukebeta.me/SQuAD/</id>
    <published>2018-07-01T16:00:00.000Z</published>
    <updated>2018-09-09T08:47:55.233Z</updated>
    
    <content type="html"><![CDATA[<p>The Standford question and answer dataset <a href="https://rajpurkar.github.io/SQuAD-explorer/" target="_blank" rel="noopener">(SQuAD)</a> 是由 Rajpurkar 等人提出的一个较有挑战性的阅读理解数据集。该数据集包含 10 万个（问题，原文，答案）三元组，原文来自于 536 篇维基百科文章，而问题和答案的构建主要是通过众包的方式，让标注人员提出最多 5 个基于文章内容的问题并提供正确答案，且答案出现在原文中。SQuAD 和之前的完形填空类阅读理解数据集如 CNN/DM，CBT 等最大的区别在于：SQuAD 中的答案不在是单个实体或单词，而可能是一段短语，这使得其答案更难预测。SQuAD 包含公开的训练集和开发集，以及一个隐藏的测试集，其采用了与 ImageNet 类似的封闭评测的方式，研究人员需提交算法到一个开放平台，并由 SQuAD 官方人员进行测试并公布结果。</p><p>由于 SQuAD 的答案限定于来自原文，模型只需要判断原文中哪些词是答案即可，因此是一种抽取式的 QA 任务而不是生成式任务。简单的 SQuAD 的模型框架可以参考seq2seq：Embed 层，Encode 层 和 Decode 层。Embed 层负责将原文和问题中的 tokens 映射为向量表示；Encode 层主要使用 RNN 来对原文和问题进行编码，这样编码后每个 token 的向量表示就蕴含了上下文的语义信息；Decode 层则基于 query-aware 的原文表示来预测答案起始位置。</p><p>但这个文本数据集涉及问题，原文，答案三个部分, 特别是需要根据问题在原文中搜寻答案的范围, 这就涉及如果把问题的信息提取出来并作用于原文. 目前各种前沿模型的关注点几乎都是在如何捕捉问题和原文之间的交互关系，也就是在 Encode 层和 Decode 层之间, 使用一个 Interaction 层处理编码了问题语义信息的原文表示，即 query-aware 的原文表示，再输入给 Decode 层。而本来应用机器翻译Attention机制就能很好的处理这种交互。<br><a id="more"></a><br>Attention机制参考另一篇文章<a href="\attention">注意力机制</a>.</p><h2 id="应用于阅读理解的注意力机制"><a href="#应用于阅读理解的注意力机制" class="headerlink" title="应用于阅读理解的注意力机制"></a>应用于阅读理解的注意力机制</h2><p>虽然注意力机制大同小异，但是不同的注意力权重（打分函数）带来的效果是不一样的。比较常用的是就是使用<a href="\attention#全局注意力机制">全局注意力机制</a>中提到的<br>$$<br>\begin{aligned}<br>    score_{general}(t’ t) &amp;= s^\top_{t’} W_\alpha h_t, \\<br>\end{aligned}<br>$$<br>就是用一个交互矩阵$W_\alpha$来捕捉问题和原文之间的交互关系. 原文作者称之为 <strong>Bilinear</strong>.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forwards_bilinear</span><span class="params">(self, hc, hq, hc_mask, hq_mask, max_context_length_placeholder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                max_question_length_placeholder, is_train, keep_prob)</span>:</span></span><br><span class="line">        <span class="string">'''combine context hidden state(hc) and question hidden state(hq) with global attention</span></span><br><span class="line"><span class="string">            bilinear score = hc.T *W *hq</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        d_en = hc.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># (BS, MPL, MQL)</span></span><br><span class="line">        interaction_weights = tf.get_variable(<span class="string">"W_interaction"</span>, shape=[d_en, d_en])</span><br><span class="line">        hc_W = tf.reshape(tf.reshape(hc, shape=[<span class="number">-1</span>, d_en]) @ interaction_weights,</span><br><span class="line">                          shape=[<span class="number">-1</span>, max_context_length_placeholder, d_en])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MPL, HS * 2) @ (BS, HS * 2, MCL) -&gt; (BS ,MCL, MQL)</span></span><br><span class="line">        score = hc_W @ tf.transpose(hq, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="comment"># Create mask (BS, MPL) -&gt; (BS, MPL, 1) -&gt; (BS, MPL, MQL)</span></span><br><span class="line">        hc_mask_aug = tf.tile(tf.expand_dims(hc_mask, <span class="number">-1</span>), [<span class="number">1</span>, <span class="number">1</span>, max_question_length_placeholder])</span><br><span class="line">        hq_mask_aug = tf.tile(tf.expand_dims(hq_mask, <span class="number">-2</span>), [<span class="number">1</span>, max_context_length_placeholder, <span class="number">1</span>])</span><br><span class="line">        hq_mask_aug = hc_mask_aug &amp; hq_mask_aug</span><br><span class="line">        score = softmax_mask_prepro(score, hq_mask_aug)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MPL, MQL)</span></span><br><span class="line">        alignment_weights = tf.nn.softmax(score)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MPL, MQL) @ (BS, MQL, HS * 2) -&gt; (BS, MPL, HS * 2)</span></span><br><span class="line">        context_aware = tf.matmul(alignment_weights, hq)</span><br><span class="line"></span><br><span class="line">        concat_hidden = tf.concat([context_aware, hc], axis=<span class="number">2</span>)</span><br><span class="line">        concat_hidden = tf.cond(is_train, <span class="keyword">lambda</span>: tf.nn.dropout(concat_hidden, keep_prob), <span class="keyword">lambda</span>: concat_hidden)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (HS * 4, HS * 2)</span></span><br><span class="line">        Ws = tf.get_variable(<span class="string">"Ws"</span>, shape=[d_en * <span class="number">2</span>, d_en])</span><br><span class="line">        attention = tf.nn.tanh(tf.reshape(tf.reshape(concat_hidden, [<span class="number">-1</span>, d_en * <span class="number">2</span>]) @ Ws,</span><br><span class="line">                                          [<span class="number">-1</span>, max_context_length_placeholder, d_en]))</span><br><span class="line">        <span class="keyword">return</span> (attention)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_similarity_matrix</span><span class="params">(self, hq, hc, max_question_length, max_context_length, question_mask, context_mask, is_train,</span></span></span><br><span class="line"><span class="function"><span class="params">                           keep_prob)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span><span class="params">(tensor, keep)</span>:</span></span><br><span class="line">            fixed_shape = tensor.get_shape().as_list()</span><br><span class="line">            start = len(fixed_shape) - keep</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Calculate (BS * MCL * MQL)</span></span><br><span class="line">            left = reduce(mul, [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start)])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># out_shape is simply HS * 2</span></span><br><span class="line">            out_shape = [left] + [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(fixed_shape))]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># (BS * MCL * MQL, HS * 2)</span></span><br><span class="line">            flat = tf.reshape(tensor, out_shape)</span><br><span class="line">            <span class="keyword">return</span> (flat)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_reconstruct</span><span class="params">(tensor, ref, keep)</span>:</span></span><br><span class="line">            ref_shape = ref.get_shape().as_list()</span><br><span class="line">            tensor_shape = tensor.get_shape().as_list()</span><br><span class="line">            ref_stop = len(ref_shape) - keep</span><br><span class="line">            tensor_start = len(tensor_shape) - keep</span><br><span class="line"></span><br><span class="line">            <span class="comment"># [BS, MCL, MQL]</span></span><br><span class="line">            pre_shape = [ref_shape[i] <span class="keyword">or</span> tf.shape(ref)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(ref_stop)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># [1]</span></span><br><span class="line">            keep_shape = [tensor_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(tensor_start, len(tensor_shape))]</span><br><span class="line">            <span class="comment"># pre_shape = [tf.shape(ref)[i] for i in range(len(ref.get_shape().as_list()[:-keep]))]</span></span><br><span class="line">            <span class="comment"># keep_shape = tensor.get_shape().as_list()[-keep:]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># [BS, MCL, MQL, 1]</span></span><br><span class="line">            target_shape = pre_shape + keep_shape</span><br><span class="line">            out = tf.reshape(tensor, target_shape)</span><br><span class="line">            out = tf.squeeze(out, [len(args[<span class="number">0</span>].get_shape().as_list()) - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> (out)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">        d = hq.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        logging.debug(<span class="string">"d is: &#123;&#125;"</span>.format(d))</span><br><span class="line">        hc_aug = tf.tile(tf.reshape(hc, shape=[<span class="number">-1</span>, max_context_length, <span class="number">1</span>, d]),</span><br><span class="line">                         [<span class="number">1</span>, <span class="number">1</span>, max_question_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">        hq_aug = tf.tile(tf.reshape(hq, shape=[<span class="number">-1</span>, <span class="number">1</span>, max_question_length, d]),</span><br><span class="line">                         [<span class="number">1</span>, max_context_length, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [(BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2)]</span></span><br><span class="line">        args = [hc_aug, hq_aug, hc_aug * hq_aug]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [(BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2)]</span></span><br><span class="line">        args_flat = [_flatten(arg, <span class="number">1</span>) <span class="keyword">for</span> arg <span class="keyword">in</span> args]</span><br><span class="line">        args_flat = [tf.cond(is_train, <span class="keyword">lambda</span>: tf.nn.dropout(arg, keep_prob), <span class="keyword">lambda</span>: arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args_flat]</span><br><span class="line"></span><br><span class="line">        d_concat = d * <span class="number">3</span></span><br><span class="line">        W = tf.get_variable(<span class="string">"W"</span>, shape=[d_concat, <span class="number">1</span>])</span><br><span class="line">        b = tf.get_variable(<span class="string">"b"</span>, shape=[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculating a(h, u) = w_s^(t)[h; u; h * u]</span></span><br><span class="line">        <span class="comment"># (BS * MCL * MQL, HS * 6) @ (HS * 6, 1) + (1) -&gt; (BS * MCL * MQL, 1)</span></span><br><span class="line">        res = tf.concat(args_flat, <span class="number">1</span>) @ W + b</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS * MCL * MQL, 1) -&gt; (BS, MCL, MQL)</span></span><br><span class="line">        similarity_matrix = _reconstruct(res, args[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">        logging.debug(<span class="string">"similiarity_matrix after reconstruct: &#123;&#125;"</span>.format(similarity_matrix.get_shape()))</span><br><span class="line">        context_mask_aug = tf.tile(tf.expand_dims(context_mask, <span class="number">2</span>), [<span class="number">1</span>, <span class="number">1</span>, max_question_length])</span><br><span class="line">        question_mask_aug = tf.tile(tf.expand_dims(question_mask, <span class="number">1</span>), [<span class="number">1</span>, max_context_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        mask_aug = context_mask_aug &amp; question_mask_aug</span><br><span class="line">        similarity_matrix = softmax_mask_prepro(similarity_matrix, mask_aug)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (similarity_matrix)</span><br></pre></td></tr></table></figure></p><h3 id="BiDAF"><a href="#BiDAF" class="headerlink" title="BiDAF"></a>BiDAF</h3><p><a href="https://arxiv.org/abs/1611.01603" target="_blank" rel="noopener">lSeo et al. (2016)</a>针对SQuAD提出了一个另一种更复杂的注意力机制, Bi-Directional Attention Flow (BiDAF)。<br><img src="https://allenai.github.io/bi-att-flow/BiDAF.png" alt="" title="image from: https://allenai.github.io/bi-att-flow/"><br>BiDAF顾名思义那个就是问题与段落的双向的注意力机制, 分别是 Context-to-query (C2Q) attention 和 Query-to-context (Q2C) attention. 两者都是基于传统的段落的背景向量 $H$ 与问题的背景向量 $U$ 间相似矩阵(similarity matrix) $S \in \mathbb{R^{T×J}}$衍生出来的.<br>$$<br>S_{tj} = \alpha(H_{:t}, U_{:j}) \in R \\<br>\alpha(h, u) = w^{\top}_{(S)}[h; u; h \odot u]<br>$$</p><blockquote><p>Where $S_{tj}$ indicates the similarity between  t-th context word and j-th query word, $\alpha$ is a trainable scalar function that encodes the similarity between its two input vectors, $H_{:t}$ is t-th column vector of H, and $U_{:j}$ is j-th column vector of U, $w_{(S)} \in  R^{6d}$ is a trainable weight vector, $[;]$ is vector concatenation across row.</p></blockquote><p>相似矩阵S被用于计算两种方向的注意力向量.</p><blockquote><p>Context-to-query (C2Q) attention signifies which query words are most relevant to each context word</p></blockquote><p>$$<br>\tilde{U_{:t}} = \sum_j \alpha_{tj} U_{:j} \\<br>\alpha_t = softmax(S_{t:})<br>$$<br>其中 $\alpha_t \in R^J 表示$t$段落词对各个问题词的注意力权重</p><blockquote><p>Query-to-context (Q2C) attention signifies which context words have the closest similarity to one of the query words and are hence critical for answering the query.</p></blockquote><p>对段落的注意力权重为:<br>$$<br>b = softmax(max_{col}(S)) \in R^T<br>$$<br>其中$max_{col}$是在每行选出最大值.<br>然后对段落背景向量进行注意力加权:<br>$$<br>\tilde{h} = \sum_t b_t  H_{:t} \in R^{2d}<br>$$<br>这个$\tilde{h}$向量指的是在query眼里最重要的段落次的加权求和. 因为$\tilde{h}$是在每一个内去最大值, 所以还需要从新把$\tilde{h}$的值在每一个铺开$T$次得到一个$\tilde{H} \in R^{2dxT}$向量以方便后续的计算.</p><p>最后, 段落的embeddings向量和注意力向量结合为$G$, $G$的每一列向量可以理解为每个段落词的 query-aware representation:<br>$$<br>G_{:t} = \beta(H_{:t}, \tilde{U_{:t}}, \tilde{H_{:t}}) \in R^{d_G}<br>$$</p><blockquote><p>where $G_{:t}$ is the t-th column vector (corresponding to t-th context word), β is a trainable vector function that fuses its (three) input vectors, and $d_G$ is the output dimension of the β function.</p></blockquote><p>β 函数可以是任意的神经网络, 但是文章中指出使用简单的函数如 $\beta(h, \tilde{u}, \tilde{h}) = [h; \tilde{u}; h \odot \tilde{u}; h \odot \tilde{h}] \in R^{8dxT}$ (i.e., dG = 8d) 表现已经很好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forwards_complex</span><span class="params">(self, hc, hq, hc_mask, hq_mask, max_context_length_placeholder,</span></span></span><br><span class="line"><span class="function"><span class="params">                  max_question_length_placeholder, is_train, keep_prob)</span>:</span></span><br><span class="line">       <span class="string">'''combine context hidden state(hc) and question hidden state(hq) with attention</span></span><br><span class="line"><span class="string">            measured similarity = hc : hq : hc.T * hq</span></span><br><span class="line"><span class="string">       '''</span></span><br><span class="line">       s = self._similarity_matrix(hq, hc, max_question_length_placeholder,</span><br><span class="line">       max_context_length_placeholder, hq_mask, hc_mask, is_train, keep_prob)</span><br><span class="line">       <span class="comment"># C2Q</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL)</span></span><br><span class="line">       weights_c2q = tf.nn.softmax(s)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL) @ (BS, MQL, HS * 2) -&gt; (BS, MCL, HS * 2)</span></span><br><span class="line">       query_aware = weights_c2q @ hq</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Q2C</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL) -&gt; (BS, MCL)</span></span><br><span class="line">       <span class="comment"># We are effectively looking through all the question words j's to some context word i and finding the</span></span><br><span class="line">       <span class="comment"># maximum of those context words</span></span><br><span class="line">       score_q2c = tf.reduce_max(s, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL)</span></span><br><span class="line">       weights_q2c = tf.expand_dims(tf.nn.softmax(score_q2c), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, HS)</span></span><br><span class="line">       context_aware = tf.reduce_sum(tf.multiply(weights_q2c, hc), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, HS * 2)</span></span><br><span class="line">       context_aware = tf.tile(tf.expand_dims(context_aware, <span class="number">1</span>), [<span class="number">1</span>, max_context_length_placeholder, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># [(BS, MCL, HS * 2), (BS, MCL, HS * 2), (BS, MCL, HS * 2), (BS, MCL, HS * 2)]</span></span><br><span class="line">       biattention = tf.nn.tanh(tf.concat([hc, query_aware, hc * query_aware, hc * context_aware], <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (biattention)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_similarity_matrix</span><span class="params">(self, hq, hc, max_question_length, max_context_length, question_mask, context_mask, is_train,</span></span></span><br><span class="line"><span class="function"><span class="params">                          keep_prob)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span><span class="params">(tensor, keep)</span>:</span></span><br><span class="line">           fixed_shape = tensor.get_shape().as_list()</span><br><span class="line">           start = len(fixed_shape) - keep</span><br><span class="line"></span><br><span class="line">           <span class="comment"># Calculate (BS * MCL * MQL)</span></span><br><span class="line">           left = reduce(mul, [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start)])</span><br><span class="line"></span><br><span class="line">           <span class="comment"># out_shape is simply HS * 2</span></span><br><span class="line">           out_shape = [left] + [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(fixed_shape))]</span><br><span class="line"></span><br><span class="line">           <span class="comment"># (BS * MCL * MQL, HS * 2)</span></span><br><span class="line">           flat = tf.reshape(tensor, out_shape)</span><br><span class="line">           <span class="keyword">return</span> (flat)</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">_reconstruct</span><span class="params">(tensor, ref, keep)</span>:</span></span><br><span class="line">           ref_shape = ref.get_shape().as_list()</span><br><span class="line">           tensor_shape = tensor.get_shape().as_list()</span><br><span class="line">           ref_stop = len(ref_shape) - keep</span><br><span class="line">           tensor_start = len(tensor_shape) - keep</span><br><span class="line"></span><br><span class="line">           <span class="comment"># [BS, MCL, MQL]</span></span><br><span class="line">           pre_shape = [ref_shape[i] <span class="keyword">or</span> tf.shape(ref)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(ref_stop)]</span><br><span class="line"></span><br><span class="line">           <span class="comment"># [1]</span></span><br><span class="line">           keep_shape = [tensor_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(tensor_start, len(tensor_shape))]</span><br><span class="line">           <span class="comment"># pre_shape = [tf.shape(ref)[i] for i in range(len(ref.get_shape().as_list()[:-keep]))]</span></span><br><span class="line">           <span class="comment"># keep_shape = tensor.get_shape().as_list()[-keep:]</span></span><br><span class="line"></span><br><span class="line">           <span class="comment"># [BS, MCL, MQL, 1]</span></span><br><span class="line">           target_shape = pre_shape + keep_shape</span><br><span class="line">           out = tf.reshape(tensor, target_shape)</span><br><span class="line">           out = tf.squeeze(out, [len(args[<span class="number">0</span>].get_shape().as_list()) - <span class="number">1</span>])</span><br><span class="line">           <span class="keyword">return</span> (out)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">       d = hq.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">       logging.debug(<span class="string">"d is: &#123;&#125;"</span>.format(d))</span><br><span class="line">       hc_aug = tf.tile(tf.reshape(hc, shape=[<span class="number">-1</span>, max_context_length, <span class="number">1</span>, d]),</span><br><span class="line">                        [<span class="number">1</span>, <span class="number">1</span>, max_question_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">       hq_aug = tf.tile(tf.reshape(hq, shape=[<span class="number">-1</span>, <span class="number">1</span>, max_question_length, d]),</span><br><span class="line">                        [<span class="number">1</span>, max_context_length, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># [(BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2)]</span></span><br><span class="line">       args = [hc_aug, hq_aug, hc_aug * hq_aug]</span><br><span class="line"></span><br><span class="line">       <span class="comment"># [(BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2)]</span></span><br><span class="line">       args_flat = [_flatten(arg, <span class="number">1</span>) <span class="keyword">for</span> arg <span class="keyword">in</span> args]</span><br><span class="line">       args_flat = [tf.cond(is_train, <span class="keyword">lambda</span>: tf.nn.dropout(arg, keep_prob), <span class="keyword">lambda</span>: arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args_flat]</span><br><span class="line"></span><br><span class="line">       d_concat = d * <span class="number">3</span></span><br><span class="line">       W = tf.get_variable(<span class="string">"W"</span>, shape=[d_concat, <span class="number">1</span>])</span><br><span class="line">       b = tf.get_variable(<span class="string">"b"</span>, shape=[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Calculating a(h, u) = w_s^(t)[h; u; h * u]</span></span><br><span class="line">       <span class="comment"># (BS * MCL * MQL, HS * 6) @ (HS * 6, 1) + (1) -&gt; (BS * MCL * MQL, 1)</span></span><br><span class="line">       res = tf.concat(args_flat, <span class="number">1</span>) @ W + b</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS * MCL * MQL, 1) -&gt; (BS, MCL, MQL)</span></span><br><span class="line">       similarity_matrix = _reconstruct(res, args[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">       logging.debug(<span class="string">"similiarity_matrix after reconstruct: &#123;&#125;"</span>.format(similarity_matrix.get_shape()))</span><br><span class="line">       context_mask_aug = tf.tile(tf.expand_dims(context_mask, <span class="number">2</span>), [<span class="number">1</span>, <span class="number">1</span>, max_question_length])</span><br><span class="line">       question_mask_aug = tf.tile(tf.expand_dims(question_mask, <span class="number">1</span>), [<span class="number">1</span>, max_context_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       mask_aug = context_mask_aug &amp; question_mask_aug</span><br><span class="line">       similarity_matrix = softmax_mask_prepro(similarity_matrix, mask_aug)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (similarity_matrix)</span><br></pre></td></tr></table></figure><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>内容段落摘自维基百科文章中的536篇文章，包含107,785对问题和答案，这使得SQuAD显着大于以前任何人类标注的数据集。在该数据集中，80％的数据用于训练，10％用于验证, 剩余10％用于测试。在训练集中，进一步划分出5％用于训练时的验证。</p><p>与其他问答数据集相比，SQUAD具有比较独特的特征，所有答案都是出自相应的上下文中。对于每一个段落, 众包人员生成几个问题，并选择原段落中的一小段作为答案. 答案由两个index组成, 对应答案在段落中的起始位置。因此，SQuAD数据集的答案可能比其他以单个单词和实体为答案为主的数据集长得多。实例:</p><blockquote><p>Question:<br>Why was Tesla returned to Gospic?</p></blockquote><blockquote><p>Context paragraph:<br>On 24 March 1879, Tesla was returned to Gospicunder police guard for <strong>not having a residence permit</strong>…</p></blockquote><blockquote><p>Answer:<br>{12, 16}</p></blockquote><h3 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h3><p>词向量使用预训练好的 Glove embedding.</p><blockquote><p>Glove is a log-bilinear regression model that combines the advantages of global matrix factorization and local context window methods.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_glove_embeddings</span><span class="params">(embed_path)</span>:</span></span><br><span class="line">    logger.info(<span class="string">"Loading glove embedding..."</span>)</span><br><span class="line">    glove = np.load(embed_path)[<span class="string">'glove'</span>]</span><br><span class="line">    logger.info(<span class="string">"Dimension: &#123;&#125;"</span>.format(glove.shape[<span class="number">1</span>]))</span><br><span class="line">    logger.info(<span class="string">"Vocabulary: &#123;&#125;"</span> .format(glove.shape[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">return</span> glove</span><br><span class="line"></span><br><span class="line">embeddings = load_glove_embeddings(embed_path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_embeddings</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_embeddings</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Loads distributed word representations based on placeholder tokens</span></span><br><span class="line"><span class="string">        :return: embeddings representaion of question and context.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"embeddings"</span>):</span><br><span class="line">            <span class="keyword">if</span> self.config.RE_TRAIN_EMBED:</span><br><span class="line">                embeddings = tf.get_variable(<span class="string">"embeddings"</span>, initializer=self.embeddings)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                embeddings = tf.cast(self.embeddings, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">            question_embeddings = tf.nn.embedding_lookup(embeddings, self.question_placeholder)</span><br><span class="line">            question_embeddings = tf.reshape(question_embeddings,</span><br><span class="line">                        shape = [<span class="number">-1</span>, self.max_question_length_placeholder, self.config.embedding_size])</span><br><span class="line"></span><br><span class="line">            context_embeddings = tf.nn.embedding_lookup(embeddings, self.context_placeholder)</span><br><span class="line">            context_embeddings = tf.reshape(context_embeddings,</span><br><span class="line">                        shape = [<span class="number">-1</span>, self.max_context_length_placeholder, self.config.embedding_size])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> question_embeddings, context_embeddings</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>整体的模型由Embedding层，Encodr层，Attention层，Decoder层组成</p><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>编码器就是一个双向GRU层:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    In a generalized encode function, you pass in your inputs,</span></span><br><span class="line"><span class="string">    masks, and an initial hidden state input into this function.</span></span><br><span class="line"><span class="string">    :param inputs: Symbolic representations of your input</span></span><br><span class="line"><span class="string">    :param masks: this is to make sure tf.nn.dynamic_rnn doesn't iterate</span></span><br><span class="line"><span class="string">                  through masked steps</span></span><br><span class="line"><span class="string">    :param encoder_state_input: (Optional) pass this as initial hidden state</span></span><br><span class="line"><span class="string">                                to tf.nn.dynamic_rnn to build conditional representations</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">            outputs: The RNN output Tensor</span></span><br><span class="line"><span class="string">                      an encoded representation of your input.</span></span><br><span class="line"><span class="string">                      It can be context-level representation,</span></span><br><span class="line"><span class="string">                      word-level representation, or both.</span></span><br><span class="line"><span class="string">            state: The final state.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state_size)</span>:</span></span><br><span class="line">        self.state_size = state_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, inputs, masks, initial_state_fw=None, initial_state_bw=None, reuse=False, keep_prob = <span class="number">1.0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BiGRU_layer(inputs, masks, self.state_size, initial_state_fw, initial_state_bw, reuse, keep_prob)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BiGRU_layer</span><span class="params">(inputs, masks, state_size, initial_state_fw=None, initial_state_bw=None, reuse = False, keep_prob=<span class="number">1.0</span>)</span>:</span></span><br><span class="line">        <span class="string">''' Wrapped BiGRU_layer for reuse'''</span></span><br><span class="line">        <span class="comment"># 'outputs' is a tensor of shape [batch_size, max_time, cell_state_size]</span></span><br><span class="line">        cell_fw = tf.contrib.rnn.GRUCell(state_size, reuse = reuse)</span><br><span class="line">        cell_fw = tf.contrib.rnn.DropoutWrapper(cell_fw, input_keep_prob = keep_prob)</span><br><span class="line"></span><br><span class="line">        cell_bw = tf.contrib.rnn.GRUCell(state_size, reuse = reuse)</span><br><span class="line">        cell_bw = tf.contrib.rnn.DropoutWrapper(cell_bw, input_keep_prob = keep_prob)</span><br><span class="line"></span><br><span class="line">        sequence_length = tf.reduce_sum(tf.cast(masks, <span class="string">'int32'</span>), axis=<span class="number">1</span>)</span><br><span class="line">        sequence_length = tf.reshape(sequence_length, [<span class="number">-1</span>,])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Outputs Tensor shaped: [batch_size, max_time, cell.output_size]</span></span><br><span class="line">        (outputs_fw, outputs_bw), (final_state_fw, final_state_bw) = tf.nn.bidirectional_dynamic_rnn(</span><br><span class="line">                                            cell_fw = cell_fw,\</span><br><span class="line">                                            cell_bw = cell_bw,\</span><br><span class="line">                                            inputs = inputs,\</span><br><span class="line">                                            sequence_length = sequence_length,</span><br><span class="line">                                            initial_state_fw = initial_state_fw,\</span><br><span class="line">                                            initial_state_bw = initial_state_bw,</span><br><span class="line">                                            dtype = tf.float32)</span><br><span class="line"></span><br><span class="line">        outputs = tf.concat([outputs_fw, outputs_bw], <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> outputs, final_state_fw, final_state_bw</span><br></pre></td></tr></table></figure><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>解码器也包含一个双向GRU层，输出的状态分别由两个softmax分类器计算出预测的答案的 start 和 end index 位置:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    takes in a knowledge representation</span></span><br><span class="line"><span class="string">    and output a probability estimation over</span></span><br><span class="line"><span class="string">    all paragraph tokens on which token should be</span></span><br><span class="line"><span class="string">    the start of the answer span, and which should be</span></span><br><span class="line"><span class="string">    the end of the answer span.</span></span><br><span class="line"><span class="string">    :param knowledge_rep: it is a representation of the paragraph and question,</span></span><br><span class="line"><span class="string">                          decided by how you choose to implement the encoder</span></span><br><span class="line"><span class="string">    :return: (start, end)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, output_size, state_size=None)</span>:</span></span><br><span class="line">        self.output_size = output_size</span><br><span class="line">        self.state_size = state_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, knowledge_rep, mask, max_input_length, keep_prob = <span class="number">1.0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''Decode with BiGRU'''</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'Modeling'</span>):</span><br><span class="line">            outputs, _, _ = BiGRU_layer(knowledge_rep, mask, self.state_size, keep_prob=keep_prob)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"start"</span>):</span><br><span class="line">            start = self.get_logit(outputs, max_input_length)</span><br><span class="line">            start = softmax_mask_prepro(start, mask)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"end"</span>):</span><br><span class="line">            end = self.get_logit(outputs, max_input_length)</span><br><span class="line">            end = softmax_mask_prepro(end, mask)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (start, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_logit</span><span class="params">(self, inputs, max_inputs_length)</span>:</span></span><br><span class="line">        <span class="string">''' Get the logit (-inf, inf). '''</span></span><br><span class="line">        d = inputs.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">assert</span> inputs.get_shape().ndims == <span class="number">3</span>, (<span class="string">"Got &#123;&#125;"</span>.format(inputs.get_shape().ndims))</span><br><span class="line">        inputs = tf.reshape(inputs, shape = [<span class="number">-1</span>, d])</span><br><span class="line">        W = tf.get_variable(<span class="string">'W'</span>, initializer=tf.contrib.layers.xavier_initializer(),</span><br><span class="line">                             shape=(d, <span class="number">1</span>), dtype=tf.float32)</span><br><span class="line">        pred = tf.matmul(inputs, W)</span><br><span class="line">        pred = tf.reshape(pred, shape = [<span class="number">-1</span>, max_inputs_length])</span><br><span class="line">        tf.summary.histogram(<span class="string">'logit'</span>, pred)</span><br><span class="line">        <span class="keyword">return</span> pred</span><br></pre></td></tr></table></figure></p><h3 id="搭建整个系统"><a href="#搭建整个系统" class="headerlink" title="搭建整个系统"></a>搭建整个系统</h3><p>在整个QASystem类中初始化这些功能层:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QASystem</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embeddings, config)</span>:</span></span><br><span class="line">        <span class="string">""" Initializes System """</span></span><br><span class="line">        self.embeddings = embeddings</span><br><span class="line">        self.config = config</span><br><span class="line"></span><br><span class="line">        self.encoder = Encoder(config.encoder_state_size)</span><br><span class="line">        self.decoder = Decoder(output_size=config.output_size, state_size = config.decoder_state_size)</span><br><span class="line">        self.attention = Attention()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ==== set up placeholder tokens ========</span></span><br><span class="line">        self.context_placeholder = tf.placeholder(tf.int32, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line">        self.context_mask_placeholder = tf.placeholder(tf.bool, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line">        self.question_placeholder = tf.placeholder(tf.int32, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line">        self.question_mask_placeholder = tf.placeholder(tf.bool, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line"></span><br><span class="line">        self.answer_start_placeholder = tf.placeholder(tf.int32)</span><br><span class="line">        self.answer_end_placeholder = tf.placeholder(tf.int32)</span><br><span class="line"></span><br><span class="line">        self.max_context_length_placeholder = tf.placeholder(tf.int32)</span><br><span class="line">        self.max_question_length_placeholder = tf.placeholder(tf.int32)</span><br><span class="line">        self.dropout_placeholder = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ==== assemble pieces ====</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(self.config.which_model, initializer=tf.uniform_unit_scaling_initializer(<span class="number">1.0</span>)):</span><br><span class="line">            self.question_embeddings, self.context_embeddings = self.setup_embeddings()</span><br><span class="line">            self.preds = self.setup_system()</span><br><span class="line">            self.loss = self.setup_loss(self.preds)</span><br><span class="line">            self.f1_train = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            self.EM_train = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            self.f1_val = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            self.EM_val = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            tf.summary.scalar(<span class="string">'f1_train'</span>, self.f1_train)</span><br><span class="line">            tf.summary.scalar(<span class="string">'EM_train'</span>, self.EM_train)</span><br><span class="line">            tf.summary.scalar(<span class="string">'f1_val'</span>, self.f1_val)</span><br><span class="line">            tf.summary.scalar(<span class="string">'EM_val'</span>, self.EM_val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ==== set up training/updating procedure ====</span></span><br><span class="line">        <span class="string">''' With gradient clipping'''</span></span><br><span class="line">        opt_op = get_optimizer(self.config.optimizer, self.loss, config.max_gradient_norm, config.learning_rate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> config.exdma_weight_decay <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.train_op = self.build_exdma(opt_op)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.train_op = opt_op</span><br><span class="line">        self.merged = tf.summary.merge_all()</span><br></pre></td></tr></table></figure></p><p>把各个功能层搭建成一个完整的模型:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_system</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Connect all parts of your system here:</span></span><br><span class="line"><span class="string">    After your modularized implementation of encoder and decoder</span></span><br><span class="line"><span class="string">    you should call various functions inside encoder, decoder here</span></span><br><span class="line"><span class="string">    to assemble your reading comprehension system!</span></span><br><span class="line"><span class="string">    context: [None, max_context_length, d]</span></span><br><span class="line"><span class="string">    question: [None, max_question_length, d]</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    d = self.context_embeddings.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">'''Step 1: encode context and question, respectively, with independent weights</span></span><br><span class="line"><span class="string">    e.g. hq = encode_question(question)  # get U (d*J) as representation of q</span></span><br><span class="line"><span class="string">    e.g. hc = encode_context(context, q_state)   # get H (d*T) as representation of x</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'question'</span>):</span><br><span class="line">        hq, question_state_fw, question_state_bw = \</span><br><span class="line">            self.encoder.BiGRU_encode(self.question_embeddings, self.question_mask_placeholder,</span><br><span class="line">                                keep_prob = self.dropout_placeholder)</span><br><span class="line">        <span class="keyword">if</span> self.config.QA_ENCODER_SHARE:</span><br><span class="line">            hc, context_state_fw, context_state_bw =\</span><br><span class="line">                 self.encoder.BiGRU_encode(self.context_embeddings, self.context_mask_placeholder,</span><br><span class="line">                         initial_state_fw = question_state_fw, initial_state_bw = question_state_bw,</span><br><span class="line">                         reuse = <span class="keyword">True</span>, keep_prob = self.dropout_placeholder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.config.QA_ENCODER_SHARE:</span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'context'</span>):</span><br><span class="line">            hc, context_state_fw, context_state_bw =\</span><br><span class="line">                 self.encoder.BiGRU_encode(self.context_embeddings, self.context_mask_placeholder,</span><br><span class="line">                         initial_state_fw = question_state_fw, initial_state_bw = question_state_bw,</span><br><span class="line">                                     keep_prob=self.dropout_placeholder)</span><br><span class="line"></span><br><span class="line">    d_Bi = self.config.encoder_state_size*<span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> hc.get_shape().as_list() == [<span class="keyword">None</span>, <span class="keyword">None</span>, d_Bi], (</span><br><span class="line">            <span class="string">"Expected &#123;&#125;, got &#123;&#125;"</span>.format([<span class="keyword">None</span>, self.max_context_length_placeholder,</span><br><span class="line">            self.config.encoder_state_size], hc.get_shape().as_list()))</span><br><span class="line">    <span class="keyword">assert</span> hq.get_shape().as_list() == [<span class="keyword">None</span>, <span class="keyword">None</span>, d_Bi], (</span><br><span class="line">            <span class="string">"Expected &#123;&#125;, got &#123;&#125;"</span>.format([<span class="keyword">None</span>, self.max_question_length_placeholder,</span><br><span class="line">            self.config.encoder_state_size], hq.get_shape().as_list()))</span><br><span class="line"></span><br><span class="line">    <span class="string">'''Step 2: combine context hidden state(hc) and question hidden state(hq) with attention</span></span><br><span class="line"><span class="string">         measured similarity = hc.T * hq</span></span><br><span class="line"><span class="string">         Context-to-query (C2Q) attention signifies which query words are most relevant to each P context word.</span></span><br><span class="line"><span class="string">            attention_c2q = softmax(similarity)</span></span><br><span class="line"><span class="string">            hq_hat = sum(attention_c2q*hq)</span></span><br><span class="line"><span class="string">         Query-to-context (Q2C) attention signifies which context words have the closest similarity</span></span><br><span class="line"><span class="string">            to one of the query words and are hence critical for answering the query.</span></span><br><span class="line"><span class="string">            attention_q2c = softmax(similarity.T)</span></span><br><span class="line"><span class="string">            hc_hat = sum(attention_q2c*hc)</span></span><br><span class="line"><span class="string">         combine with β activation: β function can be an arbitrary trainable neural network</span></span><br><span class="line"><span class="string">         g = β(hc, hq, hc_hat, hq_hat)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># concat[h, u_a, h*u_a, h*h_a]</span></span><br><span class="line">    attention = self.attention.forwards_bilinear(hc, hq, self.context_mask_placeholder, self.question_mask_placeholder,</span><br><span class="line">                                max_context_length_placeholder = self.max_context_length_placeholder,</span><br><span class="line">                                max_question_length_placeholder = self.max_question_length_placeholder,</span><br><span class="line">                                is_train=(self.dropout_placeholder &lt; <span class="number">1.0</span>), keep_prob=self.dropout_placeholder)</span><br><span class="line">    d_com = d_Bi*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">'''Step 3: decoding   '''</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"decoding"</span>):</span><br><span class="line">        start, end = self.decoder.BiGRU_decode(attention, self.context_mask_placeholder,</span><br><span class="line">                                self.max_context_length_placeholder, self.dropout_placeholder)</span><br><span class="line">    <span class="keyword">return</span> start, end</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Standford question and answer dataset &lt;a href=&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;(SQuAD)&lt;/a&gt; 是由 Rajpurkar 等人提出的一个较有挑战性的阅读理解数据集。该数据集包含 10 万个（问题，原文，答案）三元组，原文来自于 536 篇维基百科文章，而问题和答案的构建主要是通过众包的方式，让标注人员提出最多 5 个基于文章内容的问题并提供正确答案，且答案出现在原文中。SQuAD 和之前的完形填空类阅读理解数据集如 CNN/DM，CBT 等最大的区别在于：SQuAD 中的答案不在是单个实体或单词，而可能是一段短语，这使得其答案更难预测。SQuAD 包含公开的训练集和开发集，以及一个隐藏的测试集，其采用了与 ImageNet 类似的封闭评测的方式，研究人员需提交算法到一个开放平台，并由 SQuAD 官方人员进行测试并公布结果。&lt;/p&gt;
&lt;p&gt;由于 SQuAD 的答案限定于来自原文，模型只需要判断原文中哪些词是答案即可，因此是一种抽取式的 QA 任务而不是生成式任务。简单的 SQuAD 的模型框架可以参考seq2seq：Embed 层，Encode 层 和 Decode 层。Embed 层负责将原文和问题中的 tokens 映射为向量表示；Encode 层主要使用 RNN 来对原文和问题进行编码，这样编码后每个 token 的向量表示就蕴含了上下文的语义信息；Decode 层则基于 query-aware 的原文表示来预测答案起始位置。&lt;/p&gt;
&lt;p&gt;但这个文本数据集涉及问题，原文，答案三个部分, 特别是需要根据问题在原文中搜寻答案的范围, 这就涉及如果把问题的信息提取出来并作用于原文. 目前各种前沿模型的关注点几乎都是在如何捕捉问题和原文之间的交互关系，也就是在 Encode 层和 Decode 层之间, 使用一个 Interaction 层处理编码了问题语义信息的原文表示，即 query-aware 的原文表示，再输入给 Decode 层。而本来应用机器翻译Attention机制就能很好的处理这种交互。&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="TensorFlow" scheme="http://shukebeta.me/tags/TensorFlow/"/>
    
      <category term="SQuAD" scheme="http://shukebeta.me/tags/SQuAD/"/>
    
  </entry>
  
  <entry>
    <title>Programming contest</title>
    <link href="http://shukebeta.me/programming-contest/"/>
    <id>http://shukebeta.me/programming-contest/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2018-09-06T03:43:47.815Z</updated>
    
    <content type="html"><![CDATA[<p>各种编程题<br><!-- read more --></p><h3 id="两个整数的汉明距离-hamming-distance"><a href="#两个整数的汉明距离-hamming-distance" class="headerlink" title="两个整数的汉明距离 hamming distance"></a>两个整数的汉明距离 hamming distance</h3><p><a href="https://leetcode.com/problems/hamming-distance/description/" target="_blank" rel="noopener">Leetcode 461</a><br>两个整数之间的汉明距离是相应位不同的位置数。 给定两个整数x和y，计算汉明距离。</p><blockquote><p>Brian Kernighan’s algorithm takes <code>O(log N)</code> to count set bits (1s) in an integer: each iteration sets the least significance bit that isn’t zero to zero - and only it. Since each iteration converts exactly bit from 1 to 0, it’ll take as many iterations as there are non-0 bits to convert all the bits to 0(and thus <code>v == 0</code> and the loop finishes). An integer n has <code>log(n)</code> bits, hence the worst case is <code>O(log(n))</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = x ^ y;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        y++;</span><br><span class="line">        x &amp;= x - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lets say that the bit at index n is 1 and that the bits in indexes 0 upto <code>n-1</code> are all 0 (we’ll use little endianess - so index 0 is 1, index 1 is 2, index 2 is 4, index 3 is 8 and so on).</p></blockquote><blockquote><p><code>v-1</code> subtracts from index 0 - but it’s 0, so it converts it to 1 and subtracts from index 1 - but it’s also 0, so it converts it to 1 and subtracts from index 2 - and so on until we reach index n. Since index n is 1 it can subtract from it and turn it to 0 - and there it stops: <code>1101000 - 1 = 1100111</code></p></blockquote><blockquote><p>So, <code>v-1</code> is like <code>v</code> except there are <code>n</code> 0 that became 1 and one 1 that became 0. In <code>v &amp; v - 1</code> all the other bits remain as is, the <code>n</code> zeros that where turned to ones remain 0 (because <code>0 &amp; 1 == 0</code>), and the one 1 that was turned to 0 turns to 0(because <code>1 &amp; 0 == 0</code>). So overall - only a single bit was changed in the iteration, and this change was from 1 to 0: <code>1101000 &amp; 1100111 = 1100000</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;各种编程题&lt;br&gt;&lt;!-- read more --&gt;&lt;/p&gt;
&lt;h3 id=&quot;两个整数的汉明距离-hamming-distance&quot;&gt;&lt;a href=&quot;#两个整数的汉明距离-hamming-distance&quot; class=&quot;headerlink&quot; title=&quot;两个整数的
      
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms - Princeton</title>
    <link href="http://shukebeta.me/algorithms/"/>
    <id>http://shukebeta.me/algorithms/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2018-09-14T12:25:44.465Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Algorithms, Part I, <a href="https://online.princeton.edu/course/algorithms-part-i" target="_blank" rel="noopener">https://online.princeton.edu/course/algorithms-part-i</a></li><li>Algorithms, Part II, <a href="https://online.princeton.edu/course/algorithms-part-ii" target="_blank" rel="noopener">https://online.princeton.edu/course/algorithms-part-ii</a></li><li>Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne <a href="https://algs4.cs.princeton.edu/" target="_blank" rel="noopener">https://algs4.cs.princeton.edu/</a><a id="more"></a></li></ul><h2 id="Union−Find"><a href="#Union−Find" class="headerlink" title="Union−Find"></a>Union−Find</h2><p>Considering the dynamic connectivity problem, modeling of multiple objects connected in a space/network.</p><p>Applications involve manipulating objects of all types.<br>・Pixels in a digital photo.<br>・Computers in a network.<br>・Friends in a social network.<br>・Transistors in a computer chip.</p><p>Given a set of N objects.</p><ul><li><code>union(a, b)</code>: connect two objects.</li><li><code>connected(p, q)</code>: is two objects connected?</li><li><code>find(p)</code>: Find component identifier for <code>p</code> (0 to N – 1)</li></ul><p>Modeling the objects: array.</p><p>Modeling the connections:<br>Maximal set of objects that are mutually connected - Connected components.</p><p>Data structure:</p><ol><li><p>Quick find<br>Integer array <code>id[]</code> of length N, two objects are connected iff they have the same id.<br><img src="https://algs4.cs.princeton.edu/15uf/images/quick-find-overview.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br>Defect: <code>union</code> too expensive, $\in \Theta(N^2)$.</p></li><li><p>Quick-union<br>Integer array <code>id[]</code> of length N, <code>id[i]</code> is parent of i, root of i is <code>id[id[id[...id[i]...]]]</code> (until it doesn’t change).<br><img src="https://algs4.cs.princeton.edu/15uf/images/quick-union-overview.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br>The <code>find</code> is recursive.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** chase parent pointers until reach root</span></span><br><span class="line"><span class="comment"> * (depth of i array accesses) */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i != id[i]) i = id[i];</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Defect: Trees can get tall, <code>find</code> too expensive, $\in \Theta(N)$.</p></li><li><p>Weighted quick-union<br>Modify quick-union to avoid tall trees. Balance by linking root of smaller tree to root of larger tree. Maintain extra array <code>sz[i]</code> to keep track of size of each tree (number of objects).<br><img src="https://algs4.cs.princeton.edu/15uf/images/weighted-quick-union-overview.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br><code>find</code>: time proportional to depth of p and q, the depth of any node x is at most $\log N$,</p></li><li><p>Weighted quick-union with path compression<br>Making all the nodes that examined directly link to its root. Keeps tree almost completely flat.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Make every other node in path point to its grandparent</span></span><br><span class="line"><span class="comment">* (thereby halving path length). */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i != id[i]) &#123;</span><br><span class="line">        id[i] = id[id[i]];</span><br><span class="line">        i = id[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Amortized analysis: <code>[Hopcroft-Ulman, Tarjan]</code> Starting from an empty data structure, any sequence of M union-find ops on N objects makes $≤ c ( N + M \lg \ast N )$ array accesses. $\lg \ast N$ is <a href="https://en.wikipedia.org/wiki/Iterated_logarithm" target="_blank" rel="noopener">Iterated logarithm</a>, for $N = 2^{65536}$, $\lg \ast N = 5$. In theory, WQUPC is not quite linear. In practice, WQUPC is linear.</p></li></ol><blockquote><p>Amazing fact. <code>[Fredman-Saks]</code> No linear-time algorithm exists.</p></blockquote><p><img src="https://algs4.cs.princeton.edu/15uf/images/uf-performance.png" alt="" title="Summary. image from: https://algs4.cs.princeton.edu/"></p><h2 id="Element-Sort"><a href="#Element-Sort" class="headerlink" title="Element Sort"></a>Element Sort</h2><p>Two elementary sorting methods: selection sort and insertion sort. Shellsort is a variation of one of them.</p><blockquote><p>The objective is to rearrange the items such that their keys are in ascending order.</p></blockquote><p>In Java, the abstract notion of a key is captured by the Comparable interface. The Comparable interface provides an elegant API for callback when Java need to compare keys.</p><p>Some background knowlege:</p><ul><li>Cost model, please refer to <a href="/NOTE-data-structures-efficient-programming#Asymptotic-Analysis">Asymptotic Analysis</a></li><li>Sorting cost model. How many compares and exchanges, or array accesses, for a sorting.</li><li>Memory. There are sorting algorithms that sort in place (no extra memory except perhaps for a small function-call stack or a constant number of instance variables), and those that need enough extra memory to hold another copy of the array to be sorted.</li></ul><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><p>Repeatedly selecting the smallest remaining item:</p><ol><li>Find the smallest item in the array, and exchange it with the first entry.</li><li>Find the next smallest item and exchange it with the second entry.</li><li>Continue until the entire array is sorted.<br><img src="https://algs4.cs.princeton.edu/21elementary/images/selection.png" alt="" title="image from: https://algs4.cs.princeton.edu/"></li></ol><p>Selection sort uses ~$n^2/2$ compares and n exchanges to sort an array of length n.</p><h3 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h3><p>Works like people sort Pokers: consider the cards one at a time, inserting each into its proper place among those already considered (keeping them sorted).<br><img src="https://algs4.cs.princeton.edu/21elementary/images/insertion.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br>In a computer implementation, we need to make space for the current item by moving larger items one position to the right, before inserting the current item into the vacated position.</p><blockquote><p>For randomly ordered arrays of length N with distinct keys, insertion sort uses ~$N^2/4$ compares and ~$N^2/4$ exchanges on the average. The worst case is ~ $N^2/2$ compares and ~ $N^2/2$ exchanges and the best case is $N-1$ compares and 0 exchanges.</p></blockquote><blockquote><p>Insertion sort works well for certain types of nonrandom arrays that often arise in practice, even if they are huge. An inversion is a pair of keys that are out of order in the array. For instance, E X A M P L E has 11 inversions: E-A, X-A, X-M, X-P, X-L, X-E, M-L, M-E, P-L, P-E, and L-E. If the number of inversions in an array is less than a constant multiple of the array size, we say that the array is partially sorted.</p></blockquote><h3 id="Shellsort"><a href="#Shellsort" class="headerlink" title="Shellsort"></a>Shellsort</h3><p>Shellsort gains speed by allowing exchanges of entries that are far apart, to produce partially sorted arrays that can be efficiently sorted, eventually by insertion sort.</p><p>The idea is to rearrange the array to give it the property that taking every $h_{th}$ entry (starting anywhere) yields a sorted sequence. Such an array is said to be h-sorted.<img src="https://algs4.cs.princeton.edu/21elementary/images/h-sorted.png" alt="" title="image from: https://algs4.cs.princeton.edu/">By h-sorting for some large values of h, we can move entries in the array long distances and thus make it easier to h-sort for smaller values of h. Using such a procedure for any increment sequence of values of h that ends in 1 will produce a sorted array:<img src="https://algs4.cs.princeton.edu/21elementary/images/shell.png" alt="" title="image from: https://algs4.cs.princeton.edu/"></p><blockquote><p>The number of compares used by shellsort with the increments 1, 4, 13, 40, 121, 364, … is O(N^{3/2}).</p></blockquote><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>Merging means combining two ordered arrays to make one larger ordered array. Merge sort is an utility of divide and conquer paradigm.</p><p>Mergesort guarantees to sort an array of N items in time proportional to $N \log N$, no matter what the input. But it uses extra space proportional to N. Specifically, mergesort uses between $1/2 N \lg N$ and $N \lg N$ compares and at most $6 N \lg N$ array accesses to sort any array of length N.</p><blockquote><p><strong>Abstract in-place merge</strong>: The method <code>merge(a, lo, mid, hi)</code> in <a href="https://algs4.cs.princeton.edu/22mergesort/Merge.java.html" target="_blank" rel="noopener">Merge.java</a> puts the results of merging the subarrays <code>a[lo..mid]</code> with <code>a[mid+1..hi]</code> into a single ordered array, leaving the result in <code>a[lo..hi]</code>. While it would be desirable to implement this method without using a significant amount of extra space, such solutions are remarkably complicated.</p></blockquote><h3 id="Top-down-mergesort"><a href="#Top-down-mergesort" class="headerlink" title="Top-down mergesort"></a>Top-down mergesort</h3><p>A recursive mergesort implementation based on this abstract in-place merge.<br><img src="https://algs4.cs.princeton.edu/22mergesort/images/mergesortTD.png" alt="" title="image from: https://algs4.cs.princeton.edu/"></p><h3 id="Bottom-up-mergesort"><a href="#Bottom-up-mergesort" class="headerlink" title="Bottom-up mergesort"></a>Bottom-up mergesort</h3><p>Do all the merges of tiny arrays on one pass, then do a second pass to merge those arrays in pairs, and so forth, continuing until we do a merge that encompasses the whole array.</p><ol><li>We start by doing a pass of 1-by-1 merges</li><li>then a pass of 2-by-2 merges (merge subarrays of size 2 to make subarrays of size 4),</li><li>then 4-by-4 merges, and so forth.</li></ol><blockquote><p>Proposition: No compare-based sorting algorithm can guarantee to sort N items with fewer than $lg(N!)$ ~ $N \lg N$ compares.<br>Proposition. Mergesort is an asymptotically optimal compare-based sorting algorithm. That is, both the number of compares used by mergesort in the worst case and the minimum number of compares that any compare-based sorting algorithm can guarantee are ~N lg N.</p></blockquote><h3 id="Mergesort-Applications"><a href="#Mergesort-Applications" class="headerlink" title="Mergesort Applications"></a>Mergesort Applications</h3><p>Counting inversions: An inversion in an array <code>a[]</code> is a pair of entries <code>a[i]</code> and <code>a[j]</code> such that <code>i &lt; j</code> but <code>a[i] &gt; a[j]</code>. Given an array, design a linearithmic algorithm to count the number of inversion.</p><blockquote><p>count while mergesorting.</p></blockquote><p>Shuffling a linked list: Given a singly-linked list containing n items, rearrange the items uniformly at random. Your algorithm should consume a logarithmic (or constant) amount of extra memory and run in time proportional to $n \log n$ in the worst case:</p><blockquote><p>Design a linear-time subroutine that can take two uniformly shuffled linked lists of sizes $n_1$ and $n_2$ and combined them into a uniformly shuffled linked lists of size $n_1 + n_2$.</p></blockquote><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><h2 id="Pigeonhole-sort"><a href="#Pigeonhole-sort" class="headerlink" title="Pigeonhole sort"></a>Pigeonhole sort</h2><p>鸽巢排序</p><h2 id="Bucket-sort"><a href="#Bucket-sort" class="headerlink" title="Bucket sort"></a>Bucket sort</h2><p>桶排序</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Algorithms, Part I, &lt;a href=&quot;https://online.princeton.edu/course/algorithms-part-i&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://online.princeton.edu/course/algorithms-part-i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithms, Part II, &lt;a href=&quot;https://online.princeton.edu/course/algorithms-part-ii&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://online.princeton.edu/course/algorithms-part-ii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne &lt;a href=&quot;https://algs4.cs.princeton.edu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://algs4.cs.princeton.edu/&lt;/a&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="algs4" scheme="http://shukebeta.me/tags/algs4/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>注意力机制</title>
    <link href="http://shukebeta.me/attention/"/>
    <id>http://shukebeta.me/attention/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2018-09-09T08:46:24.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h2><p>注意力机制就是为了解决机器翻译中为不同的对应词分配权重的提出的 <a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">Bahdanau, D., Cho, K., &amp; Bengio, Y. (2014)</a>。以英语 - 法语翻译为例，给定一对英语输入序列“They”、“are”、“watching”、“.”和法语输出序列“Ils”、“regardent”、“.”。解码器可以在输出序列的时间步 1 使用更集中编码了“They”、“are”信息的背景变量来生成“Ils”，在时间步 2 使用更集中编码了“watching”信息的背景变量来生成“regardent”，在时间步 3 使用更集中编码了“.”信息的背景变量来生成“.”。这看上去就像是在解码器的每一时间步对输入序列中不同时间步编码的信息分配不同的注意力。<br><a id="more"></a></p><p><strong>目标</strong>：<br>对于解码器的每一个时间步$t’$, 生成一个背景向量$c_{t’}$来捕捉相关的解码器信息, 以用于预测输出目标值$y_{t’}$.</p><p><strong>具体步骤</strong>：<br>解码器在时间步 $t’$ 的隐藏状态</p><p>$$s_{t’} = g(y_{t’-1}, c_{t’}, s_{t’-1}).$$</p><p>令编码器在时间 $t$ 的隐藏状态为 $h_t$，且总时间步数为 $T$。解码器在时间步 $t’$ 的背景变量为</p><p>$$c_{t’} = \sum_{t=1}^T \alpha_{t’ t} h_t,$$</p><p>其中 $\alpha_{t’ t}$ 是权重，用于给定解码器的当前隐藏状态 $s_{t’}$，对编码器中不同时间步的隐藏状态$h_t$求加权平均。这里的权值也称注意力权重：</p><p>$$\alpha_{t’ t} = align(s_{t’}, h_t) = \frac{\exp(score(t’ t))}{ \sum_{t=1}^T \exp(score(t’ t)) },$$</p><p>其中 $score(t’ t) \in \mathbb{R}$ 的计算为</p><p>$$score(t’ t) = a(s_{t’ - 1}, h_t).$$</p><p>上式中的score打分函数 $score(t’ t)$ 有多种设计方法。Bahanau 等使用了多层感知机：</p><p>$$e_{t’t} = v^\top \tanh(W_s s_{t’ - 1} + W_h h_t),$$</p><p>其中 $v$、$W_s$、$W_h$ 以及编码器与解码器中的各个权重和偏差都是模型参数。</p><p>Bahanau 等在编码器和解码器中分别使用了门控循环单元GRU。在解码器中，我们需要对门控循环单元的设计稍作修改。解码器在 $t’ $ 时间步的隐藏状态为</p><p>$$s_{t’} = z_{t’} \odot s_{t’-1}  + (1 - z_{t’}) \odot \tilde{s}_{t’},$$</p><p>其中的重置门、更新门和候选隐含状态分别为</p><p>$$<br>\begin{aligned}<br>r_{t’} &amp;= \sigma(W_{yr} y_{t’-1} + W_{sr} s_{t’ - 1} + W_{cr} c_{t’} + b_r), \\<br>z_{t’} &amp;= \sigma(W_{yz} y_{t’-1} + W_{sz} s_{t’ - 1} + W_{cz} c_{t’} + b_z),\\<br>\tilde{s_{t’}} &amp;= \text{tanh}(W_{ys} y_{t’-1} + W_{ss} (s_{t’ - 1} \odot r_{t’}) + W_{cs} c_{t’} + b_s).<br>\end{aligned}<br>$$</p><p>然后，给定目标(解码器)隐藏状态$h_{t’}$, 以及背景向量$c_{t’}$, 通过使用简单的并联层合并这两个向量的信息, 来生成所谓的注意力隐藏状态:</p><p>$$\tilde{h_{t’}} = \tanh(W_c[c_{t’} : h_{t’}]) $$</p><p>这个注意力向量 $\tilde{h_t}$ 之后会通过一个softmax层来生成预测的概率分布.</p><h3 id="全局注意力机制"><a href="#全局注意力机制" class="headerlink" title="全局注意力机制"></a>全局注意力机制</h3><p><a href="https://arxiv.org/pdf/1508.04025.pdf" target="_blank" rel="noopener">Luong  et  al. (2015)</a>提出了两种注意力机制的变种：全局（global）和局部（local）注意力机制。区别在于“注意力”是放在所有源位置或仅放置在少数源位置。</p><blockquote><p>The idea of a global attentional model is to consider all the hidden states of the encoder when deriving the context vector $c_t$.</p></blockquote><p><img src="/images/global_attention.png" alt="" title="image from: lLuong  et  al. (2015)"><br>两种注意力机制区别就在于如何生成背景向量$c_{t’}$.</p><p>Luong  et  al. (2015) 给出了几种打分函数的计算</p><p>$$<br>\begin{aligned}<br>    score_{dot}(t’ t) &amp;= s^\top_{t’}h_t \\<br>    score_{general}(t’ t) &amp;= s^\top_{t’} W_\alpha h_t, \\<br>    score_{concat}(t’ t) &amp;= v^\top_\alpha \tanh (W_\alpha[s_{t’} : h_t])<br>\end{aligned}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意力机制&quot;&gt;&lt;a href=&quot;#注意力机制&quot; class=&quot;headerlink&quot; title=&quot;注意力机制&quot;&gt;&lt;/a&gt;注意力机制&lt;/h2&gt;&lt;p&gt;注意力机制就是为了解决机器翻译中为不同的对应词分配权重的提出的 &lt;a href=&quot;https://arxiv.org/abs/1409.0473&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bahdanau, D., Cho, K., &amp;amp; Bengio, Y. (2014)&lt;/a&gt;。以英语 - 法语翻译为例，给定一对英语输入序列“They”、“are”、“watching”、“.”和法语输出序列“Ils”、“regardent”、“.”。解码器可以在输出序列的时间步 1 使用更集中编码了“They”、“are”信息的背景变量来生成“Ils”，在时间步 2 使用更集中编码了“watching”信息的背景变量来生成“regardent”，在时间步 3 使用更集中编码了“.”信息的背景变量来生成“.”。这看上去就像是在解码器的每一时间步对输入序列中不同时间步编码的信息分配不同的注意力。&lt;br&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Efficient Programming in Java - A preview of Algorithms and Data Structures</title>
    <link href="http://shukebeta.me/NOTE-data-structures-efficient-programming/"/>
    <id>http://shukebeta.me/NOTE-data-structures-efficient-programming/</id>
    <published>2018-06-25T16:00:00.000Z</published>
    <updated>2018-09-19T04:08:46.851Z</updated>
    
    <content type="html"><![CDATA[<p>Resource and Reference:</p><ul><li>CS61B Berkeley - Josh Hug</li><li>Algorithms Princeton - ROBERT SEDGEWICK, KEVIN WAYNE</li></ul><p>效率来源两个方面:</p><ol><li>编程成本: 开发程序需要多长时间？代码是否容易阅读，修改和维护（大部分成本来自维护和可扩展性）？</li><li>运行成本: 程序需要多长时间运行 (Time complexity)？ 需要多少内存 (Space complexity)？<a id="more"></a><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><blockquote><p>Module: A set of methods that work together as a whole to perform some task or set of related tasks.<br>Encapsulated: A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p></blockquote></li></ol><h2 id="API’s"><a href="#API’s" class="headerlink" title="API’s"></a>API’s</h2><blockquote><p>An API(Application Programming Interface) of an ADT is the list of constructors and methods and a short description of each.</p></blockquote><p>API 包括语法规范和语义规范</p><ul><li>编译器确认语法符合要求</li><li>测试帮助确认语义描述是否正确<ul><li>一般都是用英文写的(可能包含使用例子)</li></ul></li></ul><h3 id="ADT’s"><a href="#ADT’s" class="headerlink" title="ADT’s"></a>ADT’s</h3><p>Abstract Data Structures 是由其行为属性定义的抽象类型, 跟如何实现无关.</p><p>三种方式实现<code>Stack</code>的<code>push(Item x)</code>:</p><ol><li><p>使用 extension 以借用<code>LinkedList&lt;Item&gt;</code>的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtensionStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        add(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>委托模式<strong>Delegation</strong>， 生成<code>Linked List</code>并调用其方法来达到目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegationStack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Item&gt; L = <span class="keyword">new</span> LinkedList&lt;Item&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        L.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类似方法2, 只是这里可以利用任何实现了<code>List</code>接口的类, 如<code>Linked List, ArrayList</code>, 等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackAdapter</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List L;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackAdapter</span><span class="params">(List&lt;Item&gt; worker)</span> </span>&#123;</span><br><span class="line">        L = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        L.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>Delegation vs Extension: Extension 一般是基于对父类有比较清楚的了解认知下才会使用。此外，扩展基本上等于在说明正在扩展的类与被扩展类是相似的。如果两个类无法看做是同属的, 那么就用委托模式。</p><p>Views: 通过视图进行的更改会影响底层对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Create an ArrayList. */</span></span><br><span class="line">List&lt;String&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">/** Add some items. */</span></span><br><span class="line">L.add(“at”); L.add(“ax”); …</span><br><span class="line">List&lt;String&gt; SL = l.subList(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">/** Mutate that thing. */</span></span><br><span class="line">SL.set(<span class="number">0</span>, “jug”);</span><br></pre></td></tr></table></figure></p><h2 id="Asymptotic-Analysis"><a href="#Asymptotic-Analysis" class="headerlink" title="Asymptotic Analysis"></a>Asymptotic Analysis</h2><p>Care about what happens for very large <code>N</code> (asymptotic behavior). We want to consider what types of algorithms would best handle scalability - Algorithms that scale well have better asymptotic runtime behavior.</p><p>Simplification Summary</p><ol><li>Only consider the worst case.</li><li>Pick a representative operation (aka: cost model)</li><li>Ignore lower order terms</li><li>Ignore multiplicative constants.</li></ol><p>Simplified Analysis Process</p><ol><li>Choose cost model (representative operation)</li><li>Figure out the order of growth for the count of representative operation by either:<ul><li>Making an exact count, and discarding unnecessary pieces<ul><li>Only consider the worst case.</li><li>Ignore lower order terms</li><li>Ignore constants.</li></ul></li><li>Or, using intuition/inspection to determine orders of growth.</li></ul></li></ol><h3 id="Big-Theta"><a href="#Big-Theta" class="headerlink" title="Big Theta"></a>Big Theta</h3><p>Formalizing Order of Growth: Suppose a function $R(N)$ with order of growth $f(N)$, this is represented as $R(N) \in \Theta(f(N))$ in notation. Means that there exists positive constants $k_1, k_2$ such that: $$k_1⋅f(N)≤R(N)≤k_​2⋅f(N),$$ for all values of $N$ greater than some $N_0$(a very large N).</p><p>Procedure:</p><ul><li>Given a piece of code, express its runtime as a function $R(N)$<ul><li>$N$ is some <strong>property</strong> of the input of the function. Oftentimes, $N$ represents the size of the input</li></ul></li><li>Rather than finding $R(N)$ exactly, instead care about the order of growth of $R(N)$.</li><li>One approach (not universal):<ul><li>Choose a representative operation</li><li>Let $C(N)$ = count of how many times that operation occurs, as a function of $N$.</li><li>Determine order of growth $C(N) \in \Theta(f(N))$</li><li>Often (but not always) consider the worst case count.</li><li>If operation takes constant time, then $R(N) \in \Theta(f(N))$</li></ul></li></ul><p>在 Big Theta 的范畴内，对于涉及 logarithm 的情况，底数并不重要，任何底数都是等价的：<br>Binary search: $\Theta(\log N)$ 直接忽略底数符号。<br>Selection sort: $\Theta(N^2)$<br>Merge two sorted array (Merge Sort): $\Theta(N)$</p><p>用 merge sort 加速 selection sort - 把 selection sort 递归地平分, 总共能分解出$\log_2N$个 merge sorts, 伪代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If the list is size 1:</span><br><span class="line">    return</span><br><span class="line">else:</span><br><span class="line">    Mergesort the left half</span><br><span class="line">    Mergesort the right half</span><br><span class="line">    Merge the results</span><br></pre></td></tr></table></figure></p><p>Total runtime is $≈Nk$, where $k = \log_2(N)$ is the number of levels, overall runtime is $\Theta(N \log N)$.<br>$N^2$ vs. $N \log N$ is an enormous difference. Going from $N\log N$ to $N$ is nice, but not a radical change.</p><p>Useful math:<br>$1 + 2 + 3 + … + N = N * (N + 1) / 2 = \Theta(N^2)$<br>$1 + 2 + 4 + … + N = 2N - 1 = \Theta(N)$</p><p>To estimate a discrete sum, replace the sum with an integral, and use calculus:<br>$1 + 2 + 3 + … + N = \sum_{i=1}^{N} i \sim \int_{x=1}^N x dx \sim \frac{1}{2}(N^2)$</p><p>$1^k + 2^k + … + N^k = \sum_{i=1}^{N} i^k \sim \int_{x=1}^N x^k dx \sim \frac{1}{k+1}(N^{k+1})$</p><p>$1 + 1/2 + 1/3 + … + 1/N = \sum_{i=1}^{N} i^{-1} \sim \int_{x=1}^N x^{-1} dx \sim \ln N$</p><p>3-sum triple loop, $\sum_{i=1}^{N}\sum_{j=1}^{N}\sum_{k=1}^{N} 1 \sim \int_{x=1}^N\int_{y=x}^N\int_{z=y}^N dz dy dx \sim \frac{1}{6}N^3$</p><h3 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h3><p>Big Theta expresses the exact order of as a function of the input size. However, if the runtime depends on more than just the size of the input, then we must qualify our statements into different cases before using Big Theta.</p><p>Big O: $R(N) \in O(f(N))$, means that there exists positive constants $k_2$, such that: $R(N) \leq k_2 \cdot f(N)$ for all values of $N$ greater than some $N_0$(a very large $N$). This is a looser condition than Big Theta since Big O does not care about the lower bound, thus it is less informative than Big Theta.</p><p>To summarize the usefulness of Big O:</p><ul><li>It allows us to make simple statements without case qualifications, in cases where the runtime is different for different inputs.</li><li>Sometimes, for particularly tricky problems, we (the computer science community) don’t know the exact runtime, so we may only state an upper bound.</li><li>It’s a lot easier to write proofs for Big O than Big Theta, like we saw in finding the runtime of mergesort in the previous chapter. This is beyond the scope of this course.</li></ul><p>类似的也可以定义一个<strong>下限</strong>概念 - Big Omega ($\Omega$)， 一般用于表明一个问题的难度有多大。</p><p><img src="/images/three_Asymptotics.png" alt="" title="Three Big letters. image from: https://joshhug.gitbooks.io/"></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><blockquote><ul><li>Big O is an upper bound (“less than or equals”)</li><li>Big Omega is a lower bound (“greater than or equals”)</li><li>Big Theta is both an upper and lower bound (“equals”)</li><li>Big O does NOT mean “worst case”. We can still describe worst cases using Big Theta</li><li>Big Omega does NOT mean “best case”. We can still describe best cases using Big Theta</li><li>Big O is sometimes colloquially used in cases where Big Theta would provide a more precise statement<br>– from: <a href="https://joshhug.gitbooks.io/" target="_blank" rel="noopener">https://joshhug.gitbooks.io/</a></li></ul></blockquote><h2 id="Amortized-Analysis"><a href="#Amortized-Analysis" class="headerlink" title="Amortized Analysis"></a>Amortized Analysis</h2><p>平摊分析</p><p>假如有两种交税方式：</p><ol><li>每天付 3 金币</li><li>每次付的金币呈指数级增长，但通知付款频率呈指数级下降<ul><li>第1天：付 1</li><li>第2天：付 2 (累计 3)</li><li>第4天：付 4 (累积 7)</li><li>第8天：付 8 (累积 15)</li></ul></li></ol><p>哪种付的钱比较少？<br>第二种比较划算，本质上等同于每天付 2，就是<strong>amortized constant</strong>。</p><p>A more rigorous examination of amortized analysis is done here, in three steps:</p><ol><li>Pick a cost model (like in regular runtime analysis)</li><li>Compute the average cost of the i’th operation</li><li>Show that this average (amortized) cost is bounded by a constant.</li></ol><p>类似的应用在<a href="/NOTE-CS61B-data-structures-07-java-array-based-list#数组扩容">Array list 扩容</a>中提到的 geometric resizing 方法(实际也是Python list 使用的方法)有体现, 所以使用一个因数来扩容数组, 可以让 ArrayList 的 <code>add</code>操作变为 amortized constant time.</p><p>总结</p><blockquote><ul><li>Amortized analysis provides a way to prove the average cost of operations.</li><li>If we chose $a_i$ such that $\Phi_i$ is never negative and $a_i$ is constant for all $i$, then the amortized cost is an upper bound on the true cost.<br>– from: <a href="https://joshhug.gitbooks.io/" target="_blank" rel="noopener">https://joshhug.gitbooks.io/</a></li></ul></blockquote><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>Bit. 0 or 1.<br>Byte. 8 bits.<br>Megabyte (MB). 1 million or $2^20$ bytes.<br>Gigabyte (GB). 1 billion or $2^30$ bytes.<br>64-bit machine. We assume a 64-bit machine with 8 byte pointers (References).<br>・Can address more memory.<br>・Pointers use more space (some JVMs “compress” ordinary object pointers to 4 bytes to avoid this cost).</p><h3 id="Typical-memory-usage-for-primitive-types-and-arrays"><a href="#Typical-memory-usage-for-primitive-types-and-arrays" class="headerlink" title="Typical memory usage for primitive types and arrays"></a>Typical memory usage for primitive types and arrays</h3><p>primitive types (bytes):<br><code>boolean</code> 1<br><code>byte</code> 1<br><code>char</code> 2<br><code>int</code> 4<br><code>float</code> 4<br><code>long</code> 8<br><code>double</code> 8</p><p>for one-dimensional arrays (bytes):<br><code>char[]</code> 2N + 24<br><code>int[]</code> 4N + 24<br><code>double[]</code> 8N + 24</p><h3 id="Typical-memory-usage-for-objects-in-Java"><a href="#Typical-memory-usage-for-objects-in-Java" class="headerlink" title="Typical memory usage for objects in Java"></a>Typical memory usage for objects in Java</h3><p>Object overhead. 16 bytes.<br>Reference. 8 bytes.<br>Padding. Each object uses a multiple of 8 bytes.<br><img src="/images/string_memory.png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part1/"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Resource and Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CS61B Berkeley - Josh Hug&lt;/li&gt;
&lt;li&gt;Algorithms Princeton - ROBERT SEDGEWICK, KEVIN WAYNE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效率来源两个方面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编程成本: 开发程序需要多长时间？代码是否容易阅读，修改和维护（大部分成本来自维护和可扩展性）？&lt;/li&gt;
&lt;li&gt;运行成本: 程序需要多长时间运行 (Time complexity)？ 需要多少内存 (Space complexity)？
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
      <category term="algs4" scheme="http://shukebeta.me/tags/algs4/"/>
    
  </entry>
  
  <entry>
    <title>Java 语法和特性</title>
    <link href="http://shukebeta.me/NOTE-data-structures-java-other-syntaxes/"/>
    <id>http://shukebeta.me/NOTE-data-structures-java-other-syntaxes/</id>
    <published>2018-05-28T23:00:00.000Z</published>
    <updated>2018-07-29T19:27:02.647Z</updated>
    
    <content type="html"><![CDATA[<p>Java 高级语法。<br><a id="more"></a></p><h2 id="Extends-Casting-Higher-Order-Functions"><a href="#Extends-Casting-Higher-Order-Functions" class="headerlink" title="Extends, Casting, Higher Order Functions"></a>Extends, Casting, Higher Order Functions</h2><p>定义接口之间的层次关系可以使用<code>implement</code>, <code>SLList&lt;xxx&gt; implements List61B&lt;xxx&gt;</code>. 但假如我们想要定义class之间的层次关系呢？</p><p>假设要构建一个<code>RotatingSLList</code>，它具有与<code>SLList</code>相同的功能，如<code>addFirst, size</code>等，但是需要额外的<code>rotateRight</code>操作将最后一项放到列表的前面，因为继承允许子类重用已经定义的类中的代码。所以让<code>RotatingSLList</code>类从<code>SLList</code>继承部分代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><code>RotatingSLList</code>“是一种”<code>SLList</code>, <code>extends</code>可以让我们继承<code>SLList</code>的原始功能，并能修改或添加其他功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The rotateRight method  takes in an existing list,</span></span><br><span class="line"><span class="comment">    and rotates every element one spot to the right,</span></span><br><span class="line"><span class="comment">    moving the last item to the front of the list.</span></span><br><span class="line"><span class="comment">    For example, input [5, 9, 15, 22] should return [22, 5, 9, 15].</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Item x = removeLast();</span><br><span class="line">    addFirst(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>extends</code>, 子类<strong>继承</strong>父类的所有成员，成员包括：</p><ul><li>所有实例和静态变量</li><li>所有方法</li><li>所有嵌套类</li></ul><p>但注意，构造函数不继承，并且私有成员不能被子类直接访问。</p><p>上面的例子使用父类的<code>removeLast()</code>把最后的元素直接丢弃了，但假如有一个子类<code>VengefulSLList</code>想保留被丢弃的元素呢? 考虑到子类可以直接override父类的成员, 可以override父类的<code>removeLast</code>, 通过添加一个实例变量来追踪所有已删除的元素.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    SLList&lt;Item&gt; deletedItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deleteItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = <span class="keyword">super</span>.removeLast();</span><br><span class="line">        deletedItems.addLast(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Prints deleted items. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       deletedItems.print();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Constructors-Are-Not-Inherited"><a href="#Constructors-Are-Not-Inherited" class="headerlink" title="Constructors Are Not Inherited"></a>Constructors Are Not Inherited</h3><blockquote><p>Java要求所有子类的构造函数必须先调用其某一超类的构造函数。<br>– <a href="https://docs.oracle.com/javase/tutorial/java/IandI/super.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/IandI/super.html</a></p></blockquote><p>因为逻辑上，如果作为基础的超类没有构建，那么子类的构建的无从谈起。完整的子类构造函数应该是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">// 第一行</span></span><br><span class="line">    deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之前的例子没有<code>super();</code>也可以通过编译，是因为Java会自动为我们调用超类的<strong>无参数</strong>构造函数。</p><p>具体分情况考虑：</p><ol><li>编译器会自动为任何没有构造函数的类提供一个无参数的默认构造函数：这个默认构造函数将调用其超类的（accessible）无参构造函数。</li><li><p>如果子类构造函数没有指定要调用哪个超类构造函数：则编译器将自动调用超类的可访问的<strong>无参数</strong>构造函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果其超类有<strong>有参数</strong>构造函数，但没有无参数构造函数，那么编译出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">(String s)</span> </span>&#123; &#125; &#125;</span><br></pre></td></tr></table></figure><p>此时要在子类构造函数第一行添加<code>super(s)</code></p></li><li><p>如果超类的无参数构造函数是不可访问的，那么编译出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; <span class="function"><span class="keyword">private</span> <span class="title">Base</span><span class="params">()</span> </span>&#123; &#125; &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果没有显式的超类，那么就调用隐式的超类<code>Object</code>的无参构造函数。</p></li></ul></li></ol><p>Constructor Chaining：当子类构造函数调用其父类的构造函数时（无论是显式还是隐式调用），可以认为有一链式的连续调用构造函数，一直到<code>Object</code>的构造函数</p><h3 id="The-Object-Class"><a href="#The-Object-Class" class="headerlink" title="The Object Class"></a>The Object Class</h3><p>Java中的每个类都是 <strong><code>Object</code></strong> class的后代，或者扩展了Object类。即使在类中没有显式的<code>extends</code>仍然隐式地继承了<code>Object</code>。也就是所有 classes 都继承了 Object class 提供的方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">Class&lt;?&gt; <span class="title">getClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span></span></span><br><span class="line"><span class="function">-- https:<span class="comment">//docs.oracle.com/javase/8/docs/api/java/lang/Object.html</span></span></span><br></pre></td></tr></table></figure></p><p><code>==</code>检查两个变量是否引用同一个对象（检查内存地址位）; <code>.equals()</code>默认是等同于<code>==</code>, 但不同的类可能会通过 override 重写它的功能(如<code>Array.equals()</code>就是重写为检查数组内容是否相同). 当override <code>.equals()</code>时，注意：</p><ol><li>必须体现 equivalence relation<ul><li>reflexive: x.equals(x) is true</li><li>symmetric: x.equals(y) IFF y.equals(x)</li><li>transitive: x.equals(y) and y.equals(z) implies x.equals(z)</li></ul></li><li>要 override 原本的<code>.equals()</code>，必须接收一个 Object 参数</li><li>必须 consistent：假如<code>x.equals(y)</code>, 那么只要<code>x</code>和<code>y</code>保持不变, 那么<code>x</code>继续等于<code>y</code>.</li><li><code>null</code>永远非真: <code>x.equals(null)</code> 一定是<code>false</code></li></ol><blockquote><p>Interfaces don’t extend Object.<br>– <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.2" target="_blank" rel="noopener">http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.2</a></p></blockquote><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>封装是面向对象编程的基本原则之一，也是程序员处理复杂性一个方法。管理复杂性是编写大型程序时必须面对的主要挑战之一。</p><p>对抗复杂性的一些工具包括:</p><ul><li>Hierarchical abstraction: 创建一个个具有明确的 abstraction barriers 的抽象层<ul><li><strong>Abstraction Barriers</strong>：使用<code>private</code>, 保证对象内部不能被查看, 确保底层的复杂性不会暴露给外部世界。</li></ul></li><li>“Design for change” (D. Parnas)<ul><li>Organize program around objects.</li><li>Let objects decide how things are done.</li><li><strong>Hide information</strong> others don’t need.</li></ul></li></ul><p>大概的想法都是 - 程序应该被构建成模块化，可互换的片段，可以在不破坏系统的情况下进行交换。</p><p>封装就是构建在这种对外部隐藏信息的概念上。以细胞为类比：细胞内部可能非常复杂，由染色体，线粒体，核糖体等组成，但它完全被封装在一个单一模块中 - 抽象了内部的复杂性。</p><blockquote><p>In computer science terms, a module can be defined as a set of methods that work together as a whole to perform a task or set of related tasks. Now, if the implementation details of a module are kept internally hidden and the only way to interact with it is through a documented interface, then that module is said to be encapsulated.</p></blockquote><h3 id="Type-Checking"><a href="#Type-Checking" class="headerlink" title="Type Checking"></a>Type Checking</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    VengefulSLList&lt;Integer&gt; vsl = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;(<span class="number">9</span>);</span><br><span class="line">    SLList&lt;Integer&gt; sl = vsl; <span class="comment">// 超类包含子类</span></span><br><span class="line">    <span class="comment">//sl dynamic type is VengefulSLList</span></span><br><span class="line">    sl.addLast(<span class="number">50</span>);</span><br><span class="line">    sl.removeLast(); <span class="comment">// 根据 dynamic type 选择 VengefulSLList 的 removeLast</span></span><br><span class="line">    sl.printLostItems(); <span class="comment">//编译不过, 因为编译时检查的是 static type</span></span><br><span class="line">    VengefulSLList&lt;Integer&gt; vsl2 = sl; <span class="comment">// 编译不过, 子类无法包含超类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Expressions 是 compile-time types (static), 使用<code>new</code>的表达式具有指定的 compile-time types:</p><ul><li><code>SLList&lt;Integer&gt; sl = new VengefulSLList&lt;Integer&gt;();</code>, 表达式右边 compile-time types 是<code>VengefulSLList</code>。编译器检查并保证<code>VengefulSLList</code>一定也是<code>SLList</code>，因此允许此赋值.</li><li><code>VengefulSLList&lt;Integer&gt; vsl = new SLList&lt;Integer&gt;();</code>, 表达式右边 compile-time types 是<code>SLList</code>。编译器检查, 因为<code>SLList</code>并不一定是<code>VengefulSLList</code>，故编译报错.</li></ul><p>Method calls have compile-time types equal to their declared type.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123; ... &#125;</span><br><span class="line">Poodle frank = <span class="keyword">new</span> Poodle(<span class="string">"Frank"</span>, <span class="number">5</span>);</span><br><span class="line">Poodle frankJr = <span class="keyword">new</span> Poodle(<span class="string">"Frank Jr."</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">Dog largerDog = maxDog(frank, frankJr);</span><br><span class="line">Poodle largerPoodle = maxDog(frank, frankJr); <span class="comment">// 编译不过! RHS compile-time type is Dog</span></span><br></pre></td></tr></table></figure></p><p>编译器报错, 因为普遍意义的 Dog object 并不总是贵宾犬, 虽然此时我们都知道这里的”狗”肯定是指贵宾犬. 有没有办法让编译器理解这种特殊情况呢?</p><h3 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h3><p>通过 casting, 可以告诉编译器一个表达式有某个特定的 compile-time types.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Poodle largerPoodle = (Poodle) maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure></p><p>编译通过, 右边 compile-time type 转换为 <code>Poodle</code>.</p><blockquote><p>Caution: Casting is a powerful but dangerous tool. Essentially, casting is telling the compiler not to do its type-checking duties - telling it to trust you and act the way you want it to.</p></blockquote><h3 id="Inheritance-Cheatsheet"><a href="#Inheritance-Cheatsheet" class="headerlink" title="Inheritance Cheatsheet"></a>Inheritance Cheatsheet</h3><p>VengefulSLList extends SLList means VengefulSLList “is-an” SLList, and inherits all of SLList’s members:<br>总结 Inheritance 的一些要点:</p><ul><li>当子类<code>VengefulSLList</code> <code>extends</code> 超类<code>SLList</code>时, 意味着<code>VengefulSLList</code>也”是”<code>SLList</code>, 并继承<code>SLList</code>的所有成员:<ul><li>Variables, methods, nested classes</li><li>除了 constructors: Subclass constructors 必须先调用 superclass constructor; 通过 <code>super</code> 调用 overridden superclass methods 和 constructors.</li></ul></li></ul><p>调用 overridden methods 遵循两个规则:</p><ul><li>编译器只允许与 static type 符合的行为.</li><li>对于 overridden methods, 调用是基于 dynamic type</li><li>可以使用 casting 来规避 compiler type checking.</li></ul><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><blockquote><p>A higher order function is a function that treats other functions as data.</p></blockquote><p>在 Java 7 及之前的版本, memory boxes (variables) 不能包含指向 functions 的 pointers, 也就是无法给 functions 指定 types. 所以不能像Python一样直接把 function 作为参数传递到另一个 function 中。只能借用 interface：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Returns ten times the argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶方法</span></span><br><span class="line">System.out.println(do_twice(<span class="keyword">new</span> TenX(), <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>Java 8 引入<code>java.util.Function&lt;T, R&gt;</code>接口, 可以接受存储一个函数，<code>&lt;T, R&gt;</code>对应该函数的参数和返回对象</p><h2 id="Subtype-Polymorphism"><a href="#Subtype-Polymorphism" class="headerlink" title="Subtype Polymorphism"></a>Subtype Polymorphism</h2><blockquote><p>多态（polymorphism），是指指相同的消息给予不同的对象会引发不同的动作。</p><ul><li>动态多态（dynamic polymorphism）：通过类继承机制和虚函数机制生效于运行期。可以优雅地处理异质对象集合，只要其共同的基类定义了虚函数的接口。<ul><li>在面向对象程序设计中，多态一般是指子类型多态（Subtype polymorphism）或包含多态（inclusion polymorphism）。一般是通过某种可代换性（ substitutability）与另一个数据类型（超类型，supertype）相关的数据类型，这意味着为在这个超类型的元素上运算而写计算机程序也可以在子类型的元素上运算。</li></ul></li><li>静态多态（static polymorphism）：模板也允许将不同的特殊行为和单个泛化记号相关联，由于这种关联处理于编译期而非运行期，因此被称为“静态”。可以用来实现类型安全、运行高效的同质对象集合操作。C++ STL不采用动态多态来实现就是个例子。<ul><li>非参数化多态或译作特设多态（Ad-hoc polymorphism）：<ul><li>函数重载（Function Overloading）</li><li>运算符重载（Operator Overloading）</li><li>带变量的宏多态（macro polymorphism）</li></ul></li><li>参数化多态（Parametric polymorphism）：把类型作为参数的多态。在面向对象程序设计中，这被称作泛型编程。</li></ul></li></ul></blockquote><blockquote><p>子类型反映了类型（即面向对象的接口）之间的关系；而继承反映了一类对象可以从另一类对象创造出来，是语言特性的实现。因此，子类型也称接口继承；继承称作实现继承。</p></blockquote><h3 id="Call-Back"><a href="#Call-Back" class="headerlink" title="Call Back"></a>Call Back</h3><p>Java接口提供了回调(call back)的能力:</p><ul><li>有时一个函数需要调用另一个尚未写好的 helper function, 这时这个 helper function 就是 <code>call back</code>。比如“排序函数”需要“比较函数”的帮助。</li><li>不同语言对于回调有不同的处理方式<ul><li>Python, Perl, ML, Javascript 用函数传递 - <a href="#Higher-Order-Functions">first-class functions, Higher Order Functions</a></li><li>Java 选择把函数包含在一个接口中</li><li>C: function pointers.</li><li>C++: class-type functors.</li><li>C#: delegates.</li></ul></li></ul><p>比如Java的 Insertion Sort 可以排序任何类型的数据<code>Insertion.sort(a);</code>, <code>a</code>可以是<code>Double, String, java.io.File</code>数组. 在这里Callback就是对一个可执行代码的引用:</p><blockquote><p>・Client passes array of objects to <code>sort()</code> function.<br>・The <code>sort()</code> function calls back object’s <code>compareTo()</code> method as needed.</p></blockquote><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>Java的对象不能直接使用<code>&gt;, &lt;, =</code>进行比较. 在Python或C++中，当应用于不同对象类型时，比较运算符可以重新定义，但Java不支持。但可以借用接口继承，Java提供了一个<code>Comparable</code>接口，包含一个<code>compareTo</code>方法, 以保证任何实现该接口的类可以和其他同类做比较：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Return negative if this &lt; o.</span></span><br><span class="line"><span class="comment">    Return 0 if this equals o.</span></span><br><span class="line"><span class="comment">    Return positive if this &gt; o.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当有class需要与其他class比较时, 就实现这个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog uddaDog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Comparable</code>定义了类用于比较的自然顺序（Natural order）, 返回的是三种结果<code>负整数, 0, 正整数</code>, 分别对应小于, 等于和大于. <code>Insertion.sort()</code>不需要知道要排序的数组类型, 因为它直接调用数组成员自带的<code>compareTo</code>方法. Java的<code>Integer, Double, String, Date, File</code>数据类型都扩展了<code>Comparable</code>接口。</p><blockquote><p>A comparable object is capable of comparing itself with another object</p></blockquote><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p>如果我们想用灵活的不同方式对类进行比较比较呢？比如对音乐库里的歌曲根据艺术家、歌名等排序，二者都是<code>String</code>, 但一个类里面的<code>Comparable</code>只能有一个, 所以仅仅靠<code>Comparable</code>接口不够. 在Python可以使用HOF，编写新的比较函数，然后直接以参数形式传递该函数。</p><p>Java的方案是使用<code>Comparator</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比如Java系统自带的sort:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">・Create Comparator object.</span></span><br><span class="line"><span class="comment">・Pass as second argument to Arrays.sort().</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String[] a;</span><br><span class="line">...</span><br><span class="line">Arrays.sort(a); <span class="comment">// uses natural order</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// uses alternate order defined by Comparator&lt;String&gt; object</span></span><br><span class="line">Arrays.sort(a, String.CASE_INSENSITIVE_ORDER);</span><br></pre></td></tr></table></figure></p><p><code>insertion sort</code>的解决思路类似:<br>・Use Object instead of <code>Comparable</code>.<br>・Pass <code>Comparator</code> to <code>sort()</code> and <code>less()</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a, Comparator comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(comparator, a[j], a[j-<span class="number">1</span>]); j--)</span><br><span class="line">            exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparator c, Object v, Object w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.compare(v, w) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Object swap = a[i]; a[i] = a[j]; a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要自定义时, 根据需要在class内部编写实现<code>Comparator</code>接口的(嵌套)类, 并实现<code>compare</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_NAME = <span class="keyword">new</span> ByName();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_SECTION = <span class="keyword">new</span> BySection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> section;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 直接利用 String 已经定义好的 compareTo</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v.name.compareTo(w.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BySection</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v.section - w.section;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在其他函数中调用时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student s1;</span><br><span class="line">Student s2;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (Student.BY_NAME.compare(s1, s2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Arrays.sort(a, Student.BY_NAME);</span><br><span class="line">Arrays.sort(a, Student.BY_SECTION);</span><br></pre></td></tr></table></figure></p><p>同理若需要增加其他判断标准，就创建新的实现<code>Comparator</code>的 class.</p><p><code>Comparator</code>是可以将两个对象进行比较的第三方对象。由于只有一个<code>compareTo</code>的空间，如果想要支持不同方式进行比较，则要使用不同的<code>Comparator</code>。</p><blockquote><p>A Comparator is its own definition of how to compare two objects, and can be used to compare objects in a way that might not align with the natural ordering.</p></blockquote><h2 id="Abstract-Data-Types-ADTS"><a href="#Abstract-Data-Types-ADTS" class="headerlink" title="Abstract Data Types (ADTS)"></a>Abstract Data Types (ADTS)</h2><p><code>ArrayDeque</code>和<code>LinkedListDeque</code>都是实现<code>deque</code>这个接口，<code>deque</code>只是罗列了一些 methods，也即是一种合约，保证会实现的行为。而这些方法的具体实现则是由<code>ArrayDeque</code>和<code>LinkedListDeque</code>完成。从概念上讲，<code>deque</code>就是一种抽象的数据类型，只说会有什么行为，但不体现这些行为的具体实现方式，所以是抽象的。</p><h3 id="Java-Libraries"><a href="#Java-Libraries" class="headerlink" title="Java Libraries"></a>Java Libraries</h3><p>Java有一些内置的抽象数据类型，打包在Java库中。 三个最重要的ADTs来自<code>java.util</code>库：</p><ul><li>List 列表：一个有序的元素集合，如<code>ArrayList</code></li><li>Set 集合：元素严格唯一（不重复）的(无序)集合，如<code>HashSet</code></li><li>Map 映射：A collection of <code>Key - value</code> 映射, <code>key</code>是唯一的。通过<code>key</code>访问<code>value</code>，如<code>HashMap</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** takes in a String inputFileName</span></span><br><span class="line"><span class="comment">and puts every word from the input file into a list*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getWords</span><span class="params">(String inputFileName)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; lst = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    In in = <span class="keyword">new</span> In();</span><br><span class="line">    <span class="keyword">while</span> (!in.isEmpty()) &#123;</span><br><span class="line">        lst.add(in.readString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** takes in a List&lt;String&gt; and counts how many unique words there are in the file.*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUniqueWords</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; ss = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : words) &#123;</span><br><span class="line">           ss.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ss.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** takes in a List&lt;String&gt; targets and a List&lt;String&gt; words,</span></span><br><span class="line"><span class="comment">and finds the number of times each target word appears in the word list.*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">collectWordCount</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String t: target) &#123;</span><br><span class="line">        counts.put(s, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String s: words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (counts.containsKey(s)) &#123;</span><br><span class="line">            counts.put(word, counts.get(s)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://joshhug.gitbooks.io/hug61b/content/assets/collection_hierarchy.png" alt="" title="Collections represent a group of objects, known as its elements: the white boxes are interfaces. The blue boxes are concrete classes. image from:https://joshhug.gitbooks.io/hug61b/"><br>通过设置环境变量（如<code>CLASSPATH =</code>）让Java编译器/解释器知道去哪里找 libraries。</p><p><code>CLASSPATH</code>：Linux or MacOS, paths are separated by <code>:</code>. In Windows, paths are separated by <code>;</code>.</p><ul><li><code>/home/--/--/javalib/*</code>, 在<code>.class</code>和<code>.jar</code>文件内查找依赖包，用于指定绝对路径。有同名时，会根据环境变量的先后顺序去排序靠前的。</li><li><code>./</code>指当前目录，<code>../</code>指上一层目录，用于指定相对路径。</li><li>也可以指定<code>classpath</code>, 这样系统的<code>CLASSPATH</code>会被忽略: <code>javac -cp ./:/home/stuff/:../ Foo.java</code>, 当有重名时, 选择顺序就是指明的路径顺序（当前目录-stuff目录-上一层目录）</li></ul><p>IntelliJ会忽略<code>CLASSPATH</code>，它会自动调用<code>-cp</code>, 变量是基于当前项目指定的 libraries.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 查看 IntelliJ 使用的 classpath*/</span></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">    URL[] urls = ((URLClassLoader)cl).getURLs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(URL url: urls)&#123;</span><br><span class="line">        System.out.println(url.getFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他ADT"><a href="#其他ADT" class="headerlink" title="其他ADT"></a>其他ADT</h3><p>堆栈 Stacks 和队列 Queues 是两种类似的线性集合。堆栈是后进先出的ADT：元素总是从数据结构的一端添加或删除。队列是先进先出的ADT. 二者都支持以下操作:<br><code>push()</code>: 加入<br><code>peek()</code>: 返回下一个<br><code>poll()</code>: 返回下一个并删除</p><p>Java的<code>Deque</code>(double ended queue, “deck”) 接口融合了堆栈和队列, 支持两端的元素插入和移除.</p><p>优先级队列 priority queue 的每个元素都有一个与之关联的优先级，以决定从队列中元素操作的顺序。</p><h3 id="Abstract-classes"><a href="#Abstract-classes" class="headerlink" title="Abstract classes"></a>Abstract classes</h3><p>Interface:</p><ul><li>除非指定<code>access modifier</code>, 否则所有的方法默认都是<code>public</code> （Java 9 支持 <code>private</code>）</li><li>可以提供变量, 但都是<code>public static final</code>, 也即没有实例变量</li><li>无法实例化</li><li>除非指定为<code>default</code>，否则所有方法均为抽象的</li><li>一个类可以实现多个接口</li><li>根据协议承诺, 实现类必须实现其继承的接口的所有抽象方法; 否则要声明为抽象类.</li></ul><p>Abstract classes 介于接口和 classes 之间。</p><ul><li>方法可以是<code>public</code>或<code>private</code>, 也支持<code>protected</code>和<code>package private</code>.</li><li>支持任何类型的变量</li><li>无法实例化</li><li>除非指定为<code>abstract</code>，否则方法默认是具体的实现</li><li>每个类只能实现一个 Abstract classes</li><li>抽象类不需要实现其继承的接口所有抽象方法</li></ul><p>基本上，接口能做的抽象类都可以做。实际应用中，抽象类通常用于部分地实现接口，在接口和实际的类中间扮演一个中间概念。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(Speed x)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DeluxeModel</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> x;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(Speed x)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">autoPilot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现时, 要 override 所有抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaX</span> <span class="keyword">extends</span> <span class="title">DeluxeModel</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoPilot</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>若不确定用哪种, 就优先考虑接口，以降低复杂性。<br>– <a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html</a></p></blockquote><h2 id="Packages-and-JAR"><a href="#Packages-and-JAR" class="headerlink" title="Packages and JAR"></a>Packages and JAR</h2><p>同样功能的类可能有多种版本, 或者不同类刚好命名相同。通过 packages 来为每个 classes 提供唯一的标识名称，如<code>java.util.</code></p><blockquote><p>A package is a namespace that organizes classes and interfaces.</p></blockquote><p>在IntelliJ的操作：</p><ul><li><p>创建 package：<br>1, File → New Package<br>2, 选择 package name (i.e. “ug.joshh.animal”)</p></li><li><p>给 Package 添加(新) Java 文件：<br>1, 右键 package name<br>2, New → Java Class<br>3, 命名 class, 然后 IntelliJ 会自动把文件放进正确的路径, 并添加 package declaration.</p></li><li><p>移动其他<code>.java</code>文件到 Package<br>1, 在文件顶部声明 <code>package [packagename]</code><br>2, 将文件存储在（移动到）与 package name 对应的文件夹中：如<code>ug.joshh.animal</code> 对应<code>ug/joshh/animal</code>文件路径.</p></li></ul><p>注意, 不存在<code>sub-package</code>这种概念, 即<code>ug.joshh.Animal</code>和<code>ug.joshh.Plant</code>是完全不同的.</p><h3 id="Default-packages"><a href="#Default-packages" class="headerlink" title="Default packages"></a>Default packages</h3><p>没有在文件顶部明确指明 package name 的Java类默认属于 default package 的一部分。</p><p>一般而言, Java文件应该以明确的 package 声明开头以避免将文件留在 default package 中（除非它是一个非常小的示例程序）。因为来自 default package 的代码无法 import，并且可能会意外地在 default package 下创建相同名称的类。</p><h3 id="JAR-Files"><a href="#JAR-Files" class="headerlink" title="JAR Files"></a>JAR Files</h3><p>一般情况下，程序会包含多个<code>.class</code>文件。如果想共享此程序，可以把压缩成一个<code>.jar</code>文件，此<code>.jar</code>文件将包含程序所有<code>.class</code>文件以及其他附加信息。JAR文件就像zip文件一样, 可以将文件解压缩回<code>.java</code>文件。JAR文件并不会加密保护代码.</p><blockquote><p>Creating a JAR File (IntelliJ)</p><ol><li>Go to File → Project Structure → Artifacts → JAR → “From modules with dependencies”</li><li>Click OK a couple of times</li><li>Click Build → Build Artifacts (this will create a JAR file in a folder called “Artifacts”)</li><li>Distribute this JAR file to other Java programmers, who can now import it into IntelliJ (or otherwise)</li></ol></blockquote><h3 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h3><p>cs61b Josh Hug:<br><code>Private</code></p><blockquote><p>Only code from the given class can access private members.</p></blockquote><p><code>Package Private</code></p><blockquote><p>The default access given to Java members if there is no explicit modifier written. Classes that belong in the same package can access, but not subclasses!</p></blockquote><p><code>Protected</code></p><blockquote><p>Classes within the same package and subclasses can access these members, but the rest of the world (e.g. classes external to the package or non-subclasses) cannot! Subtypes might need it, but subtype clients will not.</p></blockquote><p><code>Public</code></p><blockquote><p>Open and promised to the world, once deployed, the public members’ signatures should not change.<br>就像承诺和合同，尽量不要更改，以便用户始终可以（用已有的代码）访问。如果开发者要舍弃某一个<code>Public</code>，一般标识为<code>deprecated</code>.</p></blockquote><p>细节:</p><ol><li><strong>Access is Based Only on Static Types</strong></li><li>接口的方法默认是<code>public</code>的</li></ol><h3 id="Build-Systems"><a href="#Build-Systems" class="headerlink" title="Build Systems"></a>Build Systems</h3><p>可以简单地将文件放入适当的位置，然后通过 Maven, Ant 和 Gradle 等工具使用 Build Systems 来自动设置项目, 省去了手动加载一长串 libraries.</p><h2 id="丰富扩展generics的语法或特性"><a href="#丰富扩展generics的语法或特性" class="headerlink" title="丰富扩展generics的语法或特性"></a>丰富扩展generics的语法或特性</h2><h3 id="Autoboxing"><a href="#Autoboxing" class="headerlink" title="Autoboxing"></a>Autoboxing</h3><p>在Java中调用包含 Generics 的class时，需要提供确切的类型参数。对于每一种 primitive type (<code>byte, short, int, long, float, double, boolean, char</code>)，必须要用其对应的 reference type (<code>Byte, Short, Integer, Long, Float, Double, Boolean, Character</code>) - 也即是 wrapper classes 作为泛型的实际类型参数。虽然声明函数和变量时必须要用 wraper classes，但在实际的数值传递中，对于 primitives 类型的数据，并不需要显式地转换为 reference types。</p><p>因为 Java 有 Autoboxing，可以隐式地在 wrapper/primitives 类型间转换. Java会自动 “box” 和 “unbox” primitive type 和其对应的 reference type 之间的值。也就是说，如果Java期望的是 wrapper classes （如Integer），假如即使接收到的是 int 这样的基本类型，Java也会“autoboxing”这种整数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blah</span><span class="params">(Integer x)</span> </span>&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">blah(x); <span class="comment">// 实际上会转换为 blah(new Integer(20))</span></span><br></pre></td></tr></table></figure></p><p>反过来就是<code>unboxing</code>。</p><p>Autoboxing/Unboxing 注意事项:</p><ul><li>不适用于 array 数组</li><li>有性能负担</li><li>Wrapper types 比 primitive types 占用更多内存: 在大多数现代的系统里，对象的引用地址占用64位，还需要额外的64位开销用于存储动态类型等信息。 更多信息参考 <a href="https://www.javamex.com/tutorials/memory/object_memory_usage.shtml" target="_blank" rel="noopener">Memory usage of Java objects: general guide</a> 或 <a href="http://blog.kiyanpro.com/2016/10/07/system_design/memory-usage-estimation-in-java/" target="_blank" rel="noopener">Memory Usage Estimation in Java</a>.</li></ul><h3 id="Widening"><a href="#Widening" class="headerlink" title="Widening"></a>Widening</h3><p>Java会根据需要在 primitive types 之间自动扩展.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blahDouble</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    System.out.println(“<span class="keyword">double</span>: “ + x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">blahDouble(x); <span class="comment">//等同于 blahDouble((double) x)</span></span><br></pre></td></tr></table></figure></p><p>但如果想从一个 wider type 转换为 narrower type，则必须手动 cast.<br>有关 widening 的更多详细信息，包括哪些类型比其他类型更 wider ，参阅<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html" target="_blank" rel="noopener">官方的Java文档</a>。</p><h3 id="Generic-Methods"><a href="#Generic-Methods" class="headerlink" title="Generic Methods"></a>Generic Methods</h3><p>泛型方法的语法用map数据类型举例. 假如有一个现成的映射数据结构<code>Map61B</code>, 我们需要为她写两个helper methods放在<code>MapHelper</code>里面.</p><p><code>get(Map61B, key)</code>：返回映射中给定key对应的值（如果存在），否则返回null。假如这样写<code>public static V get(Map61B&lt;K, V&gt; map, String key) { ... }</code>会报错. 要将方法声明为泛型，<strong>必须在返回类型前面指定正式的类型参数</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">V <span class="title">get</span><span class="params">(Map61B&lt;K,V&gt; map, K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> map.containsKey(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayMap&lt;Integer, String&gt; isMap = <span class="keyword">new</span> ArrayMap&lt;Integer, String&gt;();</span><br><span class="line">System.out.println(mapHelper.get(isMap, <span class="number">5</span>)); <span class="comment">//Java可以自行推断`isMap`的数据类型.</span></span><br></pre></td></tr></table></figure></p><p><code>maxKey</code>: 返回给定<code>ArrayMap</code>中所有keys的最大值（仅在key可以比较的情况下）。实现时要注意, 不能直接用<code>&lt;,&gt;,==</code>来比较, 因为key不一定是primitives. 需要用<code>Comparable</code>接口的<code>compareTo</code>,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K extends Comparable&lt;K&gt;, V&gt; <span class="function">K <span class="title">maxKey</span><span class="params">(Map61B&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class="line">    List&lt;K&gt; keylist = map.keys();</span><br><span class="line">    K largest = map.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (K k: keylist) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k.compareTo(largest)) &#123;</span><br><span class="line">            largest = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> largest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>K extends Comparable&lt;K&gt;</code> 保证了keys必须实现<code>Comparable</code>接口（也是一个generic接口）, 并可以与其他<code>K</code>进行比较。</p><p>这里没有使用<code>implement</code>, 而是用<code>extends</code>, 这里跟前面的<a href="#Subtype-Polymorphism">polymorphism</a>不同. <code>K extends Comparable&lt;K&gt;</code>是<strong>type upper bounding</strong>, 意味着<code>k</code>必须是一种<code>Comparable</code>, 但不需要具备<code>Comparable</code>的所有方法行为.</p><p>在inheritance的含义中，<code>extends</code>指为子类提供超类的能力. 在generic范畴内, <code>extends</code>只是陈述一个事实：该类是其扩展的类的一个子类, 是加了约束, 而不是赋予能力.</p><h2 id="Immutability"><a href="#Immutability" class="headerlink" title="Immutability"></a>Immutability</h2><blockquote><p>An immutable data type is a data type whose instances cannot change in any observable way after instantiation.</p></blockquote><p>比如<code>String</code>是immutable, <code>Array</code>是mutable.</p><p>防止变量在第一次赋值后被更改</p><ul><li>可以使用<code>final</code>: 在 class constructor 里面, 或者变量初始化时, 给变量赋值一次, 之后就无法再被赋值了.</li><li>要保证immutable不一定要使用<code>final</code>, 有时候也可以用<code>private</code>.</li></ul><p>Immutable data types 因为属性不能改变, 缺点是需要创建一个新对象才能更改属性，优点是：</p><ul><li>可以防止bugs, 并使debugging更容易</li><li>可以信赖对象具有某种行为/特质</li></ul><p>注意：</p><ul><li>将一个引用声明为<code>final</code>并不会保证引用指向的对象是immutable. <code>public final ArrayDeque&lt;String&gt;() deque = new ArrayDeque&lt;String&gt;();</code>变量<code>deque</code>是<code>final</code>的, 仅意味着不能重新被赋值, 但其指向的数组队列对象自身还是可变的.</li><li>使用<code>Reflection API</code>，甚至可能对<code>private</code>变量进行更改</li></ul><h2 id="Throwing-Exceptions"><a href="#Throwing-Exceptions" class="headerlink" title="Throwing Exceptions"></a>Throwing Exceptions</h2><p>当程序出现错误时，假如继续运行下去已经没有意义（或者根本不可能继续），那么我们就想要中断正常的控制流程 - throws an exception。</p><p>比如当想从某<code>ArrayMap</code>中提取某个不存在的键值时, java自动抛出一个<code>implicit exception</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java ExceptionDemo</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ArrayIndexOutOfBoundsException: -<span class="number">1</span></span><br><span class="line">at ArrayMap.get(ArrayMap.java:<span class="number">38</span>)</span><br><span class="line">at ExceptionDemo.main(ExceptionDemo.java:<span class="number">6</span>)</span><br></pre></td></tr></table></figure></p><p>如果想让自己的程序抛出更详细的信息, 可以在程序中加入<code>explicit exception</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    intlocation = findKey(key);</span><br><span class="line">    <span class="keyword">if</span>(location &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> newIllegalArgumentException(<span class="string">"Key "</span> + key + <span class="string">" does not exist in map."</span>\);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values[findKey(key)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$java ExceptionDemo</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Key yolp does not exist in map.</span><br><span class="line">at ArrayMap.get(ArrayMap.java:<span class="number">40</span>)</span><br><span class="line">at ExceptionDemo.main(ExceptionDemo.java:<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>单纯 throw exception 会导致代码崩溃。但是通过 <code>try - catch</code> “捕捉”异常(<code>RuntimeException</code> 是 Java object), 可以防止程序崩溃。</p><p>比如通过捕捉异常, 来引入修正措施: 下面这个代码通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 当狗在生气时, 如果尝试拍拍它，会抛出一个 RuntimeException，</span></span><br><span class="line"><span class="comment">捕捉到 exception 后, 用香蕉来抚慰它. */</span></span><br><span class="line">Dog d = <span class="keyword">new</span> Dog(<span class="string">"Lucy"</span>, <span class="string">"Retriever"</span>, <span class="number">80</span>);</span><br><span class="line">d.becomeAngry();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    d.receivePat();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(</span><br><span class="line">    <span class="string">"Tried to pat: "</span> + e);</span><br><span class="line">    d.eatTreat(<span class="string">"banana"</span>);</span><br><span class="line">&#125;</span><br><span class="line">d.receivePat();</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ java ExceptionDemo</span><br><span class="line">Tried to pat: java.lang.RuntimeException: grrr... snarl snarl</span><br><span class="line">Lucy is a displeased Retriever weighing <span class="number">80.0</span> standard lb units.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ java ExceptionDemo</span><br><span class="line">Tried to pat: java.lang.RuntimeException: grrr... snarl snarl</span><br><span class="line">Lucy munches the banana</span><br><span class="line"></span><br><span class="line">Lucy enjoys the pat.</span><br><span class="line"></span><br><span class="line">Lucy is a happy Retriever weighing <span class="number">80.0</span> standard lb units.</span><br></pre></td></tr></table></figure><p>使用<code>if else</code>来管理异常会让代码变得很乱而难以阅读. 而使用<code>try catch</code>可以为每种类型的 exception 提供不同的应对。使代码像清晰的记述文般铺展开来: 首先，尝试执行所需的操作。然后，捕捉任何错误。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125; ...</span><br></pre></td></tr></table></figure></p><p>好的代码像一个故事, 构建上有一定的美感。这种清晰度使代码的长期维护变得更容易。</p><h3 id="Uncaught-Exceptions-Stack-Trace"><a href="#Uncaught-Exceptions-Stack-Trace" class="headerlink" title="Uncaught Exceptions Stack Trace"></a>Uncaught Exceptions Stack Trace</h3><p>如果 exception 到达堆栈底部后仍未被捕获，程序崩溃，Java 打印出堆栈的跟踪:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException in thread “main”:</span><br><span class="line">at ArrayRingBuffer.peek:<span class="number">63</span></span><br><span class="line">at GuitarString.sample:<span class="number">48</span></span><br><span class="line">at GuitarHeroLite.java:<span class="number">110</span></span><br></pre></td></tr></table></figure></p><p><img src="https://joshhug.gitbooks.io/hug61b/content/assets/callstack.png" alt="" title="image from: https://joshhug.gitbooks.io/hug61b"><br>程序猿可以据此追踪错误路径。</p><h3 id="Checked-vs-Unchecked-Exceptions"><a href="#Checked-vs-Unchecked-Exceptions" class="headerlink" title="Checked vs Unchecked Exceptions"></a>Checked vs Unchecked Exceptions</h3><p>有时候，某些抛出的 exception 无法通过编译，可以理解为这些异常在编译器看来是非常恶心的存在，需要程序猿必须给这些 exception 提供明确的应对处理方案 - 这种叫 checked exception （”must be checked”）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eagle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (today == “Thursday”) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ javac Eagle</span><br><span class="line">Eagle.java:<span class="number">4</span>: error: unreported exception IOException; must be caught or declared to be thrown</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>); &#125;</span><br><span class="line">^</span><br></pre></td></tr></table></figure><p>很明显，Java对此<code>IOException</code>并不满意, 因为<code>IOExceptions</code>是 checked exception, 而这里没有提供应对处理方案。但假如换做<code>RuntimeException</code>就可以编译通过 (虽然在 runtime 时会崩溃).<br><img src="https://joshhug.gitbooks.io/hug61b/content/assets/checked_exceptions.png" alt="" title="image from: https://joshhug.gitbooks.io/hug61b/"><br><code>Errors</code> 和 <code>Runtime Exceptions</code>, 以及它们的子类都是<code>unchecked</code>. 这种异常都是直到运行时才能发现的错误, 它们一般无法从中恢复到正常状态 - 比如代码尝试从数组中获取<code>-1</code>元素，好像就没什么解决办法。</p><p>其余的都是 <code>checked exception</code>, 它们其中大多数都有修正的可能性。例如遇到<code>FileNotFound</code>，可以考虑要求用户重新指定他们想要的文件 (可能是因为错误输入导致的)。</p><p>Java在尽最大努力确保每个程序运行时不会崩溃，所以它不会允许程序留下任何明明可以应对修正却没有被明确地修正的错误。</p><p>两种方法来处理 checked error:</p><ol><li><p><strong>Catch</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (today == “Thursday”) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"psych!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 假如能够应对，尽量用 catch 锁定异常防止其逃逸。</p></li><li><p><strong>Specify</strong>: 如果实在不想在该方法中处理这种异常，可以将责任推迟到别的地方。我们可以指定该方法是危险的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ... <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>); ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后任何其他调用<code>gulgate()</code>的方法也变成危险的了, 它们也需要被处理(同样使用两种方法之一)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// catch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        gulgate();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Averted!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或 specify</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    gulgate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 需要明确异常处理责任人。同时确保调用者知道该方法是危险的！</p></li></ol><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>Java提供了 foreach (enhanced for) 的循环简写语法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayMap&lt;String, Integer&gt; am = <span class="keyword">new</span> ArrayMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : am) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现的关键原理是使用<code>Iterable</code>接口使一个类变成可迭代的: 该接口包含一个<code>iterator()</code>方法用于返回一个<code>Iterator</code>对象。<code>Iterator</code>接口定义<code>Iterator</code>对象和<code>hasNext(), next()</code>方法来进行实际的迭代操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map61B</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Iterable</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> K[] keys;</span><br><span class="line">    <span class="keyword">private</span> V[] values;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keys = (K[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        values = (V[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ptr;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">KeyIterator</span><span class="params">()</span> </span>&#123; ptr = <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (ptr != size); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            K returnItem = keys[ptr];</span><br><span class="line">            ptr = ptr + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不同的数据结构，<code>Iterator</code>有不同的实现方式.</p><p><code>KeyIterator</code>即使是<code>private</code>也可以编译, 因为<code>iterator()</code>在这里是<code>public</code>的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayMap&lt;String, Integer&gt; am = <span class="keyword">new</span> ArrayMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = am.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : am) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了用嵌套类来自定义实现<code>Iterator</code>, 也可以利用数据结构本身的特性. 比如<code>ArrayMap</code>里面刚好包含一个可迭代的数据结构<code>List keys</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;K&gt; keylist = keys();</span><br><span class="line">    <span class="keyword">return</span> keylist.Iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意要点</strong></p><ul><li><code>hasNext()</code>的判断依据是<strong>当前状态下能返回至少一个成员</strong>, 不要混淆为<em>下一次能否返回</em>: 因为迭代时过程中, 每次调用<code>next()</code>之前, java 都会先调用<code>hasNext()</code>.</li><li>实现方法时, 要保证第一次<code>next()</code>返回的是第一个成员.</li></ul><h2 id="总结Java的特性"><a href="#总结Java的特性" class="headerlink" title="总结Java的特性"></a>总结Java的特性</h2><blockquote><ul><li>Packages<ul><li>Good: Organizing, making things package private</li><li>Bad: Specific</li></ul></li><li>Static type checking<ul><li>Good: Checks for errors early , reads more like a story</li><li>Bad: Not too flexible, (casting)</li></ul></li><li>Inheritance.<ul><li>Good: Reuse of code</li><li>Bad: “Is a”, the path of debugging gets annoying, can’t instantiate, implement every method of an interface</li></ul></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 高级语法。&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>Python Digest 之奇技淫巧</title>
    <link href="http://shukebeta.me/python-digest/"/>
    <id>http://shukebeta.me/python-digest/</id>
    <published>2018-05-07T23:00:00.000Z</published>
    <updated>2018-06-29T19:18:48.676Z</updated>
    
    <content type="html"><![CDATA[<p>What you will get from this Python digest:<br>1, Learn advanced python programming.<br>2, Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.<br>3, Practice going from a problem description to a solution, using a series of assignments.</p><a id="more"></a><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a><a href="https://docs.python.org/2/library/operator.html" target="_blank" rel="noopener">Operator</a></h2><h3 id="Emulating-numeric-types"><a href="#Emulating-numeric-types" class="headerlink" title="Emulating numeric types"></a>Emulating numeric types</h3><p>In-place operation: One modifies the data-structure itself<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">object.__iadd__(self, other)</span><br><span class="line">object.__isub__(self, other)</span><br><span class="line">object.__imul__(self, other)</span><br><span class="line">object.__imatmul__(self, other)</span><br><span class="line">object.__itruediv__(self, other)</span><br><span class="line">object.__ifloordiv__(self, other)</span><br><span class="line">object.__imod__(self, other)</span><br><span class="line">object.__ipow__(self, other[, modulo])</span><br><span class="line">object.__ilshift__(self, other)</span><br><span class="line">object.__irshift__(self, other)</span><br><span class="line">object.__iand__(self, other)</span><br><span class="line">object.__ixor__(self, other)¶</span><br><span class="line">object.__ior__(self, other)</span><br></pre></td></tr></table></figure></p><p> These methods are called to implement the augmented arithmetic assignments. These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self).<br> If x is an instance of a class with an <code>__iadd__()</code> method, <code>x += y</code> is equivalent to <code>x = operator.iadd(x, y)</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B = np.arange(12).reshape(4,3)</span><br><span class="line">for b in B:</span><br><span class="line">    b += 1</span><br><span class="line">print(B) # B will be changed</span><br></pre></td></tr></table></figure></p><h2 id="Object-oriented-Programming"><a href="#Object-oriented-Programming" class="headerlink" title="Object oriented Programming"></a>Object oriented Programming</h2><h3 id="Class-Name-Guidline"><a href="#Class-Name-Guidline" class="headerlink" title="Class Name Guidline"></a><a href="https://www.python.org/dev/peps/pep-0008/#id41" target="_blank" rel="noopener">Class Name Guidline</a></h3><p><a href="https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc" target="_blank" rel="noopener">underscore (_)</a>:<br>• For storing the value of last expression in interpreter.<br>• For ignoring the specific values. (so-called “I don’t care”)<br>• To use as ‘Internationalization(i18n)’ or ‘Localization(l10n)’ functions.<br>• To separate the digits of number literal value.</p><p>To give special meanings and functions to name of variables or functions<br>• _single_leading_underscore: weak “internal use” indicator, declaring private variables, functions, methods and classes in a module. Anything with this convention are ignored in from module import *.<br>• single_trailing_underscore_: used by convention to avoid conflicts with Python keyword<br>• <strong>double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, </strong>boo becomes _FooBar__boo; see <a href="#designing-for-inheritance">Designing for inheritance</a>)<br>• <strong>double_leading_and_trailing_underscore</strong>: “magic” objects or attributes that live in user-controlled namespaces. E.g. <strong>init</strong>, <strong>import</strong> or <strong>file</strong>. Never invent such names; only use them as documented. See <a href="#magic-attributes">Magic Attributes</a></p><h3 id="Designing-for-inheritance"><a href="#Designing-for-inheritance" class="headerlink" title="Designing for inheritance"></a><a href="https://www.python.org/dev/peps/pep-0008/#id49" target="_blank" rel="noopener">Designing for inheritance</a></h3><p>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name.<br>• Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions.<br>• Note 2: Name mangling can make certain uses, such as debugging and <strong>getattr</strong>(), less convenient. However the name mangling algorithm is well documented and easy to perform manually.<br>• Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers.</p><h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a><a href="https://docs.python.org/2/howto/descriptor.html" target="_blank" rel="noopener">Descriptor</a></h3><h3 id="Magic-Attributes"><a href="#Magic-Attributes" class="headerlink" title="Magic Attributes"></a><a href="https://docs.python.org/2/library/stdtypes.html#special-attributes" target="_blank" rel="noopener">Magic Attributes</a></h3><p><code>__init__</code> for initialization purpose.</p><p><a href="https://docs.python.org/2/library/stdtypes.html#object.__dict__" target="_blank" rel="noopener"><code>object.__dict__</code></a>: A dictionary or other mapping object used to store an object’s (writable) attributes. Basically it contains all the attributes which describe the object under question. It can be used to alter or read the attributes.  </p><p><code>__call__</code></p><h3 id="Is-Python-call-by-value-or-call-by-reference"><a href="#Is-Python-call-by-value-or-call-by-reference" class="headerlink" title="Is Python call-by-value or call-by-reference?"></a>Is Python call-by-value or call-by-reference?</h3><p>Neither.</p><blockquote><p>In Python, (almost) everything is an object. What we commonly refer to as “variables” in Python are more properly called names. A variable is not an alias for a location in memory. Rather, it is simply a binding to a Python object, likewise, “assignment” is really the binding of a name to an object. Each binding has a scope that defines its visibility, usually the block in which the name originates.<br>– <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/" target="_blank" rel="noopener">https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/</a></p></blockquote><p>Python实际上有两种对象。</p><ul><li>一种是可变对象，表现出随时间变化的行为。可变对象的变更对与它绑定的所有名称都可见，如 Python list。</li><li>一种是不可变对象，值在创建后无法修改。<ul><li>跟java的 immutable reference类似的是 Python tuple：虽然 tuple 不可变，那仅是针对其自身所绑定固定的对象而言<code>tuple(list1, list2)</code>，但tuple包含的元素对象<code>list1, list2</code>本身有自己的可变属性.</li></ul></li></ul><p>所以Python的方法调用中,<code>foo(bar)</code>只是在<code>foo</code>的作用域内创建一个与参数<code>bar</code>的绑定。</p><ul><li>如果<code>bar</code>指向可变对象，当<code>foo</code>更改时，这些更改可以在函数<code>foo</code>的作用域外可见。</li><li>如果<code>bar</code>指向一个不可变的对象，<code>foo</code>只能在其自身本地空间中创建一个名称<code>bar</code>并将其绑定到其他对象。</li></ul><h2 id="Solving-Problem"><a href="#Solving-Problem" class="headerlink" title="Solving Problem"></a>Solving Problem</h2><p>A general process to solve problem with three steps: understand, specify and design.<br>1, Start with a vague understanding that you refine into a formal specification of a problem. In this step you want to take inventory of the concepts you are dealing with.<br>2, Specify how this problem can be made amenable to being coded. What is the input and output? What output is desirable?<br>3, Design working code</p><p>?? —-(1 Vague Understanding)–&gt;Formal specification of a problem —(2 Specify)—&gt;Amendable specification—(3 Design)—&gt;Working Code</p><h2 id="Program-Design-and-Development"><a href="#Program-Design-and-Development" class="headerlink" title="Program Design and Development"></a>Program Design and Development</h2><h3 id="Dimensions-of-programming"><a href="#Dimensions-of-programming" class="headerlink" title="Dimensions of programming"></a>Dimensions of programming</h3><ul><li>Correctness, Efficiency, Features, Elegance</li><li>Each part takes time, learn to make Tradeoff:<ul><li>During the process, generally Correctness comes first.<ul><li>Test</li></ul></li><li>But pursuing the 100% Correctness is not the best choice.</li><li>There is a balance of tradeoff, and sometimes saving some time and efforts to improving the Efficiency or adding more Features may be a better option.</li><li>Elegance is good for maintaining and improving the program, which means saving for the future. <strong>Refactoring</strong> - moving along the Elegance direction without changing the other dimensions.<ul><li>DRY: don’t repeat yourself</li><li>Reuse: save time and code lines, also reduce the possibility of mistake<h3 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a><a href="https://docs.python.org/3.5/tutorial/controlflow.html#intermezzo-coding-style" target="_blank" rel="noopener">Coding Style</a></h3>For Python, <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008</a> has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Here are the most important points extracted:</li></ul></li></ul></li><li><p>Use 4-space indentation, and no tabs.</p><p> 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.</p></li><li><p>Wrap lines so that they don’t exceed 79 characters.</p><p> This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.</p></li><li><p>Use blank lines to separate functions and classes, and larger blocks of code inside functions.</p></li><li><p>When possible, put comments on a line of their own.</p></li><li><p>Use <a href="#docstring">docstrings</a>.</p></li><li><p>Use spaces around operators and after commas, but not directly inside bracketing constructs: <code>a = f(1, 2) + g(3, 4)</code>.</p></li><li><p>Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use self as the name for the first method argument (see <a href="https://docs.python.org/3.5/tutorial/classes.html#tut-firstclasses" target="_blank" rel="noopener">A First Look at Classes</a> for more on classes and methods).</p></li><li><p>Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.</p></li><li><p>Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</p></li></ul><h3 id="Docstring"><a href="#Docstring" class="headerlink" title="Docstring"></a>Docstring</h3><p>An easy way to associate documentation with a function.</p><ul><li>Documentation Strings conventions<ul><li>The first line should always be a short, concise summary of the object’s purpose.</li><li>The second line should be blank</li><li>The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li></ul></li><li><p>The following Python file shows the declaration of docstrings within a Python source file:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;Assuming this is file mymodule.py, then this string, being thefirst statement in the file, will become the &quot;mymodule&quot; module&apos;sdocstring when the file is imported.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class MyClass(object):</span><br><span class="line">    &quot;&quot;&quot;The class&apos;s docstring&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def my_method(self):</span><br><span class="line">        &quot;&quot;&quot;The method&apos;s docstring&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def my_function():</span><br><span class="line">    &quot;&quot;&quot;The function&apos;s docstring&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>The following is an interactive session showing how the docstrings may be accessed:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import mymodule&gt;&gt;&gt; help(mymodule)</span><br><span class="line"></span><br><span class="line">Assuming this is file mymodule.py then this string, being thefirst statement in the file will become the mymodule modulesdocstring when the file is imported</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; help(mymodule.MyClass)The class&apos;s docstring&gt;&gt;&gt; help(mymodule.MyClass.my_method)The method&apos;s docstring&gt;&gt;&gt; help(mymodule.my_function)The function&apos;s docstring&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>It is important that each part of the specification gets turned into a piece of code that implements it and a test that tests it.</p><ul><li>Extreme values<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a><a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" target="_blank" rel="noopener">assert</a></h3>Insert debugging assertions into a program. Assertions are not a substitute for unit tests or system tests, but rather a complement.</li><li><a href="http://wiki.python.org/moin/UsingAssertionsEffectively" target="_blank" rel="noopener">Using Assertions Effectively</a><ul><li>Places to consider putting assertions:<ul><li>checking parameter types, classes, or values</li><li>checking data structure invariants</li><li>checking “can’t happen” situations (duplicates in a list, contradictory state variables.)</li><li>after calling a function, to make sure that its return is reasonable<h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3></li></ul></li></ul></li><li>Tracking time<br> Track which part of the code is the bottle neck of efficiency<ul><li>>&gt; python -m cProfile file.py</li><li><code>import cProfile</code>, <code>cProfile.run(&#39;test()&#39;)</code></li></ul></li></ul><h2 id="Aspect-oriented-programming"><a href="#Aspect-oriented-programming" class="headerlink" title="Aspect-oriented programming"></a>Aspect-oriented programming</h2><ul><li>correct</li><li>efficiency<ul><li><a href="#time">Tracking time</a>: to find out the bottle neck function or algorithm</li><li>Rethinking the implementation of the bottle neck<ul><li>Fewer</li><li>Easier/smaller: <a href="https://github.com/ShootingSpace/Guide-to-Computer-Science/blob/master/Note%20-%20CS106B%20Stanford%20Programming%20Abstractions.md#divide-and-conquer" target="_blank" rel="noopener">Divide and Conquer</a></li></ul></li></ul></li><li>debugging<br>Each part is done with some line of codes. Instead of mix different part of the code together, it would be better to define them as different function/class. Try to seperate them as much as possible.</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>There are many special and useful function implementation and control flow in python: lambda, map, filter, reduce, generator, etc..</p><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>λ, istead of defining function with <code>def</code> and a specific function name, Lambda provide a convinent way to define a function using its own native logic and methematical expression.<br>The benifits are<br>• A small function could be defined wihtin the same code structure without seperating out a specific <code>def</code> function<br>• Without bothering creating any proper funciton name for a small anonymous function.</p><p>Lambda implementation<br>1, Like nested function definitions, lambda functions can reference variables from the containing scope, returning a function from another function. This is often used to create <strong>function wrappers</strong>, such as Python’s decorators.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uses a lambda expression to return a function</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_incrementor</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = make_incrementor(<span class="number">42</span>)  <span class="comment"># f is declared as a lambda function "lambda x: x+42" with parameter n = 42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>) <span class="comment"># call f with x=0 to return the</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)</span><br><span class="line"><span class="number">43</span></span><br></pre></td></tr></table></figure></p><p>This is like creating a compiler to save process cost: some parameters like default values or initial values are compiled into the compiler, program process these parameter only once, then this compiler as a function could be called many times with other input parameters which varies every time the compiler is being called(like user input values).</p><p>2, Pass a small function as an argument, sorting or max by an alternate key<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [(<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">2</span>, <span class="string">'two'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">4</span>, <span class="string">'four'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs</span><br><span class="line">[(<span class="number">4</span>, <span class="string">'four'</span>), (<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">2</span>, <span class="string">'two'</span>)]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l =[(<span class="string">'x'</span>,<span class="number">2</span>),(<span class="string">'y'</span>,<span class="number">4</span>),(<span class="string">'z'</span>,<span class="number">0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(l, key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'z'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Lambda with logic control flow<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lambda x,y: <span class="keyword">False</span> <span class="keyword">if</span> x&lt;y <span class="keyword">else</span> x+y</span><br></pre></td></tr></table></figure></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a><a href="https://docs.python.org/2/library/functions.html#filter" target="_blank" rel="noopener">Filter</a></h3><p>Construct a list from the elements of an iterable for which function returns <strong>true</strong>. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list.</p><ul><li><code>filter(function, iterable)</code> equals to<ul><li>if function is <code>None</code>:  <code>[item for item in iterable if item]</code></li><li>if not: <code>[item for item in iterable if function(item)]</code></li></ul></li><li><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])</code> &gt;&gt;&gt; <code>[3, 6, 9]</code></li><li>See <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilter" target="_blank" rel="noopener">itertools.ifilter()</a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilterfalse" target="_blank" rel="noopener">itertools.ifilterfalse()</a> for iterator versions of this function, including a variation that filters for elements where the function returns false.</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><a href="https://docs.python.org/2/library/functions.html#map" target="_blank" rel="noopener">Map</a></h3><p>Apply function to every item of iterable and <strong>return a list</strong> of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x % 2, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">&gt;&gt;&gt; [1, 0, 1, 0, 1, 0, 1, 0, 1]</span><br></pre></td></tr></table></figure></p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a><a href="https://docs.python.org/2/library/functions.html#reduce" target="_blank" rel="noopener">Reduce</a></h3><p>Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</span><br><span class="line">Out[1]: 15 # ((((1+2)+3)+4)+5)</span><br><span class="line">In [1]: reduce(lambda a, b: &apos;&#123;&#125;, &#123;&#125;&apos;.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">Out[1]: &apos;1, 2, 3, 4, 5, 6, 7, 8, 9&apos;</span><br></pre></td></tr></table></figure></p><h3 id="List-Dict-Set-Comprehensions"><a href="#List-Dict-Set-Comprehensions" class="headerlink" title="List/Dict/Set Comprehensions"></a>List/Dict/Set Comprehensions</h3><ul><li>List comprehensions: <code>[ s for r, s in cards if r in &#39;JQK&#39; ]</code></li><li>Dictionary comprehensions: <code>{x: x ** 2 for x in range(5) if x % 2 == 0}</code></li><li>Set comprehensions: <code>{int(sqrt(x)) for x in range(30)}</code></li><li>And in general, we can have any number of for statements, if statements, more for statements, more if statements. The whole is read from left to right</li></ul><h3 id="Generator-Expressions"><a href="#Generator-Expressions" class="headerlink" title="Generator Expressions"></a><a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" target="_blank" rel="noopener">Generator Expressions</a></h3><p>Unlike the for loop in the list comprehensions which walk through the whole loop, generator will walk one step in the for loop if a <code>next()</code> is called.</p><ul><li>The advantage is<ul><li>less indentation</li><li>stop the loop early</li><li>easier to edit</li></ul></li><li>Implementation of generator: <code>g = (sq(x) for x in range(10) if x%2 == 0).</code>  <ul><li>The generator function is a promise, but no computation has been done yet.</li><li><code>next(g)</code> to call a one-time calculation.</li><li>When reaching the end of for-loop in the generator, the <code>next(g)</code> comment will return a false called “StopIteration”.</li><li>To avoid the “StopIteration” false<ul><li>Use a outer for statement: <code>for xx in g: ...</code></li><li>convert the generator to list: <code>list(g)</code></li></ul></li></ul></li></ul><h3 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h3><p>Using a yield expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.</p><ul><li><a href="https://docs.python.org/2/reference/expressions.html#yield-expressions" target="_blank" rel="noopener">Yield expressions</a><br> The yield expression is only used when defining a generator function, and can only be used in the body of a function definition.</li><li><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html" target="_blank" rel="noopener">Yield implementation</a></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ints</span><span class="params">(start, end=None)</span>:</span></span><br><span class="line">    i = start</span><br><span class="line">    <span class="keyword">while</span> i &lt;= end <span class="keyword">or</span> end <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></span><br><span class="line">     n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">     <span class="keyword">while</span> n &lt; max:</span><br><span class="line">          <span class="keyword">yield</span> b</span><br><span class="line">          <span class="comment"># print b</span></span><br><span class="line">          a, b = b, a + b</span><br><span class="line">          n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>The true beneath <code>For Statemet</code> is <strong>iterable</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itmes:</span><br><span class="line">     <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure></p><p>What the whole truth is:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it = iter(items)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">         x = next(it)</span><br><span class="line">         <span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>Overall, Python calls the thing that can be iterated over in a for loop an iterable. Strings and lists are examples of iterables, and so are generators.</p><p><a href="https://docs.python.org/2/library/itertools.html#module-itertools" target="_blank" rel="noopener">itertools library</a> - Functions creating iterators for efficient looping.<br><code>any(iterable)</code>: Return True if any element of the iterable is true. If the iterable is empty, return False.</p><h3 id="Unpacking-Argument-Lists"><a href="#Unpacking-Argument-Lists" class="headerlink" title="Unpacking Argument Lists"></a><a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" target="_blank" rel="noopener">Unpacking Argument Lists</a></h3><p>The <code>*</code> operator simply unpacks the tuple or list and passes them as the positional arguments to the function.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">3</span>, <span class="number">6</span>))            <span class="comment"># normal call with separate arguments</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(*args))            <span class="comment"># call with arguments unpacked from a list</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><h3 id="Handling-different-types-of-argument-polymorphism"><a href="#Handling-different-types-of-argument-polymorphism" class="headerlink" title="Handling different types of argument (*polymorphism)"></a>Handling different types of argument (*polymorphism)</h3><p>An argument could be different type:<br>   <code>timedcalls(n,fn)</code>, if n is int <code>isinstance(n,int)</code>, it means controling the how many times fn was called, while n is float, it means controling the total runtime of fn called</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a><a href="https://www.python.org/dev/peps/pep-0318/" target="_blank" rel="noopener">Decorator</a></h2><p>Motivation: when applying a transformation to a function <code>def f(self): ...definition...; f = dec(f)</code>, it becomes less readable with longer methods. It also seems less than pythonic to name the function three times for what is conceptually a single declaration.</p><p>The solution is to place the decoration in the function’s declaration:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a><a href="https://www.programiz.com/python-programming/property" target="_blank" rel="noopener">@property</a></h3><p><code>property(fget=None, fset=None, fdel=None, doc=None)</code><br>A property object has three methods, getter(), setter(), and delete() to specify fget, fset and fdel at a later point.</p><p><code>some_object = property(get_some_object,set_some_object)</code> equals to<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some_object = property()  <span class="comment"># make empty property</span></span><br><span class="line">some_object = some_object.getter(get_some_object) <span class="comment"># assign fget</span></span><br><span class="line">some_object = some_object.setter(set_some_object) <span class="comment"># assign fset</span></span><br></pre></td></tr></table></figure></p><p>Decorator as tools<br>• Debug tool: help developping, count calls times, count excecute time<br>• Performance: make the programme faster, such as dynamic programming algorithm<br>• Expressiveness: doc string, explaining funciton<br>• Trace: help to monitor the execution of the program, such as each level result printed with different indentation</p><p>Disable decorator: <code>dec = disabled</code>, make the decorator disabled.</p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="noopener">Regular Expression</a></h2><p><code>import re</code></p><p><a href="http://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html" target="_blank" rel="noopener">Reference: A Regular Expression Matcher</a></p><p>In C language, any number start with ‘0’ is interpreted as an octal number( base-8 number system ):<br>‘012’ -&gt; int 10; ‘09’ -&gt; invalid</p><p><strong>Special characters</strong><br>• <code>*</code> match 0 or more repetitions of the preceding character. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.<br>• <code>?</code> Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’.<br>• <code>.</code> (Dot) matches any single character<br>• <code>^</code> (Caret) Matches the start of the string<br>• <code>$</code> Matches the end of the string or just before the newline at the end of the string, foo matches both ‘foo’ and ‘foobar’, while the regular expression foo$ matches only ‘foo’<br>• <code>+</code> match 1 or more repetitions of the preceding RE. <code>ab+</code> will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’.</p><p><strong>Commonly used expression</strong><br>• Upper case letter <code>&#39;[A-Z]&#39;</code><br>• Any alphanumeric character <code>[a-zA-Z0-9_]</code><br>• Decimal digit <code>[0-9]</code><br>• Non-digit character <code>[^0-9]</code><br>• Whitespace character <code>[ \t\n\r\f\v]</code></p><p><code>search(string[, pos[, endpos]])</code>: Scan through string looking for a location where this regular expression produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern.</p><p><code>re.findall(pattern, string, flags=0)</code>：Return all non-overlapping matches of pattern in string, as a list of strings.</p><h3 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a><a href="https://docs.python.org/2.4/lib/typesseq-strings.html" target="_blank" rel="noopener">String Formatting</a></h3><p>Modulo(<code>%</code>): String and Unicode objects have one unique built-in operation: the <code>%</code> operator (modulo). This is also known as the string formatting or interpolation operator. Given format <code>%</code> values (where format is a string or Unicode object), <code>%</code> conversion specifications in format are replaced with zero or more elements of values.<br><code>%d</code>:    Signed integer decimal.<br><code>%s</code>:    String (converts any python object using str()).<br><code>print &#39;%d: %s&#39; % (1, &#39;animal&#39;)</code> &gt;&gt; <code>1: animal</code></p><h2 id="Python-data-structure"><a href="#Python-data-structure" class="headerlink" title="Python data structure"></a>Python data structure</h2><h3 id="Numpy-indexing"><a href="#Numpy-indexing" class="headerlink" title="Numpy indexing"></a><a href="https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#indexing" target="_blank" rel="noopener">Numpy indexing</a></h3><p>Ellipsis: The same as <code>...</code>. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types. <code>a = [1,2,3], a[...] is actually the same as a</code></p><p>None: extends one more demention by further slicing the corresponding c into smallest units.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = np.arange(<span class="number">27</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>), <span class="comment">#t shape is (3,3,3)</span></span><br><span class="line">t[<span class="keyword">None</span>,].shape <span class="comment"># (1, 3, 3, 3)</span></span><br><span class="line">t[...,<span class="keyword">None</span>].shape <span class="comment"># (3, 3, 3, 1)</span></span><br><span class="line">t[:, <span class="keyword">None</span>,:].shape <span class="comment"># (3, 1, 3, 3)</span></span><br><span class="line">t[:,:, <span class="keyword">None</span>].shape <span class="comment"># (3, 3, 1, 3)</span></span><br></pre></td></tr></table></figure></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>• <a href="https://www.udacity.com/course/design-of-computer-programs--cs212" target="_blank" rel="noopener">CS212 Design of Computer Program @Udacity</a>, <a href="https://www.udacity.com/wiki/cs212" target="_blank" rel="noopener">Course Wiki</a></p><blockquote><p>Syllabus<br>Lesson 1: How to think to solve problem<br>Lesson 2: Python features; Instrumentation<br>Lesson 3: Build function as tools; Define language; Grammar<br>Lesson 4: Dealing with Complexity Through Search<br>Lesson 5: Dealing with Uncertainty Through Probability</p></blockquote><p>• <a href="https://docs.python.org/3/tutorial/" target="_blank" rel="noopener">The Python Tutorial</a><br>• <a href="http://www.openbookproject.net/thinkcs/" target="_blank" rel="noopener">Open Book Project: How to Think Like a Computer Scientist: Learning with Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What you will get from this Python digest:&lt;br&gt;1, Learn advanced python programming.&lt;br&gt;2, Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.&lt;br&gt;3, Practice going from a problem description to a solution, using a series of assignments.&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Python" scheme="http://shukebeta.me/tags/Python/"/>
    
      <category term="Programming Language" scheme="http://shukebeta.me/tags/Programming-Language/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理快速入门 | 02 N-Gram 语言模型 - ANLP UoE 爱丁堡</title>
    <link href="http://shukebeta.me/NOTE-ANLP-02-n-gram-model/"/>
    <id>http://shukebeta.me/NOTE-ANLP-02-n-gram-model/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-09-09T08:47:03.814Z</updated>
    
    <content type="html"><![CDATA[<p>生成模型在语言模型中的应用包括 N-Gram语言模型，朴素贝叶斯分类器，隐马尔可夫模型。</p><blockquote><p>在概率统计理论中, 生成模型是指能够生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。</p></blockquote><blockquote><p>生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。</p></blockquote><a id="more"></a><h2 id="N-Gram-语言模型"><a href="#N-Gram-语言模型" class="headerlink" title="N-Gram 语言模型"></a>N-Gram 语言模型</h2><p>如何训练一个语言模型? 在神经网络大热之前, 人们普遍使用<code>N-Gram</code>语言模型。就是收集不同n-gram频率的统计数据，并用它们预测下一个单词，概率模型基于前面提到的马尔可夫简化假设：若使用<code>N</code>-Gram 来预测下一个单词，出现概率仅取决于前面的<code>(N-1)</code>个单词.</p><p>一个<code>N-Gram</code>就是n个连续的单词</p><ul><li><code>Uni</code>gram: “the”, “students”, “opened”, ”their”</li><li><code>Bi</code>gram: “the students”, “students opened”, “opened their”</li><li><code>tri</code>grams: “the students opened”, “students opened their”</li><li><code>4-</code>grams: “the students opened their”</li></ul><p>通过计数来估计统计概率：<code>P(wi| prefixes) = count(prefixes, wi)/count(prefixes) = count(“the students”)/count(“the students opened”)</code></p><p>在实际中，使用 log 转换来避免数值下溢，并且log 转换可以把乘法转换为加法, 计算更快.</p><p>N-Gram模型的缺点很明显：</p><ul><li>无法很好地解决NLP中的长距离依赖现象</li><li>N-gram只是在测试语料库与训练语料库比较相似时表现才比较好。</li><li>稀疏问题1：大多数高阶N-Gram几乎不会出现，我们不能简单地把这些定义为0概率的，因为语言是千变万化的，有些词组虽然少见但不代表不存在</li><li>稀疏问题2：少部分低阶n-gram在测试集中出现了但是在训练集中没有。比如需要预测 “students opened their _”, 但是训练集中没出现过“students opened their”。</li><li>一般而言，N越高，模型表现越好，但是更大的N使稀疏问题变得更糟。通常人们不会取大于5的N。</li><li>需要存储所有可能的N-Gram，所以模型的大小是 <code>O(exp(n))</code>,需要大量的内存.</li></ul><p>针对数据稀疏问题, 可以使用各种平滑处理.</p><h3 id="Add-alpha-smoothing"><a href="#Add-alpha-smoothing" class="headerlink" title="Add alpha smoothing"></a>Add alpha smoothing</h3><ul><li>Assign equal probability to all unseen events.</li><li>Applied in text classification, or domains where zeros probability is not common.</li></ul><h3 id="Backoff-smoothing"><a href="#Backoff-smoothing" class="headerlink" title="Backoff smoothing"></a>Backoff smoothing</h3><ul><li>Use information from lower order N-grams (shorter histories)</li><li>Back off to a lower-order N-gram if we have zero evidence for a higher-order interpolation N-gram.</li><li>Discount: In order for a backoff model to give a correct probability distribution, we have to discount the higher-order N-grams to save some probability mass for the lower order N-grams.</li></ul><p>对于像网络数据这种非常大的N-gram，使用stupid backoff.</p><h3 id="Interpolation-smoothing"><a href="#Interpolation-smoothing" class="headerlink" title="Interpolation smoothing"></a>Interpolation smoothing</h3><ul><li>Interpolation: mix the probability estimates from all the N-gram estimators, weighing and combining the trigram, bigram, and unigram counts</li><li>Simple interpolation: <code>P(w3|w1,w2)=1P(w3|w1,w2)+λ2P(w3|w2)+λ3P(w3)</code>, Σλ=1.</li><li>λ could be trianed/conditioned on training set/contest, choose λ that maximie the probability of held-out data</li></ul><h3 id="Kneser-Ney-smoothing"><a href="#Kneser-Ney-smoothing" class="headerlink" title="Kneser-Ney smoothing"></a>Kneser-Ney smoothing</h3><p>这是目前表现最好的平滑方案.</p><ul><li>Combine absolute discounting and interpolation: Extending interpolatation with an absolute discounting 0.75 for high order grams.</li><li>Use a better estimate for probabilities of lower-order unigrams, the continuation probability, P_continuatin(w) is how likely is w to appear as a novel continutaion.<ul><li>For each word w, count the number of bigram types it completes. Or count the number of word types seen to precede w.</li><li>Every bigram type was a novel continuation the first time it was seen.</li><li>normalized by the total number of word bigram types.</li></ul></li><li>To lower the probability of some fix bigram like “San Franscio”</li><li>For bigram, <code>Pkn(wi|wi-1)=max(count(wi-1,wi)-d, 0)/c(wi-1) +λ(wi-1)P_continuatin(wi), λ(wi-1) = d{w:count(wi-1,w)&gt;0}/c(wi-1)</code>, where {w:count(wi-1,w)&gt;0} is the number of word types that can follow wi-1, also is the # of word types we discounted, also is the # of times we applied normalized discount.</li><li>For general N-gram, <img src="/images/kneser-ney.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成模型在语言模型中的应用包括 N-Gram语言模型，朴素贝叶斯分类器，隐马尔可夫模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在概率统计理论中, 生成模型是指能够生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="AI" scheme="http://shukebeta.me/categories/AI/"/>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/AI/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
  </entry>
  
</feed>
