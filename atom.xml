<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Computer Science &amp; AI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shukebeta.me/"/>
  <updated>2018-08-21T20:05:26.894Z</updated>
  <id>http://shukebeta.me/</id>
  
  <author>
    <name>Cong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Find All Collinear Points - A Pattern Recognition Problem</title>
    <link href="http://shukebeta.me/algorithms-applications-03-pattern-recognition/"/>
    <id>http://shukebeta.me/algorithms-applications-03-pattern-recognition/</id>
    <published>2018-08-03T23:00:00.000Z</published>
    <updated>2018-08-21T20:05:26.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Line-Patterns-Recognition"><a href="#The-Line-Patterns-Recognition" class="headerlink" title="The Line Patterns Recognition"></a>The Line Patterns Recognition</h2><p>A basic but important application of pattern recognition is to recognize line patterns in a given set of points.<br><a href="http://coursera.cs.princeton.edu/algs4/assignments/collinear.html" target="_blank" rel="noopener">http://coursera.cs.princeton.edu/algs4/assignments/collinear.html</a></p><p>The problem could be described as: Given a set of n distinct points in the plane, find every (maximal) line segment that connects a subset of 4 or more of the points.<img src="http://coursera.cs.princeton.edu/algs4/assignments/lines2.png" alt="" title="image from: http://coursera.cs.princeton.edu/algs4/"><br><a id="more"></a><br>Point data type. an immutable data type <strong>Point</strong> that represents a point in the plane by implementing the following API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>                         <span class="comment">// constructs the point (x, y)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span>                               <span class="comment">// draws this point</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">drawTo</span><span class="params">(Point that)</span>                   <span class="comment">// draws the line segment from this point to that point</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   String <span class="title">toString</span><span class="params">()</span>                         <span class="comment">// string representation</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>               <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Point that)</span>     <span class="comment">// compare two points by y-coordinates, breaking ties by x-coordinates</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>            <span class="keyword">double</span> <span class="title">slopeTo</span><span class="params">(Point that)</span>       <span class="comment">// the slope between this point and that point</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> Comparator&lt;Point&gt; <span class="title">slopeOrder</span><span class="params">()</span>              <span class="comment">// compare two points by slopes they make with this point</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Line segment data type. To represent line segments in the plane, use the data type LineSegment.java, which has the following API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSegment</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LineSegment</span><span class="params">(Point p, Point q)</span>        <span class="comment">// constructs the line segment between points p and q</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span>                        <span class="comment">// draws this line segment</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>                    <span class="comment">// string representation</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Apparently if using brute force, the order of growth of the running time of the program will be $n^4$ in the worst case.</p><p>A faster, sorting-based solution: Given a point p, the following method determines whether p participates in a set of 4 or more collinear points.</p><ol><li>Think of p as the origin.</li><li>For each other point q, determine the slope it makes with p.</li><li>Sort the points according to the slopes they makes with p.</li><li>Check if any 3 (or more) adjacent points in the sorted order have equal slopes with respect to p. If so, these points, together with p, are collinear.<br><img src="http://coursera.cs.princeton.edu/algs4/assignments/lines1.png" alt="" title="image from: http://coursera.cs.princeton.edu/algs4/"></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>There are two key points to get the order of growth of the running time to be $n^2\log n$ in the worst case, with space proportional to n plus the number of line segments returned, and work properly even if the input has 5 or more collinear points.</p><ol><li><strong>Stable</strong> sort: <code>Arrays.sort()</code> is guaranteed to be stable, so equal elements will not be reordered as a result of the sort. So the input points array is already sorted by points natural order once we sort the element at the first valid check step.</li><li>To avoid duplicate line segments, we need to check if new found collinear points pairs already exist in the LineSegment. If we loop over the LineSegment everytime we have a new line segments to check, this will results in large run time that will not satisfy the requirement. Instead, we need to make use of the inner features of the line patterns:<ol><li>Since the every possible segment is created by points it contains,</li><li>and we iterate through the sorted Points array to find segment</li><li>so every non-duplicate new segment is guaranteed to be created from its smallest point member</li><li>any duplicate segment is created later by its other member other than the smallest</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Line-Patterns-Recognition&quot;&gt;&lt;a href=&quot;#The-Line-Patterns-Recognition&quot; class=&quot;headerlink&quot; title=&quot;The Line Patterns Recognition&quot;&gt;&lt;/a&gt;The Line Patterns Recognition&lt;/h2&gt;&lt;p&gt;A basic but important application of pattern recognition is to recognize line patterns in a given set of points.&lt;br&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/collinear.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://coursera.cs.princeton.edu/algs4/assignments/collinear.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The problem could be described as: Given a set of n distinct points in the plane, find every (maximal) line segment that connects a subset of 4 or more of the points.&lt;img src=&quot;http://coursera.cs.princeton.edu/algs4/assignments/lines2.png&quot; alt=&quot;&quot; title=&quot;image from: http://coursera.cs.princeton.edu/algs4/&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Randomized Queue with Knuth Shuffling or Reservoir Sampling</title>
    <link href="http://shukebeta.me/algorithms-applications-02-randomized-queue/"/>
    <id>http://shukebeta.me/algorithms-applications-02-randomized-queue/</id>
    <published>2018-07-20T23:00:00.000Z</published>
    <updated>2018-07-22T10:46:10.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Randomized-queue"><a href="#Randomized-queue" class="headerlink" title="Randomized queue"></a>Randomized queue</h3><p>For a randomized queue, the item removed is chosen <strong>uniformly</strong> at random from items in the data structure. API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RandomizedQueue</span><span class="params">()</span> </span>&#123;&#125;                 <span class="comment">// construct an empty randomized queue</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;&#125;                 <span class="comment">// is the randomized queue empty?</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;&#125;                        <span class="comment">// return the number of items on the randomized queue</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;&#125;           <span class="comment">// add the item</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;&#125;                    <span class="comment">// remove and return a random item</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">sample</span><span class="params">()</span> </span>&#123;&#125;                     <span class="comment">// return a random item (but do not remove it)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;&#125;         <span class="comment">// return an independent iterator over items in random order</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;&#125;   <span class="comment">// unit testing (optional)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Each iterator must return the items in <strong>uniformly</strong> random order. The order of two or more iterators to the same randomized queue must be mutually independent; each iterator must maintain its own random order.</p><p>More detail could be found at programming assignment <a href="http://coursera.cs.princeton.edu/algs4/assignments/queues.html" target="_blank" rel="noopener">specification</a> and <a href="http://coursera.cs.princeton.edu/algs4/checklists/queues.html" target="_blank" rel="noopener">checklist</a>.</p><h3 id="Permutation-client-memory-challenge"><a href="#Permutation-client-memory-challenge" class="headerlink" title="Permutation client memory challenge"></a>Permutation client memory challenge</h3><a id="more"></a><p>A client program <code>Permutation.java</code> that takes an integer k as a command-line argument; reads in a sequence of strings from standard input using <code>StdIn.readString()</code>; and prints exactly k of them, uniformly at random. Print each item from the sequence at most once.</p><p>The bonu point is to use only one RandomizedQueue object of maximum size at most k.</p><p>More specifically, as the program sees a sequence of input, one at a time, the programe could only keep k items in memory, and they should be selected at random from the sequence. If we know the total number of items (n), then the solution is easy: select ten distinct indices i between 1 and n with equal probability, and keep the i-th elements. The challenge is that we do not know the input sequence length in advance.</p><p>The idea is when reading in input strings one by one, we maintain the RandomizedQueue with size at most k on the fly. If the RandomizedQueue is full, then we need to decide whether a new input string should be accepted or not. If it should be accepted, then one of the old elements must be kicked out of the queues. The key point here is how to make the decision.</p><p>Two algorithms explain the same mechanism:</p><ol><li><p><a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Knuth shuffling</a><br>For a loop over n, swap item <code>[n]</code> with a random item in the range <code>[0]</code> through <code>[n]</code>. We store only the first k elements (<code>[0 : k-1]</code>) as that are all we need. Afterwards, when we get a new string (index <code>[n]</code>), we’ll swap it with one of the first k strings for a given probability <code>P</code>, otherwise just discard it.</p></li><li><p><a href="https://en.wikipedia.org/wiki/Reservoir_sampling" target="_blank" rel="noopener">Reservoir sampling</a></p><blockquote><p>Reservoir sampling is a family of randomized algorithms for randomly choosing a sample of k items from a list S containing n items, where n is either a very large or unknown number. Typically n is large enough that the list doesn’t fit into main memory.</p><ol><li>Keep the first k items in memory.</li><li>When the i-th item arrives (for $i&gt;k$):<ul><li>with probability $k/i$, keep the new item (discard an old one, selecting which to replace at random, each with chance $1/k$)</li><li>with probability $1-k/i$, keep the old items (ignore the new one)</li></ul></li></ol></blockquote></li></ol><p>Test report:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Correctness:  43/43 tests passed</span><br><span class="line">Memory:       106/105 tests passed</span><br><span class="line">Timing:       136/136 tests passed</span><br><span class="line"></span><br><span class="line">Aggregate score: 100.10%</span><br><span class="line">[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]</span><br><span class="line"></span><br><span class="line">Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object</span><br><span class="line">                created is equal to k</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 5</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 50</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 500</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 5000</span><br><span class="line">  * filename = tale.txt, n = 138653, k = 50000</span><br><span class="line">==&gt; passed</span><br><span class="line"></span><br><span class="line">Total: 3/2 tests passed!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Randomized-queue&quot;&gt;&lt;a href=&quot;#Randomized-queue&quot; class=&quot;headerlink&quot; title=&quot;Randomized queue&quot;&gt;&lt;/a&gt;Randomized queue&lt;/h3&gt;&lt;p&gt;For a randomized queue, the item removed is chosen &lt;strong&gt;uniformly&lt;/strong&gt; at random from items in the data structure. API:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomizedQueue&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iterable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandomizedQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                 &lt;span class=&quot;comment&quot;&gt;// construct an empty randomized queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                 &lt;span class=&quot;comment&quot;&gt;// is the randomized queue empty?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                        &lt;span class=&quot;comment&quot;&gt;// return the number of items on the randomized queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Item item)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;           &lt;span class=&quot;comment&quot;&gt;// add the item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Item &lt;span class=&quot;title&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                    &lt;span class=&quot;comment&quot;&gt;// remove and return a random item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Item &lt;span class=&quot;title&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;                     &lt;span class=&quot;comment&quot;&gt;// return a random item (but do not remove it)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterator&amp;lt;Item&amp;gt; &lt;span class=&quot;title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;         &lt;span class=&quot;comment&quot;&gt;// return an independent iterator over items in random order&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;   &lt;span class=&quot;comment&quot;&gt;// unit testing (optional)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Each iterator must return the items in &lt;strong&gt;uniformly&lt;/strong&gt; random order. The order of two or more iterators to the same randomized queue must be mutually independent; each iterator must maintain its own random order.&lt;/p&gt;
&lt;p&gt;More detail could be found at programming assignment &lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/queues.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;specification&lt;/a&gt; and &lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/checklists/queues.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;checklist&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Permutation-client-memory-challenge&quot;&gt;&lt;a href=&quot;#Permutation-client-memory-challenge&quot; class=&quot;headerlink&quot; title=&quot;Permutation client memory challenge&quot;&gt;&lt;/a&gt;Permutation client memory challenge&lt;/h3&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Percolations problem</title>
    <link href="http://shukebeta.me/algorithms-applications-01-percolation/"/>
    <id>http://shukebeta.me/algorithms-applications-01-percolation/</id>
    <published>2018-07-02T23:00:00.000Z</published>
    <updated>2018-08-20T23:04:06.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Union-find-applications-Percolation"><a href="#Union-find-applications-Percolation" class="headerlink" title="Union-find applications: Percolation"></a>Union-find applications: Percolation</h3><p><a href="http://coursera.cs.princeton.edu/algs4/assignments/percolation.html" target="_blank" rel="noopener">Problem discriptions</a></p><p>Percolation data type. To model a percolation system, create a data type Percolation with the following API:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> n)</span></span>;                <span class="comment">// create n-by-n grid, with all sites blocked</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>    <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;    <span class="comment">// open site (row, col) if it is not open already</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;  <span class="comment">// is site (row, col) open?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;  <span class="comment">// is site (row, col) full?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>     <span class="keyword">int</span> <span class="title">numberOfOpenSites</span><span class="params">()</span></span>;       <span class="comment">// number of open sites</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span></span>;              <span class="comment">// does the system percolate?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:</p><ul><li>Initialize all sites to be blocked.</li><li>Repeat the following until the system percolates:<ul><li>Choose a site uniformly at random among all blocked sites.</li><li>Open the site.</li></ul></li><li>The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold.</li></ul><h4 id="The-back-wash-issue"><a href="#The-back-wash-issue" class="headerlink" title="The back wash issue"></a><a href="http://coursera.cs.princeton.edu/algs4/checklists/percolation.html" target="_blank" rel="noopener">The back wash issue</a></h4><p><img src="http://coursera.cs.princeton.edu/algs4/checklists/percolation-backwash.png" alt="" title="image from: http://coursera.cs.princeton.edu"><br><a id="more"></a><br>My solution inspired from this post <a href="https://www.sigmainfy.com/blog/avoid-backwash-in-percolation.html" target="_blank" rel="noopener">https://www.sigmainfy.com/blog/avoid-backwash-in-percolation.html</a>, with some improvements:</p><ol><li>Using one <code>WeightedQuickUnionUF(n * n)</code> objects to track each site’s parent.</li><li>Use a <code>byte[n * n]</code> to store the each site’s state.<ul><li>There are four possible states, represented as<ul><li><code>BLOCKED: 0b000</code></li><li><code>OPEN: 0b001</code></li><li><code>CONNECT_TO_BOTTOM: 0b010</code></li><li><code>CONNECT_TO_TOP: 0b100</code></li></ul></li><li>With byte operation <code>|</code>, we enable sites to have mixture of states.</li></ul></li><li><code>open(row, col)</code>: to open the current site <code>cur</code>, we need to<ul><li>find out its four possible neibourghs (<code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, if exist);</li><li>use <code>find()</code> to return the neibourghs’ parents (<code>upParent</code>, etc..), use <code>union()</code> to connect <code>cur</code> and its neibourghs;</li><li>Fianally, update <code>cur</code>‘s new parent <code>newParent</code>‘s state with the combination of <code>cur</code>‘s parent state and the neibourghs’ parents states.</li><li>in totalm, there involves 4 <code>union()</code> and 5 <code>find()</code> API calls at most but the time complexity is still $\Theta(\lg N)$</li></ul></li><li><code>isOpen()</code>: $\in \Theta(1)$ by checking the <code>byte[n * n]</code>.</li><li><code>isFull()</code>: $\in \Theta(1)$, use one call <code>find()</code> API and thus is $\in \Theta (\lg N)$</li><li><code>percolates()</code>: use a <code>boolean isPercolates</code> as mark, for any new open site that becomes both <code>CONNECT_TO_BOTTOM</code> and <code>CONNECT_TO_TOP</code>, we could mark the model as percolates.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Estimated student memory = 9.00 n^2 + 0.00 n + 160.00   (R^2 = 1.000)</span><br><span class="line"></span><br><span class="line">Test 2 (bonus): check that total memory &lt;= 11 n^2 + 128 n + 1024 bytes</span><br><span class="line"></span><br><span class="line">==&gt; passed</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Union-find-applications-Percolation&quot;&gt;&lt;a href=&quot;#Union-find-applications-Percolation&quot; class=&quot;headerlink&quot; title=&quot;Union-find applications: Percolation&quot;&gt;&lt;/a&gt;Union-find applications: Percolation&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/percolation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Problem discriptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Percolation data type. To model a percolation system, create a data type Percolation with the following API:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Percolation&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Percolation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;                &lt;span class=&quot;comment&quot;&gt;// create n-by-n grid, with all sites blocked&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col)&lt;/span&gt;&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// open site (row, col) if it is not open already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// is site (row, col) open?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// is site (row, col) full?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numberOfOpenSites&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;// number of open sites&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;percolates&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;              &lt;span class=&quot;comment&quot;&gt;// does the system percolate?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize all sites to be blocked.&lt;/li&gt;
&lt;li&gt;Repeat the following until the system percolates:&lt;ul&gt;
&lt;li&gt;Choose a site uniformly at random among all blocked sites.&lt;/li&gt;
&lt;li&gt;Open the site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;The-back-wash-issue&quot;&gt;&lt;a href=&quot;#The-back-wash-issue&quot; class=&quot;headerlink&quot; title=&quot;The back wash issue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/checklists/percolation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The back wash issue&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://coursera.cs.princeton.edu/algs4/checklists/percolation-backwash.png&quot; alt=&quot;&quot; title=&quot;image from: http://coursera.cs.princeton.edu&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>注意力机制应用于斯坦福问答数据集 (SQuAD)</title>
    <link href="http://shukebeta.me/SQuAD/"/>
    <id>http://shukebeta.me/SQuAD/</id>
    <published>2018-07-01T16:00:00.000Z</published>
    <updated>2018-09-01T02:20:58.447Z</updated>
    
    <content type="html"><![CDATA[<p>The Standford question and answer dataset <a href="https://rajpurkar.github.io/SQuAD-explorer/" target="_blank" rel="noopener">(SQuAD)</a> 是由 Rajpurkar 等人提出的一个较有挑战性的阅读理解数据集。该数据集包含 10 万个（问题，原文，答案）三元组，原文来自于 536 篇维基百科文章，而问题和答案的构建主要是通过众包的方式，让标注人员提出最多 5 个基于文章内容的问题并提供正确答案，且答案出现在原文中。SQuAD 和之前的完形填空类阅读理解数据集如 CNN/DM，CBT 等最大的区别在于：SQuAD 中的答案不在是单个实体或单词，而可能是一段短语，这使得其答案更难预测。SQuAD 包含公开的训练集和开发集，以及一个隐藏的测试集，其采用了与 ImageNet 类似的封闭评测的方式，研究人员需提交算法到一个开放平台，并由 SQuAD 官方人员进行测试并公布结果。</p><p>由于 SQuAD 的答案限定于来自原文，模型只需要判断原文中哪些词是答案即可，因此是一种抽取式的 QA 任务而不是生成式任务。简单的 SQuAD 的模型框架可以参考seq2seq：Embed 层，Encode 层 和 Decode 层。Embed 层负责将原文和问题中的 tokens 映射为向量表示；Encode 层主要使用 RNN 来对原文和问题进行编码，这样编码后每个 token 的向量表示就蕴含了上下文的语义信息；Decode 层则基于 query-aware 的原文表示来预测答案起始位置。</p><p>但这个文本数据集涉及问题，原文，答案三个部分, 特别是需要根据问题在原文中搜寻答案的范围, 这就涉及如果把问题的信息提取出来并作用于原文. 目前各种前沿模型的关注点几乎都是在如何捕捉问题和原文之间的交互关系，也就是在 Encode 层和 Decode 层之间, 使用一个 Interaction 层处理编码了问题语义信息的原文表示，即 query-aware 的原文表示，再输入给 Decode 层。而本来应用机器翻译Attention机制就能很好的处理这种交互。<br><a id="more"></a><br>Attention机制参考另一篇文章<a href="\attention">注意力机制</a>.</p><h2 id="应用于阅读理解的注意力机制"><a href="#应用于阅读理解的注意力机制" class="headerlink" title="应用于阅读理解的注意力机制"></a>应用于阅读理解的注意力机制</h2><p>虽然注意力机制大同小异，但是不同的注意力权重（打分函数）带来的效果是不一样的。比较常用的是就是使用<a href="\attention#全局注意力机制">全局注意力机制</a>中提到的<br>$$<br>\begin{aligned}<br>    score_{general}(t’ t) &amp;= s^\top_{t’} W_\alpha h_t, \\<br>\end{aligned}<br>$$<br>就是用一个交互矩阵$W_\alpha$来捕捉问题和原文之间的交互关系. 原文作者称之为 <strong>Bilinear</strong>.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forwards_bilinear</span><span class="params">(self, hc, hq, hc_mask, hq_mask, max_context_length_placeholder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                max_question_length_placeholder, is_train, keep_prob)</span>:</span></span><br><span class="line">        <span class="string">'''combine context hidden state(hc) and question hidden state(hq) with global attention</span></span><br><span class="line"><span class="string">            bilinear score = hc.T *W *hq</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        d_en = hc.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># (BS, MPL, MQL)</span></span><br><span class="line">        interaction_weights = tf.get_variable(<span class="string">"W_interaction"</span>, shape=[d_en, d_en])</span><br><span class="line">        hc_W = tf.reshape(tf.reshape(hc, shape=[<span class="number">-1</span>, d_en]) @ interaction_weights,</span><br><span class="line">                          shape=[<span class="number">-1</span>, max_context_length_placeholder, d_en])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MPL, HS * 2) @ (BS, HS * 2, MCL) -&gt; (BS ,MCL, MQL)</span></span><br><span class="line">        score = hc_W @ tf.transpose(hq, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="comment"># Create mask (BS, MPL) -&gt; (BS, MPL, 1) -&gt; (BS, MPL, MQL)</span></span><br><span class="line">        hc_mask_aug = tf.tile(tf.expand_dims(hc_mask, <span class="number">-1</span>), [<span class="number">1</span>, <span class="number">1</span>, max_question_length_placeholder])</span><br><span class="line">        hq_mask_aug = tf.tile(tf.expand_dims(hq_mask, <span class="number">-2</span>), [<span class="number">1</span>, max_context_length_placeholder, <span class="number">1</span>])</span><br><span class="line">        hq_mask_aug = hc_mask_aug &amp; hq_mask_aug</span><br><span class="line">        score = softmax_mask_prepro(score, hq_mask_aug)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MPL, MQL)</span></span><br><span class="line">        alignment_weights = tf.nn.softmax(score)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MPL, MQL) @ (BS, MQL, HS * 2) -&gt; (BS, MPL, HS * 2)</span></span><br><span class="line">        context_aware = tf.matmul(alignment_weights, hq)</span><br><span class="line"></span><br><span class="line">        concat_hidden = tf.concat([context_aware, hc], axis=<span class="number">2</span>)</span><br><span class="line">        concat_hidden = tf.cond(is_train, <span class="keyword">lambda</span>: tf.nn.dropout(concat_hidden, keep_prob), <span class="keyword">lambda</span>: concat_hidden)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (HS * 4, HS * 2)</span></span><br><span class="line">        Ws = tf.get_variable(<span class="string">"Ws"</span>, shape=[d_en * <span class="number">2</span>, d_en])</span><br><span class="line">        attention = tf.nn.tanh(tf.reshape(tf.reshape(concat_hidden, [<span class="number">-1</span>, d_en * <span class="number">2</span>]) @ Ws,</span><br><span class="line">                                          [<span class="number">-1</span>, max_context_length_placeholder, d_en]))</span><br><span class="line">        <span class="keyword">return</span> (attention)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_similarity_matrix</span><span class="params">(self, hq, hc, max_question_length, max_context_length, question_mask, context_mask, is_train,</span></span></span><br><span class="line"><span class="function"><span class="params">                           keep_prob)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span><span class="params">(tensor, keep)</span>:</span></span><br><span class="line">            fixed_shape = tensor.get_shape().as_list()</span><br><span class="line">            start = len(fixed_shape) - keep</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Calculate (BS * MCL * MQL)</span></span><br><span class="line">            left = reduce(mul, [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start)])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># out_shape is simply HS * 2</span></span><br><span class="line">            out_shape = [left] + [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(fixed_shape))]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># (BS * MCL * MQL, HS * 2)</span></span><br><span class="line">            flat = tf.reshape(tensor, out_shape)</span><br><span class="line">            <span class="keyword">return</span> (flat)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_reconstruct</span><span class="params">(tensor, ref, keep)</span>:</span></span><br><span class="line">            ref_shape = ref.get_shape().as_list()</span><br><span class="line">            tensor_shape = tensor.get_shape().as_list()</span><br><span class="line">            ref_stop = len(ref_shape) - keep</span><br><span class="line">            tensor_start = len(tensor_shape) - keep</span><br><span class="line"></span><br><span class="line">            <span class="comment"># [BS, MCL, MQL]</span></span><br><span class="line">            pre_shape = [ref_shape[i] <span class="keyword">or</span> tf.shape(ref)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(ref_stop)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># [1]</span></span><br><span class="line">            keep_shape = [tensor_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(tensor_start, len(tensor_shape))]</span><br><span class="line">            <span class="comment"># pre_shape = [tf.shape(ref)[i] for i in range(len(ref.get_shape().as_list()[:-keep]))]</span></span><br><span class="line">            <span class="comment"># keep_shape = tensor.get_shape().as_list()[-keep:]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># [BS, MCL, MQL, 1]</span></span><br><span class="line">            target_shape = pre_shape + keep_shape</span><br><span class="line">            out = tf.reshape(tensor, target_shape)</span><br><span class="line">            out = tf.squeeze(out, [len(args[<span class="number">0</span>].get_shape().as_list()) - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> (out)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">        d = hq.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        logging.debug(<span class="string">"d is: &#123;&#125;"</span>.format(d))</span><br><span class="line">        hc_aug = tf.tile(tf.reshape(hc, shape=[<span class="number">-1</span>, max_context_length, <span class="number">1</span>, d]),</span><br><span class="line">                         [<span class="number">1</span>, <span class="number">1</span>, max_question_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">        hq_aug = tf.tile(tf.reshape(hq, shape=[<span class="number">-1</span>, <span class="number">1</span>, max_question_length, d]),</span><br><span class="line">                         [<span class="number">1</span>, max_context_length, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [(BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2)]</span></span><br><span class="line">        args = [hc_aug, hq_aug, hc_aug * hq_aug]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [(BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2)]</span></span><br><span class="line">        args_flat = [_flatten(arg, <span class="number">1</span>) <span class="keyword">for</span> arg <span class="keyword">in</span> args]</span><br><span class="line">        args_flat = [tf.cond(is_train, <span class="keyword">lambda</span>: tf.nn.dropout(arg, keep_prob), <span class="keyword">lambda</span>: arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args_flat]</span><br><span class="line"></span><br><span class="line">        d_concat = d * <span class="number">3</span></span><br><span class="line">        W = tf.get_variable(<span class="string">"W"</span>, shape=[d_concat, <span class="number">1</span>])</span><br><span class="line">        b = tf.get_variable(<span class="string">"b"</span>, shape=[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculating a(h, u) = w_s^(t)[h; u; h * u]</span></span><br><span class="line">        <span class="comment"># (BS * MCL * MQL, HS * 6) @ (HS * 6, 1) + (1) -&gt; (BS * MCL * MQL, 1)</span></span><br><span class="line">        res = tf.concat(args_flat, <span class="number">1</span>) @ W + b</span><br><span class="line"></span><br><span class="line">        <span class="comment"># (BS * MCL * MQL, 1) -&gt; (BS, MCL, MQL)</span></span><br><span class="line">        similarity_matrix = _reconstruct(res, args[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">        logging.debug(<span class="string">"similiarity_matrix after reconstruct: &#123;&#125;"</span>.format(similarity_matrix.get_shape()))</span><br><span class="line">        context_mask_aug = tf.tile(tf.expand_dims(context_mask, <span class="number">2</span>), [<span class="number">1</span>, <span class="number">1</span>, max_question_length])</span><br><span class="line">        question_mask_aug = tf.tile(tf.expand_dims(question_mask, <span class="number">1</span>), [<span class="number">1</span>, max_context_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        mask_aug = context_mask_aug &amp; question_mask_aug</span><br><span class="line">        similarity_matrix = softmax_mask_prepro(similarity_matrix, mask_aug)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (similarity_matrix)</span><br></pre></td></tr></table></figure></p><h3 id="BiDAF"><a href="#BiDAF" class="headerlink" title="BiDAF"></a>BiDAF</h3><p><a href="https://arxiv.org/abs/1611.01603" target="_blank" rel="noopener">lSeo et al. (2016)</a>针对SQuAD提出了一个另一种更复杂的注意力机制, Bi-Directional Attention Flow (BiDAF)。<br><img src="https://allenai.github.io/bi-att-flow/BiDAF.png" alt="" title="image from: https://allenai.github.io/bi-att-flow/"><br>BiDAF顾名思义那个就是问题与段落的双向的注意力机制, 分别是 Context-to-query (C2Q) attention 和 Query-to-context (Q2C) attention. 两者都是基于传统的段落的背景向量 $H$ 与问题的背景向量 $U$ 间相似矩阵(similarity matrix) $S \in \mathbb{R^{T×J}}$衍生出来的.<br>$$<br>S_{tj} = \alpha(H_{:t}, U_{:j}) \in R \\<br>\alpha(h, u) = w^{\top}_{(S)}[h; u; h \odot u]<br>$$</p><blockquote><p>Where $S_{tj}$ indicates the similarity between  t-th context word and j-th query word, $\alpha$ is a trainable scalar function that encodes the similarity between its two input vectors, $H_{:t}$ is t-th column vector of H, and $U_{:j}$ is j-th column vector of U, $w_{(S)} \in  R^{6d}$ is a trainable weight vector, $[;]$ is vector concatenation across row.</p></blockquote><p>相似矩阵S被用于计算两种方向的注意力向量.</p><blockquote><p>Context-to-query (C2Q) attention signifies which query words are most relevant to each context word</p></blockquote><p>$$<br>\tilde{U_{:t}} = \sum_j \alpha_{tj} U_{:j} \\<br>\alpha_t = softmax(S_{t:})<br>$$<br>其中 $\alpha_t \in R^J 表示$t$段落词对各个问题词的注意力权重</p><blockquote><p>Query-to-context (Q2C) attention signifies which context words have the closest similarity to one of the query words and are hence critical for answering the query.</p></blockquote><p>对段落的注意力权重为:<br>$$<br>b = softmax(max_{col}(S)) \in R^T<br>$$<br>其中$max_{col}$是在每行选出最大值.<br>然后对段落背景向量进行注意力加权:<br>$$<br>\tilde{h} = \sum_t b_t  H_{:t} \in R^{2d}<br>$$<br>这个$\tilde{h}$向量指的是在query眼里最重要的段落次的加权求和. 因为$\tilde{h}$是在每一个内去最大值, 所以还需要从新把$\tilde{h}$的值在每一个铺开$T$次得到一个$\tilde{H} \in R^{2dxT}$向量以方便后续的计算.</p><p>最后, 段落的embeddings向量和注意力向量结合为$G$, $G$的每一列向量可以理解为每个段落词的 query-aware representation:<br>$$<br>G_{:t} = \beta(H_{:t}, \tilde{U_{:t}}, \tilde{H_{:t}}) \in R^{d_G}<br>$$</p><blockquote><p>where $G_{:t}$ is the t-th column vector (corresponding to t-th context word), β is a trainable vector function that fuses its (three) input vectors, and $d_G$ is the output dimension of the β function.</p></blockquote><p>β 函数可以是任意的神经网络, 但是文章中指出使用简单的函数如 $\beta(h, \tilde{u}, \tilde{h}) = [h; \tilde{u}; h \odot \tilde{u}; h \odot \tilde{h}] \in R^{8dxT}$ (i.e., dG = 8d) 表现已经很好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attention</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forwards_complex</span><span class="params">(self, hc, hq, hc_mask, hq_mask, max_context_length_placeholder,</span></span></span><br><span class="line"><span class="function"><span class="params">                  max_question_length_placeholder, is_train, keep_prob)</span>:</span></span><br><span class="line">       <span class="string">'''combine context hidden state(hc) and question hidden state(hq) with attention</span></span><br><span class="line"><span class="string">            measured similarity = hc : hq : hc.T * hq</span></span><br><span class="line"><span class="string">       '''</span></span><br><span class="line">       s = self._similarity_matrix(hq, hc, max_question_length_placeholder,</span><br><span class="line">       max_context_length_placeholder, hq_mask, hc_mask, is_train, keep_prob)</span><br><span class="line">       <span class="comment"># C2Q</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL)</span></span><br><span class="line">       weights_c2q = tf.nn.softmax(s)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL) @ (BS, MQL, HS * 2) -&gt; (BS, MCL, HS * 2)</span></span><br><span class="line">       query_aware = weights_c2q @ hq</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Q2C</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL) -&gt; (BS, MCL)</span></span><br><span class="line">       <span class="comment"># We are effectively looking through all the question words j's to some context word i and finding the</span></span><br><span class="line">       <span class="comment"># maximum of those context words</span></span><br><span class="line">       score_q2c = tf.reduce_max(s, axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL)</span></span><br><span class="line">       weights_q2c = tf.expand_dims(tf.nn.softmax(score_q2c), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, HS)</span></span><br><span class="line">       context_aware = tf.reduce_sum(tf.multiply(weights_q2c, hc), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, HS * 2)</span></span><br><span class="line">       context_aware = tf.tile(tf.expand_dims(context_aware, <span class="number">1</span>), [<span class="number">1</span>, max_context_length_placeholder, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># [(BS, MCL, HS * 2), (BS, MCL, HS * 2), (BS, MCL, HS * 2), (BS, MCL, HS * 2)]</span></span><br><span class="line">       biattention = tf.nn.tanh(tf.concat([hc, query_aware, hc * query_aware, hc * context_aware], <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (biattention)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_similarity_matrix</span><span class="params">(self, hq, hc, max_question_length, max_context_length, question_mask, context_mask, is_train,</span></span></span><br><span class="line"><span class="function"><span class="params">                          keep_prob)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span><span class="params">(tensor, keep)</span>:</span></span><br><span class="line">           fixed_shape = tensor.get_shape().as_list()</span><br><span class="line">           start = len(fixed_shape) - keep</span><br><span class="line"></span><br><span class="line">           <span class="comment"># Calculate (BS * MCL * MQL)</span></span><br><span class="line">           left = reduce(mul, [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start)])</span><br><span class="line"></span><br><span class="line">           <span class="comment"># out_shape is simply HS * 2</span></span><br><span class="line">           out_shape = [left] + [fixed_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(fixed_shape))]</span><br><span class="line"></span><br><span class="line">           <span class="comment"># (BS * MCL * MQL, HS * 2)</span></span><br><span class="line">           flat = tf.reshape(tensor, out_shape)</span><br><span class="line">           <span class="keyword">return</span> (flat)</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">_reconstruct</span><span class="params">(tensor, ref, keep)</span>:</span></span><br><span class="line">           ref_shape = ref.get_shape().as_list()</span><br><span class="line">           tensor_shape = tensor.get_shape().as_list()</span><br><span class="line">           ref_stop = len(ref_shape) - keep</span><br><span class="line">           tensor_start = len(tensor_shape) - keep</span><br><span class="line"></span><br><span class="line">           <span class="comment"># [BS, MCL, MQL]</span></span><br><span class="line">           pre_shape = [ref_shape[i] <span class="keyword">or</span> tf.shape(ref)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(ref_stop)]</span><br><span class="line"></span><br><span class="line">           <span class="comment"># [1]</span></span><br><span class="line">           keep_shape = [tensor_shape[i] <span class="keyword">or</span> tf.shape(tensor)[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(tensor_start, len(tensor_shape))]</span><br><span class="line">           <span class="comment"># pre_shape = [tf.shape(ref)[i] for i in range(len(ref.get_shape().as_list()[:-keep]))]</span></span><br><span class="line">           <span class="comment"># keep_shape = tensor.get_shape().as_list()[-keep:]</span></span><br><span class="line"></span><br><span class="line">           <span class="comment"># [BS, MCL, MQL, 1]</span></span><br><span class="line">           target_shape = pre_shape + keep_shape</span><br><span class="line">           out = tf.reshape(tensor, target_shape)</span><br><span class="line">           out = tf.squeeze(out, [len(args[<span class="number">0</span>].get_shape().as_list()) - <span class="number">1</span>])</span><br><span class="line">           <span class="keyword">return</span> (out)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">       d = hq.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">       logging.debug(<span class="string">"d is: &#123;&#125;"</span>.format(d))</span><br><span class="line">       hc_aug = tf.tile(tf.reshape(hc, shape=[<span class="number">-1</span>, max_context_length, <span class="number">1</span>, d]),</span><br><span class="line">                        [<span class="number">1</span>, <span class="number">1</span>, max_question_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS, MCL, MQL, HS * 2)</span></span><br><span class="line">       hq_aug = tf.tile(tf.reshape(hq, shape=[<span class="number">-1</span>, <span class="number">1</span>, max_question_length, d]),</span><br><span class="line">                        [<span class="number">1</span>, max_context_length, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># [(BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2), (BS, MCL, MQL, HS * 2)]</span></span><br><span class="line">       args = [hc_aug, hq_aug, hc_aug * hq_aug]</span><br><span class="line"></span><br><span class="line">       <span class="comment"># [(BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2), (BS * MCL * MQL, HS * 2)]</span></span><br><span class="line">       args_flat = [_flatten(arg, <span class="number">1</span>) <span class="keyword">for</span> arg <span class="keyword">in</span> args]</span><br><span class="line">       args_flat = [tf.cond(is_train, <span class="keyword">lambda</span>: tf.nn.dropout(arg, keep_prob), <span class="keyword">lambda</span>: arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args_flat]</span><br><span class="line"></span><br><span class="line">       d_concat = d * <span class="number">3</span></span><br><span class="line">       W = tf.get_variable(<span class="string">"W"</span>, shape=[d_concat, <span class="number">1</span>])</span><br><span class="line">       b = tf.get_variable(<span class="string">"b"</span>, shape=[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Calculating a(h, u) = w_s^(t)[h; u; h * u]</span></span><br><span class="line">       <span class="comment"># (BS * MCL * MQL, HS * 6) @ (HS * 6, 1) + (1) -&gt; (BS * MCL * MQL, 1)</span></span><br><span class="line">       res = tf.concat(args_flat, <span class="number">1</span>) @ W + b</span><br><span class="line"></span><br><span class="line">       <span class="comment"># (BS * MCL * MQL, 1) -&gt; (BS, MCL, MQL)</span></span><br><span class="line">       similarity_matrix = _reconstruct(res, args[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">       logging.debug(<span class="string">"similiarity_matrix after reconstruct: &#123;&#125;"</span>.format(similarity_matrix.get_shape()))</span><br><span class="line">       context_mask_aug = tf.tile(tf.expand_dims(context_mask, <span class="number">2</span>), [<span class="number">1</span>, <span class="number">1</span>, max_question_length])</span><br><span class="line">       question_mask_aug = tf.tile(tf.expand_dims(question_mask, <span class="number">1</span>), [<span class="number">1</span>, max_context_length, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">       mask_aug = context_mask_aug &amp; question_mask_aug</span><br><span class="line">       similarity_matrix = softmax_mask_prepro(similarity_matrix, mask_aug)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (similarity_matrix)</span><br></pre></td></tr></table></figure><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>内容段落摘自维基百科文章中的536篇文章，包含107,785对问题和答案，这使得SQuAD显着大于以前任何人类标注的数据集。在该数据集中，80％的数据用于训练，10％用于验证, 剩余10％用于测试。在训练集中，进一步划分出5％用于训练时的验证。</p><p>与其他问答数据集相比，SQUAD具有比较独特的特征，所有答案都是出自相应的上下文中。对于每一个段落, 众包人员生成几个问题，并选择原段落中的一小段作为答案. 答案由两个index组成, 对应答案在段落中的起始位置。因此，SQuAD数据集的答案可能比其他以单个单词和实体为答案为主的数据集长得多。实例:</p><blockquote><p>Question:<br>Why was Tesla returned to Gospic?</p></blockquote><blockquote><p>Context paragraph:<br>On 24 March 1879, Tesla was returned to Gospicunder police guard for <strong>not having a residence permit</strong>…</p></blockquote><blockquote><p>Answer:<br>{12, 16}</p></blockquote><h3 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h3><p>词向量使用预训练好的 Glove embedding.</p><blockquote><p>Glove is a log-bilinear regression model that combines the advantages of global matrix factorization and local context window methods.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_glove_embeddings</span><span class="params">(embed_path)</span>:</span></span><br><span class="line">    logger.info(<span class="string">"Loading glove embedding..."</span>)</span><br><span class="line">    glove = np.load(embed_path)[<span class="string">'glove'</span>]</span><br><span class="line">    logger.info(<span class="string">"Dimension: &#123;&#125;"</span>.format(glove.shape[<span class="number">1</span>]))</span><br><span class="line">    logger.info(<span class="string">"Vocabulary: &#123;&#125;"</span> .format(glove.shape[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">return</span> glove</span><br><span class="line"></span><br><span class="line">embeddings = load_glove_embeddings(embed_path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_embeddings</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_embeddings</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Loads distributed word representations based on placeholder tokens</span></span><br><span class="line"><span class="string">        :return: embeddings representaion of question and context.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"embeddings"</span>):</span><br><span class="line">            <span class="keyword">if</span> self.config.RE_TRAIN_EMBED:</span><br><span class="line">                embeddings = tf.get_variable(<span class="string">"embeddings"</span>, initializer=self.embeddings)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                embeddings = tf.cast(self.embeddings, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">            question_embeddings = tf.nn.embedding_lookup(embeddings, self.question_placeholder)</span><br><span class="line">            question_embeddings = tf.reshape(question_embeddings,</span><br><span class="line">                        shape = [<span class="number">-1</span>, self.max_question_length_placeholder, self.config.embedding_size])</span><br><span class="line"></span><br><span class="line">            context_embeddings = tf.nn.embedding_lookup(embeddings, self.context_placeholder)</span><br><span class="line">            context_embeddings = tf.reshape(context_embeddings,</span><br><span class="line">                        shape = [<span class="number">-1</span>, self.max_context_length_placeholder, self.config.embedding_size])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> question_embeddings, context_embeddings</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>整体的模型由Embedding层，Encodr层，Attention层，Decoder层组成</p><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>编码器就是一个双向GRU层:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    In a generalized encode function, you pass in your inputs,</span></span><br><span class="line"><span class="string">    masks, and an initial hidden state input into this function.</span></span><br><span class="line"><span class="string">    :param inputs: Symbolic representations of your input</span></span><br><span class="line"><span class="string">    :param masks: this is to make sure tf.nn.dynamic_rnn doesn't iterate</span></span><br><span class="line"><span class="string">                  through masked steps</span></span><br><span class="line"><span class="string">    :param encoder_state_input: (Optional) pass this as initial hidden state</span></span><br><span class="line"><span class="string">                                to tf.nn.dynamic_rnn to build conditional representations</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">            outputs: The RNN output Tensor</span></span><br><span class="line"><span class="string">                      an encoded representation of your input.</span></span><br><span class="line"><span class="string">                      It can be context-level representation,</span></span><br><span class="line"><span class="string">                      word-level representation, or both.</span></span><br><span class="line"><span class="string">            state: The final state.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state_size)</span>:</span></span><br><span class="line">        self.state_size = state_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, inputs, masks, initial_state_fw=None, initial_state_bw=None, reuse=False, keep_prob = <span class="number">1.0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BiGRU_layer(inputs, masks, self.state_size, initial_state_fw, initial_state_bw, reuse, keep_prob)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BiGRU_layer</span><span class="params">(inputs, masks, state_size, initial_state_fw=None, initial_state_bw=None, reuse = False, keep_prob=<span class="number">1.0</span>)</span>:</span></span><br><span class="line">        <span class="string">''' Wrapped BiGRU_layer for reuse'''</span></span><br><span class="line">        <span class="comment"># 'outputs' is a tensor of shape [batch_size, max_time, cell_state_size]</span></span><br><span class="line">        cell_fw = tf.contrib.rnn.GRUCell(state_size, reuse = reuse)</span><br><span class="line">        cell_fw = tf.contrib.rnn.DropoutWrapper(cell_fw, input_keep_prob = keep_prob)</span><br><span class="line"></span><br><span class="line">        cell_bw = tf.contrib.rnn.GRUCell(state_size, reuse = reuse)</span><br><span class="line">        cell_bw = tf.contrib.rnn.DropoutWrapper(cell_bw, input_keep_prob = keep_prob)</span><br><span class="line"></span><br><span class="line">        sequence_length = tf.reduce_sum(tf.cast(masks, <span class="string">'int32'</span>), axis=<span class="number">1</span>)</span><br><span class="line">        sequence_length = tf.reshape(sequence_length, [<span class="number">-1</span>,])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Outputs Tensor shaped: [batch_size, max_time, cell.output_size]</span></span><br><span class="line">        (outputs_fw, outputs_bw), (final_state_fw, final_state_bw) = tf.nn.bidirectional_dynamic_rnn(</span><br><span class="line">                                            cell_fw = cell_fw,\</span><br><span class="line">                                            cell_bw = cell_bw,\</span><br><span class="line">                                            inputs = inputs,\</span><br><span class="line">                                            sequence_length = sequence_length,</span><br><span class="line">                                            initial_state_fw = initial_state_fw,\</span><br><span class="line">                                            initial_state_bw = initial_state_bw,</span><br><span class="line">                                            dtype = tf.float32)</span><br><span class="line"></span><br><span class="line">        outputs = tf.concat([outputs_fw, outputs_bw], <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> outputs, final_state_fw, final_state_bw</span><br></pre></td></tr></table></figure><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>解码器也包含一个双向GRU层，输出的状态分别由两个softmax分类器计算出预测的答案的 start 和 end index 位置:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    takes in a knowledge representation</span></span><br><span class="line"><span class="string">    and output a probability estimation over</span></span><br><span class="line"><span class="string">    all paragraph tokens on which token should be</span></span><br><span class="line"><span class="string">    the start of the answer span, and which should be</span></span><br><span class="line"><span class="string">    the end of the answer span.</span></span><br><span class="line"><span class="string">    :param knowledge_rep: it is a representation of the paragraph and question,</span></span><br><span class="line"><span class="string">                          decided by how you choose to implement the encoder</span></span><br><span class="line"><span class="string">    :return: (start, end)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, output_size, state_size=None)</span>:</span></span><br><span class="line">        self.output_size = output_size</span><br><span class="line">        self.state_size = state_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, knowledge_rep, mask, max_input_length, keep_prob = <span class="number">1.0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''Decode with BiGRU'''</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'Modeling'</span>):</span><br><span class="line">            outputs, _, _ = BiGRU_layer(knowledge_rep, mask, self.state_size, keep_prob=keep_prob)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"start"</span>):</span><br><span class="line">            start = self.get_logit(outputs, max_input_length)</span><br><span class="line">            start = softmax_mask_prepro(start, mask)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"end"</span>):</span><br><span class="line">            end = self.get_logit(outputs, max_input_length)</span><br><span class="line">            end = softmax_mask_prepro(end, mask)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (start, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_logit</span><span class="params">(self, inputs, max_inputs_length)</span>:</span></span><br><span class="line">        <span class="string">''' Get the logit (-inf, inf). '''</span></span><br><span class="line">        d = inputs.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">assert</span> inputs.get_shape().ndims == <span class="number">3</span>, (<span class="string">"Got &#123;&#125;"</span>.format(inputs.get_shape().ndims))</span><br><span class="line">        inputs = tf.reshape(inputs, shape = [<span class="number">-1</span>, d])</span><br><span class="line">        W = tf.get_variable(<span class="string">'W'</span>, initializer=tf.contrib.layers.xavier_initializer(),</span><br><span class="line">                             shape=(d, <span class="number">1</span>), dtype=tf.float32)</span><br><span class="line">        pred = tf.matmul(inputs, W)</span><br><span class="line">        pred = tf.reshape(pred, shape = [<span class="number">-1</span>, max_inputs_length])</span><br><span class="line">        tf.summary.histogram(<span class="string">'logit'</span>, pred)</span><br><span class="line">        <span class="keyword">return</span> pred</span><br></pre></td></tr></table></figure></p><h3 id="搭建整个系统"><a href="#搭建整个系统" class="headerlink" title="搭建整个系统"></a>搭建整个系统</h3><p>在整个QASystem类中初始化这些功能层:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QASystem</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, embeddings, config)</span>:</span></span><br><span class="line">        <span class="string">""" Initializes System """</span></span><br><span class="line">        self.embeddings = embeddings</span><br><span class="line">        self.config = config</span><br><span class="line"></span><br><span class="line">        self.encoder = Encoder(config.encoder_state_size)</span><br><span class="line">        self.decoder = Decoder(output_size=config.output_size, state_size = config.decoder_state_size)</span><br><span class="line">        self.attention = Attention()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ==== set up placeholder tokens ========</span></span><br><span class="line">        self.context_placeholder = tf.placeholder(tf.int32, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line">        self.context_mask_placeholder = tf.placeholder(tf.bool, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line">        self.question_placeholder = tf.placeholder(tf.int32, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line">        self.question_mask_placeholder = tf.placeholder(tf.bool, shape=(<span class="keyword">None</span>, <span class="keyword">None</span>))</span><br><span class="line"></span><br><span class="line">        self.answer_start_placeholder = tf.placeholder(tf.int32)</span><br><span class="line">        self.answer_end_placeholder = tf.placeholder(tf.int32)</span><br><span class="line"></span><br><span class="line">        self.max_context_length_placeholder = tf.placeholder(tf.int32)</span><br><span class="line">        self.max_question_length_placeholder = tf.placeholder(tf.int32)</span><br><span class="line">        self.dropout_placeholder = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ==== assemble pieces ====</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(self.config.which_model, initializer=tf.uniform_unit_scaling_initializer(<span class="number">1.0</span>)):</span><br><span class="line">            self.question_embeddings, self.context_embeddings = self.setup_embeddings()</span><br><span class="line">            self.preds = self.setup_system()</span><br><span class="line">            self.loss = self.setup_loss(self.preds)</span><br><span class="line">            self.f1_train = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            self.EM_train = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            self.f1_val = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            self.EM_val = tf.Variable(<span class="number">0.</span>, tf.float64)</span><br><span class="line">            tf.summary.scalar(<span class="string">'f1_train'</span>, self.f1_train)</span><br><span class="line">            tf.summary.scalar(<span class="string">'EM_train'</span>, self.EM_train)</span><br><span class="line">            tf.summary.scalar(<span class="string">'f1_val'</span>, self.f1_val)</span><br><span class="line">            tf.summary.scalar(<span class="string">'EM_val'</span>, self.EM_val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ==== set up training/updating procedure ====</span></span><br><span class="line">        <span class="string">''' With gradient clipping'''</span></span><br><span class="line">        opt_op = get_optimizer(self.config.optimizer, self.loss, config.max_gradient_norm, config.learning_rate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> config.exdma_weight_decay <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.train_op = self.build_exdma(opt_op)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.train_op = opt_op</span><br><span class="line">        self.merged = tf.summary.merge_all()</span><br></pre></td></tr></table></figure></p><p>把各个功能层搭建成一个完整的模型:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_system</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Connect all parts of your system here:</span></span><br><span class="line"><span class="string">    After your modularized implementation of encoder and decoder</span></span><br><span class="line"><span class="string">    you should call various functions inside encoder, decoder here</span></span><br><span class="line"><span class="string">    to assemble your reading comprehension system!</span></span><br><span class="line"><span class="string">    context: [None, max_context_length, d]</span></span><br><span class="line"><span class="string">    question: [None, max_question_length, d]</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    d = self.context_embeddings.get_shape().as_list()[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">'''Step 1: encode context and question, respectively, with independent weights</span></span><br><span class="line"><span class="string">    e.g. hq = encode_question(question)  # get U (d*J) as representation of q</span></span><br><span class="line"><span class="string">    e.g. hc = encode_context(context, q_state)   # get H (d*T) as representation of x</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'question'</span>):</span><br><span class="line">        hq, question_state_fw, question_state_bw = \</span><br><span class="line">            self.encoder.BiGRU_encode(self.question_embeddings, self.question_mask_placeholder,</span><br><span class="line">                                keep_prob = self.dropout_placeholder)</span><br><span class="line">        <span class="keyword">if</span> self.config.QA_ENCODER_SHARE:</span><br><span class="line">            hc, context_state_fw, context_state_bw =\</span><br><span class="line">                 self.encoder.BiGRU_encode(self.context_embeddings, self.context_mask_placeholder,</span><br><span class="line">                         initial_state_fw = question_state_fw, initial_state_bw = question_state_bw,</span><br><span class="line">                         reuse = <span class="keyword">True</span>, keep_prob = self.dropout_placeholder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.config.QA_ENCODER_SHARE:</span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'context'</span>):</span><br><span class="line">            hc, context_state_fw, context_state_bw =\</span><br><span class="line">                 self.encoder.BiGRU_encode(self.context_embeddings, self.context_mask_placeholder,</span><br><span class="line">                         initial_state_fw = question_state_fw, initial_state_bw = question_state_bw,</span><br><span class="line">                                     keep_prob=self.dropout_placeholder)</span><br><span class="line"></span><br><span class="line">    d_Bi = self.config.encoder_state_size*<span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> hc.get_shape().as_list() == [<span class="keyword">None</span>, <span class="keyword">None</span>, d_Bi], (</span><br><span class="line">            <span class="string">"Expected &#123;&#125;, got &#123;&#125;"</span>.format([<span class="keyword">None</span>, self.max_context_length_placeholder,</span><br><span class="line">            self.config.encoder_state_size], hc.get_shape().as_list()))</span><br><span class="line">    <span class="keyword">assert</span> hq.get_shape().as_list() == [<span class="keyword">None</span>, <span class="keyword">None</span>, d_Bi], (</span><br><span class="line">            <span class="string">"Expected &#123;&#125;, got &#123;&#125;"</span>.format([<span class="keyword">None</span>, self.max_question_length_placeholder,</span><br><span class="line">            self.config.encoder_state_size], hq.get_shape().as_list()))</span><br><span class="line"></span><br><span class="line">    <span class="string">'''Step 2: combine context hidden state(hc) and question hidden state(hq) with attention</span></span><br><span class="line"><span class="string">         measured similarity = hc.T * hq</span></span><br><span class="line"><span class="string">         Context-to-query (C2Q) attention signifies which query words are most relevant to each P context word.</span></span><br><span class="line"><span class="string">            attention_c2q = softmax(similarity)</span></span><br><span class="line"><span class="string">            hq_hat = sum(attention_c2q*hq)</span></span><br><span class="line"><span class="string">         Query-to-context (Q2C) attention signifies which context words have the closest similarity</span></span><br><span class="line"><span class="string">            to one of the query words and are hence critical for answering the query.</span></span><br><span class="line"><span class="string">            attention_q2c = softmax(similarity.T)</span></span><br><span class="line"><span class="string">            hc_hat = sum(attention_q2c*hc)</span></span><br><span class="line"><span class="string">         combine with β activation: β function can be an arbitrary trainable neural network</span></span><br><span class="line"><span class="string">         g = β(hc, hq, hc_hat, hq_hat)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># concat[h, u_a, h*u_a, h*h_a]</span></span><br><span class="line">    attention = self.attention.forwards_bilinear(hc, hq, self.context_mask_placeholder, self.question_mask_placeholder,</span><br><span class="line">                                max_context_length_placeholder = self.max_context_length_placeholder,</span><br><span class="line">                                max_question_length_placeholder = self.max_question_length_placeholder,</span><br><span class="line">                                is_train=(self.dropout_placeholder &lt; <span class="number">1.0</span>), keep_prob=self.dropout_placeholder)</span><br><span class="line">    d_com = d_Bi*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">'''Step 3: decoding   '''</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"decoding"</span>):</span><br><span class="line">        start, end = self.decoder.BiGRU_decode(attention, self.context_mask_placeholder,</span><br><span class="line">                                self.max_context_length_placeholder, self.dropout_placeholder)</span><br><span class="line">    <span class="keyword">return</span> start, end</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Standford question and answer dataset &lt;a href=&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;(SQuAD)&lt;/a&gt; 是由 Rajpurkar 等人提出的一个较有挑战性的阅读理解数据集。该数据集包含 10 万个（问题，原文，答案）三元组，原文来自于 536 篇维基百科文章，而问题和答案的构建主要是通过众包的方式，让标注人员提出最多 5 个基于文章内容的问题并提供正确答案，且答案出现在原文中。SQuAD 和之前的完形填空类阅读理解数据集如 CNN/DM，CBT 等最大的区别在于：SQuAD 中的答案不在是单个实体或单词，而可能是一段短语，这使得其答案更难预测。SQuAD 包含公开的训练集和开发集，以及一个隐藏的测试集，其采用了与 ImageNet 类似的封闭评测的方式，研究人员需提交算法到一个开放平台，并由 SQuAD 官方人员进行测试并公布结果。&lt;/p&gt;
&lt;p&gt;由于 SQuAD 的答案限定于来自原文，模型只需要判断原文中哪些词是答案即可，因此是一种抽取式的 QA 任务而不是生成式任务。简单的 SQuAD 的模型框架可以参考seq2seq：Embed 层，Encode 层 和 Decode 层。Embed 层负责将原文和问题中的 tokens 映射为向量表示；Encode 层主要使用 RNN 来对原文和问题进行编码，这样编码后每个 token 的向量表示就蕴含了上下文的语义信息；Decode 层则基于 query-aware 的原文表示来预测答案起始位置。&lt;/p&gt;
&lt;p&gt;但这个文本数据集涉及问题，原文，答案三个部分, 特别是需要根据问题在原文中搜寻答案的范围, 这就涉及如果把问题的信息提取出来并作用于原文. 目前各种前沿模型的关注点几乎都是在如何捕捉问题和原文之间的交互关系，也就是在 Encode 层和 Decode 层之间, 使用一个 Interaction 层处理编码了问题语义信息的原文表示，即 query-aware 的原文表示，再输入给 Decode 层。而本来应用机器翻译Attention机制就能很好的处理这种交互。&lt;br&gt;
    
    </summary>
    
      <category term="人工智能" scheme="http://shukebeta.me/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="TensorFlow" scheme="http://shukebeta.me/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>注意力机制</title>
    <link href="http://shukebeta.me/attention/"/>
    <id>http://shukebeta.me/attention/</id>
    <published>2018-06-30T23:00:00.000Z</published>
    <updated>2018-08-21T19:09:27.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h2><p>注意力机制就是为了解决机器翻译中为不同的对应词分配权重的提出的 <a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">Bahdanau, D., Cho, K., &amp; Bengio, Y. (2014)</a>。以英语 - 法语翻译为例，给定一对英语输入序列“They”、“are”、“watching”、“.”和法语输出序列“Ils”、“regardent”、“.”。解码器可以在输出序列的时间步 1 使用更集中编码了“They”、“are”信息的背景变量来生成“Ils”，在时间步 2 使用更集中编码了“watching”信息的背景变量来生成“regardent”，在时间步 3 使用更集中编码了“.”信息的背景变量来生成“.”。这看上去就像是在解码器的每一时间步对输入序列中不同时间步编码的信息分配不同的注意力。<br><a id="more"></a></p><p><strong>目标</strong>：<br>对于解码器的每一个时间步$t’$, 生成一个背景向量$c_{t’}$来捕捉相关的解码器信息, 以用于预测输出目标值$y_{t’}$.</p><p><strong>具体步骤</strong>：<br>解码器在时间步 $t’$ 的隐藏状态</p><p>$$s_{t’} = g(y_{t’-1}, c_{t’}, s_{t’-1}).$$</p><p>令编码器在时间 $t$ 的隐藏状态为 $h_t$，且总时间步数为 $T$。解码器在时间步 $t’$ 的背景变量为</p><p>$$c_{t’} = \sum_{t=1}^T \alpha_{t’ t} h_t,$$</p><p>其中 $\alpha_{t’ t}$ 是权重，用于给定解码器的当前隐藏状态 $s_{t’}$，对编码器中不同时间步的隐藏状态$h_t$求加权平均。这里的权值也称注意力权重：</p><p>$$\alpha_{t’ t} = align(s_{t’}, h_t) = \frac{\exp(score(t’ t))}{ \sum_{t=1}^T \exp(score(t’ t)) },$$</p><p>其中 $score(t’ t) \in \mathbb{R}$ 的计算为</p><p>$$score(t’ t) = a(s_{t’ - 1}, h_t).$$</p><p>上式中的score打分函数 $score(t’ t)$ 有多种设计方法。Bahanau 等使用了多层感知机：</p><p>$$e_{t’t} = v^\top \tanh(W_s s_{t’ - 1} + W_h h_t),$$</p><p>其中 $v$、$W_s$、$W_h$ 以及编码器与解码器中的各个权重和偏差都是模型参数。</p><p>Bahanau 等在编码器和解码器中分别使用了门控循环单元GRU。在解码器中，我们需要对门控循环单元的设计稍作修改。解码器在 $t’ $ 时间步的隐藏状态为</p><p>$$s_{t’} = z_{t’} \odot s_{t’-1}  + (1 - z_{t’}) \odot \tilde{s}_{t’},$$</p><p>其中的重置门、更新门和候选隐含状态分别为</p><p>$$<br>\begin{aligned}<br>r_{t’} &amp;= \sigma(W_{yr} y_{t’-1} + W_{sr} s_{t’ - 1} + W_{cr} c_{t’} + b_r), \\<br>z_{t’} &amp;= \sigma(W_{yz} y_{t’-1} + W_{sz} s_{t’ - 1} + W_{cz} c_{t’} + b_z),\\<br>\tilde{s_{t’}} &amp;= \text{tanh}(W_{ys} y_{t’-1} + W_{ss} (s_{t’ - 1} \odot r_{t’}) + W_{cs} c_{t’} + b_s).<br>\end{aligned}<br>$$</p><p>然后，给定目标(解码器)隐藏状态$h_{t’}$, 以及背景向量$c_{t’}$, 通过使用简单的并联层合并这两个向量的信息, 来生成所谓的注意力隐藏状态:</p><p>$$\tilde{h_{t’}} = \tanh(W_c[c_{t’} : h_{t’}]) $$</p><p>这个注意力向量 $\tilde{h_t}$ 之后会通过一个softmax层来生成预测的概率分布.</p><h3 id="全局注意力机制"><a href="#全局注意力机制" class="headerlink" title="全局注意力机制"></a>全局注意力机制</h3><p><a href="https://arxiv.org/pdf/1508.04025.pdf" target="_blank" rel="noopener">Luong  et  al. (2015)</a>提出了两种注意力机制的变种：全局（global）和局部（local）注意力机制。区别在于“注意力”是放在所有源位置或仅放置在少数源位置。</p><blockquote><p>The idea of a global attentional model is to consider all the hidden states of the encoder when deriving the context vector $c_t$.</p></blockquote><p><img src="/images/global_attention.png" alt="" title="image from: lLuong  et  al. (2015)"><br>两种注意力机制区别就在于如何生成背景向量$c_{t’}$.</p><p>Luong  et  al. (2015) 给出了几种打分函数的计算</p><p>$$<br>\begin{aligned}<br>    score_{dot}(t’ t) &amp;= s^\top_{t’}h_t \\<br>    score_{general}(t’ t) &amp;= s^\top_{t’} W_\alpha h_t, \\<br>    score_{concat}(t’ t) &amp;= v^\top_\alpha \tanh (W_\alpha[s_{t’} : h_t])<br>\end{aligned}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意力机制&quot;&gt;&lt;a href=&quot;#注意力机制&quot; class=&quot;headerlink&quot; title=&quot;注意力机制&quot;&gt;&lt;/a&gt;注意力机制&lt;/h2&gt;&lt;p&gt;注意力机制就是为了解决机器翻译中为不同的对应词分配权重的提出的 &lt;a href=&quot;https://arxiv.org/abs/1409.0473&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bahdanau, D., Cho, K., &amp;amp; Bengio, Y. (2014)&lt;/a&gt;。以英语 - 法语翻译为例，给定一对英语输入序列“They”、“are”、“watching”、“.”和法语输出序列“Ils”、“regardent”、“.”。解码器可以在输出序列的时间步 1 使用更集中编码了“They”、“are”信息的背景变量来生成“Ils”，在时间步 2 使用更集中编码了“watching”信息的背景变量来生成“regardent”，在时间步 3 使用更集中编码了“.”信息的背景变量来生成“.”。这看上去就像是在解码器的每一时间步对输入序列中不同时间步编码的信息分配不同的注意力。&lt;br&gt;
    
    </summary>
    
      <category term="人工智能" scheme="http://shukebeta.me/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms - Princeton</title>
    <link href="http://shukebeta.me/algorithms/"/>
    <id>http://shukebeta.me/algorithms/</id>
    <published>2018-06-30T23:00:00.000Z</published>
    <updated>2018-08-20T12:23:43.051Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Algorithms, Part I, <a href="https://online.princeton.edu/course/algorithms-part-i" target="_blank" rel="noopener">https://online.princeton.edu/course/algorithms-part-i</a></li><li>Algorithms, Part II, <a href="https://online.princeton.edu/course/algorithms-part-ii" target="_blank" rel="noopener">https://online.princeton.edu/course/algorithms-part-ii</a></li><li>Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne <a href="https://algs4.cs.princeton.edu/" target="_blank" rel="noopener">https://algs4.cs.princeton.edu/</a><a id="more"></a></li></ul><h2 id="Union−Find"><a href="#Union−Find" class="headerlink" title="Union−Find"></a>Union−Find</h2><p>Considering the dynamic connectivity problem, modeling of multiple objects connected in a space/network.</p><p>Applications involve manipulating objects of all types.<br>・Pixels in a digital photo.<br>・Computers in a network.<br>・Friends in a social network.<br>・Transistors in a computer chip.</p><p>Given a set of N objects.</p><ul><li><code>union(a, b)</code>: connect two objects.</li><li><code>connected(p, q)</code>: is two objects connected?</li><li><code>find(p)</code>: Find component identifier for <code>p</code> (0 to N – 1)</li></ul><p>Modeling the objects: array.</p><p>Modeling the connections:<br>Maximal set of objects that are mutually connected - Connected components.</p><p>Data structure:</p><ol><li><p>Quick find<br>Integer array <code>id[]</code> of length N, two objects are connected iff they have the same id.<br><img src="https://algs4.cs.princeton.edu/15uf/images/quick-find-overview.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br>Defect: <code>union</code> too expensive, $\in \Theta(N^2)$.</p></li><li><p>Quick-union<br>Integer array <code>id[]</code> of length N, <code>id[i]</code> is parent of i, root of i is <code>id[id[id[...id[i]...]]]</code> (until it doesn’t change).<br><img src="https://algs4.cs.princeton.edu/15uf/images/quick-union-overview.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br>The <code>find</code> is recursive.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** chase parent pointers until reach root</span></span><br><span class="line"><span class="comment"> * (depth of i array accesses) */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i != id[i]) i = id[i];</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Defect: Trees can get tall, <code>find</code> too expensive, $\in \Theta(N)$.</p></li><li><p>Weighted quick-union<br>Modify quick-union to avoid tall trees. Balance by linking root of smaller tree to root of larger tree. Maintain extra array <code>sz[i]</code> to keep track of size of each tree (number of objects).<br><img src="https://algs4.cs.princeton.edu/15uf/images/weighted-quick-union-overview.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br><code>find</code>: time proportional to depth of p and q, the depth of any node x is at most $\log N$,</p></li><li><p>Weighted quick-union with path compression<br>Making all the nodes that examined directly link to its root. Keeps tree almost completely flat.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Make every other node in path point to its grandparent</span></span><br><span class="line"><span class="comment">* (thereby halving path length). */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i != id[i]) &#123;</span><br><span class="line">        id[i] = id[id[i]];</span><br><span class="line">        i = id[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Amortized analysis: <code>[Hopcroft-Ulman, Tarjan]</code> Starting from an empty data structure, any sequence of M union-find ops on N objects makes $≤ c ( N + M \lg \ast N )$ array accesses. $\lg \ast N$ is <a href="https://en.wikipedia.org/wiki/Iterated_logarithm" target="_blank" rel="noopener">Iterated logarithm</a>, for $N = 2^{65536}$, $\lg \ast N = 5$. In theory, WQUPC is not quite linear. In practice, WQUPC is linear.</p></li></ol><blockquote><p>Amazing fact. <code>[Fredman-Saks]</code> No linear-time algorithm exists.</p></blockquote><p><img src="https://algs4.cs.princeton.edu/15uf/images/uf-performance.png" alt="" title="Summary. image from: https://algs4.cs.princeton.edu/"></p><h2 id="Element-Sort"><a href="#Element-Sort" class="headerlink" title="Element Sort"></a>Element Sort</h2><p>Two elementary sorting methods: selection sort and insertion sort. Shellsort is a variation of one of them.</p><blockquote><p>The objective is to rearrange the items such that their keys are in ascending order.</p></blockquote><p>In Java, the abstract notion of a key is captured by the Comparable interface. The Comparable interface provides an elegant API for callback when Java need to compare keys.</p><p>Some background knowlege:</p><ul><li>Cost model, please refer to <a href="/NOTE-data-structures-efficient-programming#Asymptotic-Analysis">Asymptotic Analysis</a></li><li>Sorting cost model. How many compares and exchanges, or array accesses, for a sorting.</li><li>Memory. There are sorting algorithms that sort in place (no extra memory except perhaps for a small function-call stack or a constant number of instance variables), and those that need enough extra memory to hold another copy of the array to be sorted.</li></ul><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><p>Repeatedly selecting the smallest remaining item:</p><ol><li>Find the smallest item in the array, and exchange it with the first entry.</li><li>Find the next smallest item and exchange it with the second entry.</li><li>Continue until the entire array is sorted.<br><img src="https://algs4.cs.princeton.edu/21elementary/images/selection.png" alt="" title="image from: https://algs4.cs.princeton.edu/"></li></ol><p>Selection sort uses ~$n^2/2$ compares and n exchanges to sort an array of length n.</p><h3 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h3><p>Works like people sort Pokers: consider the cards one at a time, inserting each into its proper place among those already considered (keeping them sorted).<br><img src="https://algs4.cs.princeton.edu/21elementary/images/insertion.png" alt="" title="image from: https://algs4.cs.princeton.edu/"><br>In a computer implementation, we need to make space for the current item by moving larger items one position to the right, before inserting the current item into the vacated position.</p><blockquote><p>For randomly ordered arrays of length N with distinct keys, insertion sort uses ~$N^2/4$ compares and ~$N^2/4$ exchanges on the average. The worst case is ~ $N^2/2$ compares and ~ $N^2/2$ exchanges and the best case is $N-1$ compares and 0 exchanges.</p></blockquote><blockquote><p>Insertion sort works well for certain types of nonrandom arrays that often arise in practice, even if they are huge. An inversion is a pair of keys that are out of order in the array. For instance, E X A M P L E has 11 inversions: E-A, X-A, X-M, X-P, X-L, X-E, M-L, M-E, P-L, P-E, and L-E. If the number of inversions in an array is less than a constant multiple of the array size, we say that the array is partially sorted.</p></blockquote><h3 id="Shellsort"><a href="#Shellsort" class="headerlink" title="Shellsort"></a>Shellsort</h3><p>Shellsort gains speed by allowing exchanges of entries that are far apart, to produce partially sorted arrays that can be efficiently sorted, eventually by insertion sort.</p><p>The idea is to rearrange the array to give it the property that taking every $h_{th}$ entry (starting anywhere) yields a sorted sequence. Such an array is said to be h-sorted.<img src="https://algs4.cs.princeton.edu/21elementary/images/h-sorted.png" alt="" title="image from: https://algs4.cs.princeton.edu/">By h-sorting for some large values of h, we can move entries in the array long distances and thus make it easier to h-sort for smaller values of h. Using such a procedure for any increment sequence of values of h that ends in 1 will produce a sorted array:<img src="https://algs4.cs.princeton.edu/21elementary/images/shell.png" alt="" title="image from: https://algs4.cs.princeton.edu/"></p><blockquote><p>The number of compares used by shellsort with the increments 1, 4, 13, 40, 121, 364, … is O(N^{3/2}).</p></blockquote><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>Merging means combining two ordered arrays to make one larger ordered array. Merge sort is an utility of divide and conquer paradigm.</p><p>Mergesort guarantees to sort an array of N items in time proportional to $N \log N$, no matter what the input. But it uses extra space proportional to N. Specifically, mergesort uses between $1/2 N \lg N$ and $N \lg N$ compares and at most $6 N \lg N$ array accesses to sort any array of length N.</p><blockquote><p><strong>Abstract in-place merge</strong>: The method <code>merge(a, lo, mid, hi)</code> in <a href="https://algs4.cs.princeton.edu/22mergesort/Merge.java.html" target="_blank" rel="noopener">Merge.java</a> puts the results of merging the subarrays <code>a[lo..mid]</code> with <code>a[mid+1..hi]</code> into a single ordered array, leaving the result in <code>a[lo..hi]</code>. While it would be desirable to implement this method without using a significant amount of extra space, such solutions are remarkably complicated.</p></blockquote><h3 id="Top-down-mergesort"><a href="#Top-down-mergesort" class="headerlink" title="Top-down mergesort"></a>Top-down mergesort</h3><p>A recursive mergesort implementation based on this abstract in-place merge.<br><img src="https://algs4.cs.princeton.edu/22mergesort/images/mergesortTD.png" alt="" title="image from: https://algs4.cs.princeton.edu/"></p><h3 id="Bottom-up-mergesort"><a href="#Bottom-up-mergesort" class="headerlink" title="Bottom-up mergesort"></a>Bottom-up mergesort</h3><p>Do all the merges of tiny arrays on one pass, then do a second pass to merge those arrays in pairs, and so forth, continuing until we do a merge that encompasses the whole array.</p><ol><li>We start by doing a pass of 1-by-1 merges</li><li>then a pass of 2-by-2 merges (merge subarrays of size 2 to make subarrays of size 4),</li><li>then 4-by-4 merges, and so forth.</li></ol><blockquote><p>Proposition: No compare-based sorting algorithm can guarantee to sort N items with fewer than $lg(N!)$ ~ $N \lg N$ compares.<br>Proposition. Mergesort is an asymptotically optimal compare-based sorting algorithm. That is, both the number of compares used by mergesort in the worst case and the minimum number of compares that any compare-based sorting algorithm can guarantee are ~N lg N.</p></blockquote><h3 id="Mergesort-Applications"><a href="#Mergesort-Applications" class="headerlink" title="Mergesort Applications"></a>Mergesort Applications</h3><p>Counting inversions: An inversion in an array <code>a[]</code> is a pair of entries <code>a[i]</code> and <code>a[j]</code> such that <code>i &lt; j</code> but <code>a[i] &gt; a[j]</code>. Given an array, design a linearithmic algorithm to count the number of inversion.</p><blockquote><p>count while mergesorting.</p></blockquote><p>Shuffling a linked list: Given a singly-linked list containing n items, rearrange the items uniformly at random. Your algorithm should consume a logarithmic (or constant) amount of extra memory and run in time proportional to $n \log n$ in the worst case:</p><blockquote><p>Design a linear-time subroutine that can take two uniformly shuffled linked lists of sizes $n_1$ and $n_2$ and combined them into a uniformly shuffled linked lists of size $n_1 + n_2$.</p></blockquote><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Algorithms, Part I, &lt;a href=&quot;https://online.princeton.edu/course/algorithms-part-i&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://online.princeton.edu/course/algorithms-part-i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithms, Part II, &lt;a href=&quot;https://online.princeton.edu/course/algorithms-part-ii&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://online.princeton.edu/course/algorithms-part-ii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne &lt;a href=&quot;https://algs4.cs.princeton.edu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://algs4.cs.princeton.edu/&lt;/a&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="Algorithms" scheme="http://shukebeta.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Efficient Programming in Java - A preview of Algorithms and Data Structures</title>
    <link href="http://shukebeta.me/NOTE-data-structures-efficient-programming/"/>
    <id>http://shukebeta.me/NOTE-data-structures-efficient-programming/</id>
    <published>2018-06-25T23:00:00.000Z</published>
    <updated>2018-07-25T09:48:14.758Z</updated>
    
    <content type="html"><![CDATA[<p>Resource and Reference:</p><ul><li>CS61B Berkeley - Josh Hug</li><li>Algorithms Princeton - ROBERT SEDGEWICK, KEVIN WAYNE</li></ul><p>效率来源两个方面:</p><ol><li>编程成本: 开发程序需要多长时间？代码是否容易阅读，修改和维护（大部分成本来自维护和可扩展性）？</li><li>运行成本: 程序需要多长时间运行 (Time complexity)？ 需要多少内存 (Space complexity)？<a id="more"></a><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><blockquote><p>Module: A set of methods that work together as a whole to perform some task or set of related tasks.<br>Encapsulated: A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p></blockquote></li></ol><h2 id="API’s"><a href="#API’s" class="headerlink" title="API’s"></a>API’s</h2><blockquote><p>An API(Application Programming Interface) of an ADT is the list of constructors and methods and a short description of each.</p></blockquote><p>API 包括语法规范和语义规范</p><ul><li>编译器确认语法符合要求</li><li>测试帮助确认语义描述是否正确<ul><li>一般都是用英文写的(可能包含使用例子)</li></ul></li></ul><h3 id="ADT’s"><a href="#ADT’s" class="headerlink" title="ADT’s"></a>ADT’s</h3><p>Abstract Data Structures 是由其行为属性定义的抽象类型, 跟如何实现无关.</p><p>三种方式实现<code>Stack</code>的<code>push(Item x)</code>:</p><ol><li><p>使用 extension 以借用<code>LinkedList&lt;Item&gt;</code>的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtensionStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        add(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>委托模式<strong>Delegation</strong>， 生成<code>Linked List</code>并调用其方法来达到目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegationStack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Item&gt; L = <span class="keyword">new</span> LinkedList&lt;Item&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        L.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类似方法2, 只是这里可以利用任何实现了<code>List</code>接口的类, 如<code>Linked List, ArrayList</code>, 等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackAdapter</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List L;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackAdapter</span><span class="params">(List&lt;Item&gt; worker)</span> </span>&#123;</span><br><span class="line">        L = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        L.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>Delegation vs Extension: Extension 一般是基于对父类有比较清楚的了解认知下才会使用。此外，扩展基本上等于在说明正在扩展的类与被扩展类是相似的。如果两个类无法看做是同属的, 那么就用委托模式。</p><p>Views: 通过视图进行的更改会影响底层对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Create an ArrayList. */</span></span><br><span class="line">List&lt;String&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">/** Add some items. */</span></span><br><span class="line">L.add(“at”); L.add(“ax”); …</span><br><span class="line">List&lt;String&gt; SL = l.subList(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">/** Mutate that thing. */</span></span><br><span class="line">SL.set(<span class="number">0</span>, “jug”);</span><br></pre></td></tr></table></figure></p><h2 id="Asymptotic-Analysis"><a href="#Asymptotic-Analysis" class="headerlink" title="Asymptotic Analysis"></a>Asymptotic Analysis</h2><p>Care about what happens for very large <code>N</code> (asymptotic behavior). We want to consider what types of algorithms would best handle scalability - Algorithms that scale well have better asymptotic runtime behavior.</p><p>Simplification Summary</p><ol><li>Only consider the worst case.</li><li>Pick a representative operation (aka: cost model)</li><li>Ignore lower order terms</li><li>Ignore multiplicative constants.</li></ol><p>Simplified Analysis Process</p><ol><li>Choose cost model (representative operation)</li><li>Figure out the order of growth for the count of representative operation by either:<ul><li>Making an exact count, and discarding unnecessary pieces<ul><li>Only consider the worst case.</li><li>Ignore lower order terms</li><li>Ignore constants.</li></ul></li><li>Or, using intuition/inspection to determine orders of growth.</li></ul></li></ol><h3 id="Big-Theta"><a href="#Big-Theta" class="headerlink" title="Big Theta"></a>Big Theta</h3><p>Formalizing Order of Growth: Suppose a function $R(N)$ with order of growth $f(N)$, this is represented as $R(N) \in \Theta(f(N))$ in notation. Means that there exists positive constants $k_1, k_2$ such that: $$k_1⋅f(N)≤R(N)≤k_​2⋅f(N),$$ for all values of $N$ greater than some $N_0$(a very large N).</p><p>Procedure:</p><ul><li>Given a piece of code, express its runtime as a function $R(N)$<ul><li>$N$ is some <strong>property</strong> of the input of the function. Oftentimes, $N$ represents the size of the input</li></ul></li><li>Rather than finding $R(N)$ exactly, instead care about the order of growth of $R(N)$.</li><li>One approach (not universal):<ul><li>Choose a representative operation</li><li>Let $C(N)$ = count of how many times that operation occurs, as a function of $N$.</li><li>Determine order of growth $C(N) \in \Theta(f(N))$</li><li>Often (but not always) consider the worst case count.</li><li>If operation takes constant time, then $R(N) \in \Theta(f(N))$</li></ul></li></ul><p>在 Big Theta 的范畴内，对于涉及 logarithm 的情况，底数并不重要，任何底数都是等价的：<br>Binary search: $\Theta(\log N)$ 直接忽略底数符号。<br>Selection sort: $\Theta(N^2)$<br>Merge two sorted array (Merge Sort): $\Theta(N)$</p><p>用 merge sort 加速 selection sort - 把 selection sort 递归地平分, 总共能分解出$\log_2N$个 merge sorts, 伪代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If the list is size 1:</span><br><span class="line">    return</span><br><span class="line">else:</span><br><span class="line">    Mergesort the left half</span><br><span class="line">    Mergesort the right half</span><br><span class="line">    Merge the results</span><br></pre></td></tr></table></figure></p><p>Total runtime is $≈Nk$, where $k = \log_2(N)$ is the number of levels, overall runtime is $\Theta(N \log N)$.<br>$N^2$ vs. $N \log N$ is an enormous difference. Going from $N\log N$ to $N$ is nice, but not a radical change.</p><p>Useful math:<br>$1 + 2 + 3 + … + N = N * (N + 1) / 2 = \Theta(N^2)$<br>$1 + 2 + 4 + … + N = 2N - 1 = \Theta(N)$</p><p>To estimate a discrete sum, replace the sum with an integral, and use calculus:<br>$1 + 2 + 3 + … + N = \sum_{i=1}^{N} i \sim \int_{x=1}^N x dx \sim \frac{1}{2}(N^2)$</p><p>$1^k + 2^k + … + N^k = \sum_{i=1}^{N} i^k \sim \int_{x=1}^N x^k dx \sim \frac{1}{k+1}(N^{k+1})$</p><p>$1 + 1/2 + 1/3 + … + 1/N = \sum_{i=1}^{N} i^{-1} \sim \int_{x=1}^N x^{-1} dx \sim \ln N$</p><p>3-sum triple loop, $\sum_{i=1}^{N}\sum_{j=1}^{N}\sum_{k=1}^{N} 1 \sim \int_{x=1}^N\int_{y=x}^N\int_{z=y}^N dz dy dx \sim \frac{1}{6}N^3$</p><h3 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h3><p>Big Theta expresses the exact order of as a function of the input size. However, if the runtime depends on more than just the size of the input, then we must qualify our statements into different cases before using Big Theta.</p><p>Big O: $R(N) \in O(f(N))$, means that there exists positive constants $k_2$, such that: $R(N) \leq k_2 \cdot f(N)$ for all values of $N$ greater than some $N_0$(a very large $N$). This is a looser condition than Big Theta since Big O does not care about the lower bound, thus it is less informative than Big Theta.</p><p>To summarize the usefulness of Big O:</p><ul><li>It allows us to make simple statements without case qualifications, in cases where the runtime is different for different inputs.</li><li>Sometimes, for particularly tricky problems, we (the computer science community) don’t know the exact runtime, so we may only state an upper bound.</li><li>It’s a lot easier to write proofs for Big O than Big Theta, like we saw in finding the runtime of mergesort in the previous chapter. This is beyond the scope of this course.</li></ul><p>类似的也可以定义一个<strong>下限</strong>概念 - Big Omega ($\Omega$)， 一般用于表明一个问题的难度有多大。</p><p><img src="/images/three_Asymptotics.png" alt="" title="Three Big letters. image from: https://joshhug.gitbooks.io/"></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><blockquote><ul><li>Big O is an upper bound (“less than or equals”)</li><li>Big Omega is a lower bound (“greater than or equals”)</li><li>Big Theta is both an upper and lower bound (“equals”)</li><li>Big O does NOT mean “worst case”. We can still describe worst cases using Big Theta</li><li>Big Omega does NOT mean “best case”. We can still describe best cases using Big Theta</li><li>Big O is sometimes colloquially used in cases where Big Theta would provide a more precise statement<br>– from: <a href="https://joshhug.gitbooks.io/" target="_blank" rel="noopener">https://joshhug.gitbooks.io/</a></li></ul></blockquote><h2 id="Amortized-Analysis"><a href="#Amortized-Analysis" class="headerlink" title="Amortized Analysis"></a>Amortized Analysis</h2><p>平摊分析</p><p>假如有两种交税方式：</p><ol><li>每天付 3 金币</li><li>每次付的金币呈指数级增长，但通知付款频率呈指数级下降<ul><li>第1天：付 1</li><li>第2天：付 2 (累计 3)</li><li>第4天：付 4 (累积 7)</li><li>第8天：付 8 (累积 15)</li></ul></li></ol><p>哪种付的钱比较少？<br>第二种比较划算，本质上等同于每天付 2，就是<strong>amortized constant</strong>。</p><p>A more rigorous examination of amortized analysis is done here, in three steps:</p><ol><li>Pick a cost model (like in regular runtime analysis)</li><li>Compute the average cost of the i’th operation</li><li>Show that this average (amortized) cost is bounded by a constant.</li></ol><p>类似的应用在<a href="/NOTE-CS61B-data-structures-07-java-array-based-list#数组扩容">Array list 扩容</a>中提到的 geometric resizing 方法(实际也是Python list 使用的方法)有体现, 所以使用一个因数来扩容数组, 可以让 ArrayList 的 <code>add</code>操作变为 amortized constant time.</p><p>总结</p><blockquote><ul><li>Amortized analysis provides a way to prove the average cost of operations.</li><li>If we chose $a_i$ such that $\Phi_i$ is never negative and $a_i$ is constant for all $i$, then the amortized cost is an upper bound on the true cost.<br>– from: <a href="https://joshhug.gitbooks.io/" target="_blank" rel="noopener">https://joshhug.gitbooks.io/</a></li></ul></blockquote><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>Bit. 0 or 1.<br>Byte. 8 bits.<br>Megabyte (MB). 1 million or $2^20$ bytes.<br>Gigabyte (GB). 1 billion or $2^30$ bytes.<br>64-bit machine. We assume a 64-bit machine with 8 byte pointers (References).<br>・Can address more memory.<br>・Pointers use more space (some JVMs “compress” ordinary object pointers to 4 bytes to avoid this cost).</p><h3 id="Typical-memory-usage-for-primitive-types-and-arrays"><a href="#Typical-memory-usage-for-primitive-types-and-arrays" class="headerlink" title="Typical memory usage for primitive types and arrays"></a>Typical memory usage for primitive types and arrays</h3><p>primitive types (bytes):<br><code>boolean</code> 1<br><code>byte</code> 1<br><code>char</code> 2<br><code>int</code> 4<br><code>float</code> 4<br><code>long</code> 8<br><code>double</code> 8</p><p>for one-dimensional arrays (bytes):<br><code>char[]</code> 2N + 24<br><code>int[]</code> 4N + 24<br><code>double[]</code> 8N + 24</p><h3 id="Typical-memory-usage-for-objects-in-Java"><a href="#Typical-memory-usage-for-objects-in-Java" class="headerlink" title="Typical memory usage for objects in Java"></a>Typical memory usage for objects in Java</h3><p>Object overhead. 16 bytes.<br>Reference. 8 bytes.<br>Padding. Each object uses a multiple of 8 bytes.<br><img src="/images/string_memory/png" alt="" title="image from: https://www.coursera.org/learn/algorithms-part1/"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Resource and Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CS61B Berkeley - Josh Hug&lt;/li&gt;
&lt;li&gt;Algorithms Princeton - ROBERT SEDGEWICK, KEVIN WAYNE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效率来源两个方面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编程成本: 开发程序需要多长时间？代码是否容易阅读，修改和维护（大部分成本来自维护和可扩展性）？&lt;/li&gt;
&lt;li&gt;运行成本: 程序需要多长时间运行 (Time complexity)？ 需要多少内存 (Space complexity)？
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
      <category term="algs4" scheme="http://shukebeta.me/tags/algs4/"/>
    
  </entry>
  
  <entry>
    <title>Java 语法和特性</title>
    <link href="http://shukebeta.me/NOTE-data-structures-java-other-syntaxes/"/>
    <id>http://shukebeta.me/NOTE-data-structures-java-other-syntaxes/</id>
    <published>2018-05-28T23:00:00.000Z</published>
    <updated>2018-07-29T19:27:02.647Z</updated>
    
    <content type="html"><![CDATA[<p>Java 高级语法。<br><a id="more"></a></p><h2 id="Extends-Casting-Higher-Order-Functions"><a href="#Extends-Casting-Higher-Order-Functions" class="headerlink" title="Extends, Casting, Higher Order Functions"></a>Extends, Casting, Higher Order Functions</h2><p>定义接口之间的层次关系可以使用<code>implement</code>, <code>SLList&lt;xxx&gt; implements List61B&lt;xxx&gt;</code>. 但假如我们想要定义class之间的层次关系呢？</p><p>假设要构建一个<code>RotatingSLList</code>，它具有与<code>SLList</code>相同的功能，如<code>addFirst, size</code>等，但是需要额外的<code>rotateRight</code>操作将最后一项放到列表的前面，因为继承允许子类重用已经定义的类中的代码。所以让<code>RotatingSLList</code>类从<code>SLList</code>继承部分代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><code>RotatingSLList</code>“是一种”<code>SLList</code>, <code>extends</code>可以让我们继承<code>SLList</code>的原始功能，并能修改或添加其他功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The rotateRight method  takes in an existing list,</span></span><br><span class="line"><span class="comment">    and rotates every element one spot to the right,</span></span><br><span class="line"><span class="comment">    moving the last item to the front of the list.</span></span><br><span class="line"><span class="comment">    For example, input [5, 9, 15, 22] should return [22, 5, 9, 15].</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Item x = removeLast();</span><br><span class="line">    addFirst(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>extends</code>, 子类<strong>继承</strong>父类的所有成员，成员包括：</p><ul><li>所有实例和静态变量</li><li>所有方法</li><li>所有嵌套类</li></ul><p>但注意，构造函数不继承，并且私有成员不能被子类直接访问。</p><p>上面的例子使用父类的<code>removeLast()</code>把最后的元素直接丢弃了，但假如有一个子类<code>VengefulSLList</code>想保留被丢弃的元素呢? 考虑到子类可以直接override父类的成员, 可以override父类的<code>removeLast</code>, 通过添加一个实例变量来追踪所有已删除的元素.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    SLList&lt;Item&gt; deletedItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deleteItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = <span class="keyword">super</span>.removeLast();</span><br><span class="line">        deletedItems.addLast(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Prints deleted items. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       deletedItems.print();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Constructors-Are-Not-Inherited"><a href="#Constructors-Are-Not-Inherited" class="headerlink" title="Constructors Are Not Inherited"></a>Constructors Are Not Inherited</h3><blockquote><p>Java要求所有子类的构造函数必须先调用其某一超类的构造函数。<br>– <a href="https://docs.oracle.com/javase/tutorial/java/IandI/super.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/IandI/super.html</a></p></blockquote><p>因为逻辑上，如果作为基础的超类没有构建，那么子类的构建的无从谈起。完整的子类构造函数应该是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">// 第一行</span></span><br><span class="line">    deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之前的例子没有<code>super();</code>也可以通过编译，是因为Java会自动为我们调用超类的<strong>无参数</strong>构造函数。</p><p>具体分情况考虑：</p><ol><li>编译器会自动为任何没有构造函数的类提供一个无参数的默认构造函数：这个默认构造函数将调用其超类的（accessible）无参构造函数。</li><li><p>如果子类构造函数没有指定要调用哪个超类构造函数：则编译器将自动调用超类的可访问的<strong>无参数</strong>构造函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果其超类有<strong>有参数</strong>构造函数，但没有无参数构造函数，那么编译出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">(String s)</span> </span>&#123; &#125; &#125;</span><br></pre></td></tr></table></figure><p>此时要在子类构造函数第一行添加<code>super(s)</code></p></li><li><p>如果超类的无参数构造函数是不可访问的，那么编译出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; <span class="function"><span class="keyword">private</span> <span class="title">Base</span><span class="params">()</span> </span>&#123; &#125; &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果没有显式的超类，那么就调用隐式的超类<code>Object</code>的无参构造函数。</p></li></ul></li></ol><p>Constructor Chaining：当子类构造函数调用其父类的构造函数时（无论是显式还是隐式调用），可以认为有一链式的连续调用构造函数，一直到<code>Object</code>的构造函数</p><h3 id="The-Object-Class"><a href="#The-Object-Class" class="headerlink" title="The Object Class"></a>The Object Class</h3><p>Java中的每个类都是 <strong><code>Object</code></strong> class的后代，或者扩展了Object类。即使在类中没有显式的<code>extends</code>仍然隐式地继承了<code>Object</code>。也就是所有 classes 都继承了 Object class 提供的方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">Class&lt;?&gt; <span class="title">getClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span></span></span><br><span class="line"><span class="function">-- https:<span class="comment">//docs.oracle.com/javase/8/docs/api/java/lang/Object.html</span></span></span><br></pre></td></tr></table></figure></p><p><code>==</code>检查两个变量是否引用同一个对象（检查内存地址位）; <code>.equals()</code>默认是等同于<code>==</code>, 但不同的类可能会通过 override 重写它的功能(如<code>Array.equals()</code>就是重写为检查数组内容是否相同). 当override <code>.equals()</code>时，注意：</p><ol><li>必须体现 equivalence relation<ul><li>reflexive: x.equals(x) is true</li><li>symmetric: x.equals(y) IFF y.equals(x)</li><li>transitive: x.equals(y) and y.equals(z) implies x.equals(z)</li></ul></li><li>要 override 原本的<code>.equals()</code>，必须接收一个 Object 参数</li><li>必须 consistent：假如<code>x.equals(y)</code>, 那么只要<code>x</code>和<code>y</code>保持不变, 那么<code>x</code>继续等于<code>y</code>.</li><li><code>null</code>永远非真: <code>x.equals(null)</code> 一定是<code>false</code></li></ol><blockquote><p>Interfaces don’t extend Object.<br>– <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.2" target="_blank" rel="noopener">http://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.2</a></p></blockquote><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>封装是面向对象编程的基本原则之一，也是程序员处理复杂性一个方法。管理复杂性是编写大型程序时必须面对的主要挑战之一。</p><p>对抗复杂性的一些工具包括:</p><ul><li>Hierarchical abstraction: 创建一个个具有明确的 abstraction barriers 的抽象层<ul><li><strong>Abstraction Barriers</strong>：使用<code>private</code>, 保证对象内部不能被查看, 确保底层的复杂性不会暴露给外部世界。</li></ul></li><li>“Design for change” (D. Parnas)<ul><li>Organize program around objects.</li><li>Let objects decide how things are done.</li><li><strong>Hide information</strong> others don’t need.</li></ul></li></ul><p>大概的想法都是 - 程序应该被构建成模块化，可互换的片段，可以在不破坏系统的情况下进行交换。</p><p>封装就是构建在这种对外部隐藏信息的概念上。以细胞为类比：细胞内部可能非常复杂，由染色体，线粒体，核糖体等组成，但它完全被封装在一个单一模块中 - 抽象了内部的复杂性。</p><blockquote><p>In computer science terms, a module can be defined as a set of methods that work together as a whole to perform a task or set of related tasks. Now, if the implementation details of a module are kept internally hidden and the only way to interact with it is through a documented interface, then that module is said to be encapsulated.</p></blockquote><h3 id="Type-Checking"><a href="#Type-Checking" class="headerlink" title="Type Checking"></a>Type Checking</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    VengefulSLList&lt;Integer&gt; vsl = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;(<span class="number">9</span>);</span><br><span class="line">    SLList&lt;Integer&gt; sl = vsl; <span class="comment">// 超类包含子类</span></span><br><span class="line">    <span class="comment">//sl dynamic type is VengefulSLList</span></span><br><span class="line">    sl.addLast(<span class="number">50</span>);</span><br><span class="line">    sl.removeLast(); <span class="comment">// 根据 dynamic type 选择 VengefulSLList 的 removeLast</span></span><br><span class="line">    sl.printLostItems(); <span class="comment">//编译不过, 因为编译时检查的是 static type</span></span><br><span class="line">    VengefulSLList&lt;Integer&gt; vsl2 = sl; <span class="comment">// 编译不过, 子类无法包含超类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Expressions 是 compile-time types (static), 使用<code>new</code>的表达式具有指定的 compile-time types:</p><ul><li><code>SLList&lt;Integer&gt; sl = new VengefulSLList&lt;Integer&gt;();</code>, 表达式右边 compile-time types 是<code>VengefulSLList</code>。编译器检查并保证<code>VengefulSLList</code>一定也是<code>SLList</code>，因此允许此赋值.</li><li><code>VengefulSLList&lt;Integer&gt; vsl = new SLList&lt;Integer&gt;();</code>, 表达式右边 compile-time types 是<code>SLList</code>。编译器检查, 因为<code>SLList</code>并不一定是<code>VengefulSLList</code>，故编译报错.</li></ul><p>Method calls have compile-time types equal to their declared type.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123; ... &#125;</span><br><span class="line">Poodle frank = <span class="keyword">new</span> Poodle(<span class="string">"Frank"</span>, <span class="number">5</span>);</span><br><span class="line">Poodle frankJr = <span class="keyword">new</span> Poodle(<span class="string">"Frank Jr."</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">Dog largerDog = maxDog(frank, frankJr);</span><br><span class="line">Poodle largerPoodle = maxDog(frank, frankJr); <span class="comment">// 编译不过! RHS compile-time type is Dog</span></span><br></pre></td></tr></table></figure></p><p>编译器报错, 因为普遍意义的 Dog object 并不总是贵宾犬, 虽然此时我们都知道这里的”狗”肯定是指贵宾犬. 有没有办法让编译器理解这种特殊情况呢?</p><h3 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h3><p>通过 casting, 可以告诉编译器一个表达式有某个特定的 compile-time types.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Poodle largerPoodle = (Poodle) maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure></p><p>编译通过, 右边 compile-time type 转换为 <code>Poodle</code>.</p><blockquote><p>Caution: Casting is a powerful but dangerous tool. Essentially, casting is telling the compiler not to do its type-checking duties - telling it to trust you and act the way you want it to.</p></blockquote><h3 id="Inheritance-Cheatsheet"><a href="#Inheritance-Cheatsheet" class="headerlink" title="Inheritance Cheatsheet"></a>Inheritance Cheatsheet</h3><p>VengefulSLList extends SLList means VengefulSLList “is-an” SLList, and inherits all of SLList’s members:<br>总结 Inheritance 的一些要点:</p><ul><li>当子类<code>VengefulSLList</code> <code>extends</code> 超类<code>SLList</code>时, 意味着<code>VengefulSLList</code>也”是”<code>SLList</code>, 并继承<code>SLList</code>的所有成员:<ul><li>Variables, methods, nested classes</li><li>除了 constructors: Subclass constructors 必须先调用 superclass constructor; 通过 <code>super</code> 调用 overridden superclass methods 和 constructors.</li></ul></li></ul><p>调用 overridden methods 遵循两个规则:</p><ul><li>编译器只允许与 static type 符合的行为.</li><li>对于 overridden methods, 调用是基于 dynamic type</li><li>可以使用 casting 来规避 compiler type checking.</li></ul><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><blockquote><p>A higher order function is a function that treats other functions as data.</p></blockquote><p>在 Java 7 及之前的版本, memory boxes (variables) 不能包含指向 functions 的 pointers, 也就是无法给 functions 指定 types. 所以不能像Python一样直接把 function 作为参数传递到另一个 function 中。只能借用 interface：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Returns ten times the argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶方法</span></span><br><span class="line">System.out.println(do_twice(<span class="keyword">new</span> TenX(), <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>Java 8 引入<code>java.util.Function&lt;T, R&gt;</code>接口, 可以接受存储一个函数，<code>&lt;T, R&gt;</code>对应该函数的参数和返回对象</p><h2 id="Subtype-Polymorphism"><a href="#Subtype-Polymorphism" class="headerlink" title="Subtype Polymorphism"></a>Subtype Polymorphism</h2><blockquote><p>多态（polymorphism），是指指相同的消息给予不同的对象会引发不同的动作。</p><ul><li>动态多态（dynamic polymorphism）：通过类继承机制和虚函数机制生效于运行期。可以优雅地处理异质对象集合，只要其共同的基类定义了虚函数的接口。<ul><li>在面向对象程序设计中，多态一般是指子类型多态（Subtype polymorphism）或包含多态（inclusion polymorphism）。一般是通过某种可代换性（ substitutability）与另一个数据类型（超类型，supertype）相关的数据类型，这意味着为在这个超类型的元素上运算而写计算机程序也可以在子类型的元素上运算。</li></ul></li><li>静态多态（static polymorphism）：模板也允许将不同的特殊行为和单个泛化记号相关联，由于这种关联处理于编译期而非运行期，因此被称为“静态”。可以用来实现类型安全、运行高效的同质对象集合操作。C++ STL不采用动态多态来实现就是个例子。<ul><li>非参数化多态或译作特设多态（Ad-hoc polymorphism）：<ul><li>函数重载（Function Overloading）</li><li>运算符重载（Operator Overloading）</li><li>带变量的宏多态（macro polymorphism）</li></ul></li><li>参数化多态（Parametric polymorphism）：把类型作为参数的多态。在面向对象程序设计中，这被称作泛型编程。</li></ul></li></ul></blockquote><blockquote><p>子类型反映了类型（即面向对象的接口）之间的关系；而继承反映了一类对象可以从另一类对象创造出来，是语言特性的实现。因此，子类型也称接口继承；继承称作实现继承。</p></blockquote><h3 id="Call-Back"><a href="#Call-Back" class="headerlink" title="Call Back"></a>Call Back</h3><p>Java接口提供了回调(call back)的能力:</p><ul><li>有时一个函数需要调用另一个尚未写好的 helper function, 这时这个 helper function 就是 <code>call back</code>。比如“排序函数”需要“比较函数”的帮助。</li><li>不同语言对于回调有不同的处理方式<ul><li>Python, Perl, ML, Javascript 用函数传递 - <a href="#Higher-Order-Functions">first-class functions, Higher Order Functions</a></li><li>Java 选择把函数包含在一个接口中</li><li>C: function pointers.</li><li>C++: class-type functors.</li><li>C#: delegates.</li></ul></li></ul><p>比如Java的 Insertion Sort 可以排序任何类型的数据<code>Insertion.sort(a);</code>, <code>a</code>可以是<code>Double, String, java.io.File</code>数组. 在这里Callback就是对一个可执行代码的引用:</p><blockquote><p>・Client passes array of objects to <code>sort()</code> function.<br>・The <code>sort()</code> function calls back object’s <code>compareTo()</code> method as needed.</p></blockquote><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>Java的对象不能直接使用<code>&gt;, &lt;, =</code>进行比较. 在Python或C++中，当应用于不同对象类型时，比较运算符可以重新定义，但Java不支持。但可以借用接口继承，Java提供了一个<code>Comparable</code>接口，包含一个<code>compareTo</code>方法, 以保证任何实现该接口的类可以和其他同类做比较：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Return negative if this &lt; o.</span></span><br><span class="line"><span class="comment">    Return 0 if this equals o.</span></span><br><span class="line"><span class="comment">    Return positive if this &gt; o.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当有class需要与其他class比较时, 就实现这个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog uddaDog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Comparable</code>定义了类用于比较的自然顺序（Natural order）, 返回的是三种结果<code>负整数, 0, 正整数</code>, 分别对应小于, 等于和大于. <code>Insertion.sort()</code>不需要知道要排序的数组类型, 因为它直接调用数组成员自带的<code>compareTo</code>方法. Java的<code>Integer, Double, String, Date, File</code>数据类型都扩展了<code>Comparable</code>接口。</p><blockquote><p>A comparable object is capable of comparing itself with another object</p></blockquote><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p>如果我们想用灵活的不同方式对类进行比较比较呢？比如对音乐库里的歌曲根据艺术家、歌名等排序，二者都是<code>String</code>, 但一个类里面的<code>Comparable</code>只能有一个, 所以仅仅靠<code>Comparable</code>接口不够. 在Python可以使用HOF，编写新的比较函数，然后直接以参数形式传递该函数。</p><p>Java的方案是使用<code>Comparator</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比如Java系统自带的sort:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">・Create Comparator object.</span></span><br><span class="line"><span class="comment">・Pass as second argument to Arrays.sort().</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String[] a;</span><br><span class="line">...</span><br><span class="line">Arrays.sort(a); <span class="comment">// uses natural order</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// uses alternate order defined by Comparator&lt;String&gt; object</span></span><br><span class="line">Arrays.sort(a, String.CASE_INSENSITIVE_ORDER);</span><br></pre></td></tr></table></figure></p><p><code>insertion sort</code>的解决思路类似:<br>・Use Object instead of <code>Comparable</code>.<br>・Pass <code>Comparator</code> to <code>sort()</code> and <code>less()</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a, Comparator comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(comparator, a[j], a[j-<span class="number">1</span>]); j--)</span><br><span class="line">            exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparator c, Object v, Object w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.compare(v, w) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Object swap = a[i]; a[i] = a[j]; a[j] = swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要自定义时, 根据需要在class内部编写实现<code>Comparator</code>接口的(嵌套)类, 并实现<code>compare</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_NAME = <span class="keyword">new</span> ByName();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;Student&gt; BY_SECTION = <span class="keyword">new</span> BySection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> section;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 直接利用 String 已经定义好的 compareTo</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v.name.compareTo(w.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BySection</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student v, Student w)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v.section - w.section;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在其他函数中调用时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student s1;</span><br><span class="line">Student s2;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (Student.BY_NAME.compare(s1, s2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Arrays.sort(a, Student.BY_NAME);</span><br><span class="line">Arrays.sort(a, Student.BY_SECTION);</span><br></pre></td></tr></table></figure></p><p>同理若需要增加其他判断标准，就创建新的实现<code>Comparator</code>的 class.</p><p><code>Comparator</code>是可以将两个对象进行比较的第三方对象。由于只有一个<code>compareTo</code>的空间，如果想要支持不同方式进行比较，则要使用不同的<code>Comparator</code>。</p><blockquote><p>A Comparator is its own definition of how to compare two objects, and can be used to compare objects in a way that might not align with the natural ordering.</p></blockquote><h2 id="Abstract-Data-Types-ADTS"><a href="#Abstract-Data-Types-ADTS" class="headerlink" title="Abstract Data Types (ADTS)"></a>Abstract Data Types (ADTS)</h2><p><code>ArrayDeque</code>和<code>LinkedListDeque</code>都是实现<code>deque</code>这个接口，<code>deque</code>只是罗列了一些 methods，也即是一种合约，保证会实现的行为。而这些方法的具体实现则是由<code>ArrayDeque</code>和<code>LinkedListDeque</code>完成。从概念上讲，<code>deque</code>就是一种抽象的数据类型，只说会有什么行为，但不体现这些行为的具体实现方式，所以是抽象的。</p><h3 id="Java-Libraries"><a href="#Java-Libraries" class="headerlink" title="Java Libraries"></a>Java Libraries</h3><p>Java有一些内置的抽象数据类型，打包在Java库中。 三个最重要的ADTs来自<code>java.util</code>库：</p><ul><li>List 列表：一个有序的元素集合，如<code>ArrayList</code></li><li>Set 集合：元素严格唯一（不重复）的(无序)集合，如<code>HashSet</code></li><li>Map 映射：A collection of <code>Key - value</code> 映射, <code>key</code>是唯一的。通过<code>key</code>访问<code>value</code>，如<code>HashMap</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** takes in a String inputFileName</span></span><br><span class="line"><span class="comment">and puts every word from the input file into a list*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getWords</span><span class="params">(String inputFileName)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; lst = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    In in = <span class="keyword">new</span> In();</span><br><span class="line">    <span class="keyword">while</span> (!in.isEmpty()) &#123;</span><br><span class="line">        lst.add(in.readString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** takes in a List&lt;String&gt; and counts how many unique words there are in the file.*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUniqueWords</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; ss = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : words) &#123;</span><br><span class="line">           ss.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ss.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** takes in a List&lt;String&gt; targets and a List&lt;String&gt; words,</span></span><br><span class="line"><span class="comment">and finds the number of times each target word appears in the word list.*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">collectWordCount</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String t: target) &#123;</span><br><span class="line">        counts.put(s, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String s: words) &#123;</span><br><span class="line">        <span class="keyword">if</span> (counts.containsKey(s)) &#123;</span><br><span class="line">            counts.put(word, counts.get(s)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://joshhug.gitbooks.io/hug61b/content/assets/collection_hierarchy.png" alt="" title="Collections represent a group of objects, known as its elements: the white boxes are interfaces. The blue boxes are concrete classes. image from:https://joshhug.gitbooks.io/hug61b/"><br>通过设置环境变量（如<code>CLASSPATH =</code>）让Java编译器/解释器知道去哪里找 libraries。</p><p><code>CLASSPATH</code>：Linux or MacOS, paths are separated by <code>:</code>. In Windows, paths are separated by <code>;</code>.</p><ul><li><code>/home/--/--/javalib/*</code>, 在<code>.class</code>和<code>.jar</code>文件内查找依赖包，用于指定绝对路径。有同名时，会根据环境变量的先后顺序去排序靠前的。</li><li><code>./</code>指当前目录，<code>../</code>指上一层目录，用于指定相对路径。</li><li>也可以指定<code>classpath</code>, 这样系统的<code>CLASSPATH</code>会被忽略: <code>javac -cp ./:/home/stuff/:../ Foo.java</code>, 当有重名时, 选择顺序就是指明的路径顺序（当前目录-stuff目录-上一层目录）</li></ul><p>IntelliJ会忽略<code>CLASSPATH</code>，它会自动调用<code>-cp</code>, 变量是基于当前项目指定的 libraries.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 查看 IntelliJ 使用的 classpath*/</span></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">    URL[] urls = ((URLClassLoader)cl).getURLs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(URL url: urls)&#123;</span><br><span class="line">        System.out.println(url.getFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他ADT"><a href="#其他ADT" class="headerlink" title="其他ADT"></a>其他ADT</h3><p>堆栈 Stacks 和队列 Queues 是两种类似的线性集合。堆栈是后进先出的ADT：元素总是从数据结构的一端添加或删除。队列是先进先出的ADT. 二者都支持以下操作:<br><code>push()</code>: 加入<br><code>peek()</code>: 返回下一个<br><code>poll()</code>: 返回下一个并删除</p><p>Java的<code>Deque</code>(double ended queue, “deck”) 接口融合了堆栈和队列, 支持两端的元素插入和移除.</p><p>优先级队列 priority queue 的每个元素都有一个与之关联的优先级，以决定从队列中元素操作的顺序。</p><h3 id="Abstract-classes"><a href="#Abstract-classes" class="headerlink" title="Abstract classes"></a>Abstract classes</h3><p>Interface:</p><ul><li>除非指定<code>access modifier</code>, 否则所有的方法默认都是<code>public</code> （Java 9 支持 <code>private</code>）</li><li>可以提供变量, 但都是<code>public static final</code>, 也即没有实例变量</li><li>无法实例化</li><li>除非指定为<code>default</code>，否则所有方法均为抽象的</li><li>一个类可以实现多个接口</li><li>根据协议承诺, 实现类必须实现其继承的接口的所有抽象方法; 否则要声明为抽象类.</li></ul><p>Abstract classes 介于接口和 classes 之间。</p><ul><li>方法可以是<code>public</code>或<code>private</code>, 也支持<code>protected</code>和<code>package private</code>.</li><li>支持任何类型的变量</li><li>无法实例化</li><li>除非指定为<code>abstract</code>，否则方法默认是具体的实现</li><li>每个类只能实现一个 Abstract classes</li><li>抽象类不需要实现其继承的接口所有抽象方法</li></ul><p>基本上，接口能做的抽象类都可以做。实际应用中，抽象类通常用于部分地实现接口，在接口和实际的类中间扮演一个中间概念。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(Speed x)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DeluxeModel</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> x;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(Speed x)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">autoPilot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现时, 要 override 所有抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaX</span> <span class="keyword">extends</span> <span class="title">DeluxeModel</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoPilot</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>若不确定用哪种, 就优先考虑接口，以降低复杂性。<br>– <a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html</a></p></blockquote><h2 id="Packages-and-JAR"><a href="#Packages-and-JAR" class="headerlink" title="Packages and JAR"></a>Packages and JAR</h2><p>同样功能的类可能有多种版本, 或者不同类刚好命名相同。通过 packages 来为每个 classes 提供唯一的标识名称，如<code>java.util.</code></p><blockquote><p>A package is a namespace that organizes classes and interfaces.</p></blockquote><p>在IntelliJ的操作：</p><ul><li><p>创建 package：<br>1, File → New Package<br>2, 选择 package name (i.e. “ug.joshh.animal”)</p></li><li><p>给 Package 添加(新) Java 文件：<br>1, 右键 package name<br>2, New → Java Class<br>3, 命名 class, 然后 IntelliJ 会自动把文件放进正确的路径, 并添加 package declaration.</p></li><li><p>移动其他<code>.java</code>文件到 Package<br>1, 在文件顶部声明 <code>package [packagename]</code><br>2, 将文件存储在（移动到）与 package name 对应的文件夹中：如<code>ug.joshh.animal</code> 对应<code>ug/joshh/animal</code>文件路径.</p></li></ul><p>注意, 不存在<code>sub-package</code>这种概念, 即<code>ug.joshh.Animal</code>和<code>ug.joshh.Plant</code>是完全不同的.</p><h3 id="Default-packages"><a href="#Default-packages" class="headerlink" title="Default packages"></a>Default packages</h3><p>没有在文件顶部明确指明 package name 的Java类默认属于 default package 的一部分。</p><p>一般而言, Java文件应该以明确的 package 声明开头以避免将文件留在 default package 中（除非它是一个非常小的示例程序）。因为来自 default package 的代码无法 import，并且可能会意外地在 default package 下创建相同名称的类。</p><h3 id="JAR-Files"><a href="#JAR-Files" class="headerlink" title="JAR Files"></a>JAR Files</h3><p>一般情况下，程序会包含多个<code>.class</code>文件。如果想共享此程序，可以把压缩成一个<code>.jar</code>文件，此<code>.jar</code>文件将包含程序所有<code>.class</code>文件以及其他附加信息。JAR文件就像zip文件一样, 可以将文件解压缩回<code>.java</code>文件。JAR文件并不会加密保护代码.</p><blockquote><p>Creating a JAR File (IntelliJ)</p><ol><li>Go to File → Project Structure → Artifacts → JAR → “From modules with dependencies”</li><li>Click OK a couple of times</li><li>Click Build → Build Artifacts (this will create a JAR file in a folder called “Artifacts”)</li><li>Distribute this JAR file to other Java programmers, who can now import it into IntelliJ (or otherwise)</li></ol></blockquote><h3 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h3><p>cs61b Josh Hug:<br><code>Private</code></p><blockquote><p>Only code from the given class can access private members.</p></blockquote><p><code>Package Private</code></p><blockquote><p>The default access given to Java members if there is no explicit modifier written. Classes that belong in the same package can access, but not subclasses!</p></blockquote><p><code>Protected</code></p><blockquote><p>Classes within the same package and subclasses can access these members, but the rest of the world (e.g. classes external to the package or non-subclasses) cannot! Subtypes might need it, but subtype clients will not.</p></blockquote><p><code>Public</code></p><blockquote><p>Open and promised to the world, once deployed, the public members’ signatures should not change.<br>就像承诺和合同，尽量不要更改，以便用户始终可以（用已有的代码）访问。如果开发者要舍弃某一个<code>Public</code>，一般标识为<code>deprecated</code>.</p></blockquote><p>细节:</p><ol><li><strong>Access is Based Only on Static Types</strong></li><li>接口的方法默认是<code>public</code>的</li></ol><h3 id="Build-Systems"><a href="#Build-Systems" class="headerlink" title="Build Systems"></a>Build Systems</h3><p>可以简单地将文件放入适当的位置，然后通过 Maven, Ant 和 Gradle 等工具使用 Build Systems 来自动设置项目, 省去了手动加载一长串 libraries.</p><h2 id="丰富扩展generics的语法或特性"><a href="#丰富扩展generics的语法或特性" class="headerlink" title="丰富扩展generics的语法或特性"></a>丰富扩展generics的语法或特性</h2><h3 id="Autoboxing"><a href="#Autoboxing" class="headerlink" title="Autoboxing"></a>Autoboxing</h3><p>在Java中调用包含 Generics 的class时，需要提供确切的类型参数。对于每一种 primitive type (<code>byte, short, int, long, float, double, boolean, char</code>)，必须要用其对应的 reference type (<code>Byte, Short, Integer, Long, Float, Double, Boolean, Character</code>) - 也即是 wrapper classes 作为泛型的实际类型参数。虽然声明函数和变量时必须要用 wraper classes，但在实际的数值传递中，对于 primitives 类型的数据，并不需要显式地转换为 reference types。</p><p>因为 Java 有 Autoboxing，可以隐式地在 wrapper/primitives 类型间转换. Java会自动 “box” 和 “unbox” primitive type 和其对应的 reference type 之间的值。也就是说，如果Java期望的是 wrapper classes （如Integer），假如即使接收到的是 int 这样的基本类型，Java也会“autoboxing”这种整数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blah</span><span class="params">(Integer x)</span> </span>&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">blah(x); <span class="comment">// 实际上会转换为 blah(new Integer(20))</span></span><br></pre></td></tr></table></figure></p><p>反过来就是<code>unboxing</code>。</p><p>Autoboxing/Unboxing 注意事项:</p><ul><li>不适用于 array 数组</li><li>有性能负担</li><li>Wrapper types 比 primitive types 占用更多内存: 在大多数现代的系统里，对象的引用地址占用64位，还需要额外的64位开销用于存储动态类型等信息。 更多信息参考 <a href="https://www.javamex.com/tutorials/memory/object_memory_usage.shtml" target="_blank" rel="noopener">Memory usage of Java objects: general guide</a> 或 <a href="http://blog.kiyanpro.com/2016/10/07/system_design/memory-usage-estimation-in-java/" target="_blank" rel="noopener">Memory Usage Estimation in Java</a>.</li></ul><h3 id="Widening"><a href="#Widening" class="headerlink" title="Widening"></a>Widening</h3><p>Java会根据需要在 primitive types 之间自动扩展.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blahDouble</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    System.out.println(“<span class="keyword">double</span>: “ + x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">blahDouble(x); <span class="comment">//等同于 blahDouble((double) x)</span></span><br></pre></td></tr></table></figure></p><p>但如果想从一个 wider type 转换为 narrower type，则必须手动 cast.<br>有关 widening 的更多详细信息，包括哪些类型比其他类型更 wider ，参阅<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html" target="_blank" rel="noopener">官方的Java文档</a>。</p><h3 id="Generic-Methods"><a href="#Generic-Methods" class="headerlink" title="Generic Methods"></a>Generic Methods</h3><p>泛型方法的语法用map数据类型举例. 假如有一个现成的映射数据结构<code>Map61B</code>, 我们需要为她写两个helper methods放在<code>MapHelper</code>里面.</p><p><code>get(Map61B, key)</code>：返回映射中给定key对应的值（如果存在），否则返回null。假如这样写<code>public static V get(Map61B&lt;K, V&gt; map, String key) { ... }</code>会报错. 要将方法声明为泛型，<strong>必须在返回类型前面指定正式的类型参数</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">V <span class="title">get</span><span class="params">(Map61B&lt;K,V&gt; map, K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> map.containsKey(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayMap&lt;Integer, String&gt; isMap = <span class="keyword">new</span> ArrayMap&lt;Integer, String&gt;();</span><br><span class="line">System.out.println(mapHelper.get(isMap, <span class="number">5</span>)); <span class="comment">//Java可以自行推断`isMap`的数据类型.</span></span><br></pre></td></tr></table></figure></p><p><code>maxKey</code>: 返回给定<code>ArrayMap</code>中所有keys的最大值（仅在key可以比较的情况下）。实现时要注意, 不能直接用<code>&lt;,&gt;,==</code>来比较, 因为key不一定是primitives. 需要用<code>Comparable</code>接口的<code>compareTo</code>,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K extends Comparable&lt;K&gt;, V&gt; <span class="function">K <span class="title">maxKey</span><span class="params">(Map61B&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class="line">    List&lt;K&gt; keylist = map.keys();</span><br><span class="line">    K largest = map.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (K k: keylist) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k.compareTo(largest)) &#123;</span><br><span class="line">            largest = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> largest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>K extends Comparable&lt;K&gt;</code> 保证了keys必须实现<code>Comparable</code>接口（也是一个generic接口）, 并可以与其他<code>K</code>进行比较。</p><p>这里没有使用<code>implement</code>, 而是用<code>extends</code>, 这里跟前面的<a href="#Subtype-Polymorphism">polymorphism</a>不同. <code>K extends Comparable&lt;K&gt;</code>是<strong>type upper bounding</strong>, 意味着<code>k</code>必须是一种<code>Comparable</code>, 但不需要具备<code>Comparable</code>的所有方法行为.</p><p>在inheritance的含义中，<code>extends</code>指为子类提供超类的能力. 在generic范畴内, <code>extends</code>只是陈述一个事实：该类是其扩展的类的一个子类, 是加了约束, 而不是赋予能力.</p><h2 id="Immutability"><a href="#Immutability" class="headerlink" title="Immutability"></a>Immutability</h2><blockquote><p>An immutable data type is a data type whose instances cannot change in any observable way after instantiation.</p></blockquote><p>比如<code>String</code>是immutable, <code>Array</code>是mutable.</p><p>防止变量在第一次赋值后被更改</p><ul><li>可以使用<code>final</code>: 在 class constructor 里面, 或者变量初始化时, 给变量赋值一次, 之后就无法再被赋值了.</li><li>要保证immutable不一定要使用<code>final</code>, 有时候也可以用<code>private</code>.</li></ul><p>Immutable data types 因为属性不能改变, 缺点是需要创建一个新对象才能更改属性，优点是：</p><ul><li>可以防止bugs, 并使debugging更容易</li><li>可以信赖对象具有某种行为/特质</li></ul><p>注意：</p><ul><li>将一个引用声明为<code>final</code>并不会保证引用指向的对象是immutable. <code>public final ArrayDeque&lt;String&gt;() deque = new ArrayDeque&lt;String&gt;();</code>变量<code>deque</code>是<code>final</code>的, 仅意味着不能重新被赋值, 但其指向的数组队列对象自身还是可变的.</li><li>使用<code>Reflection API</code>，甚至可能对<code>private</code>变量进行更改</li></ul><h2 id="Throwing-Exceptions"><a href="#Throwing-Exceptions" class="headerlink" title="Throwing Exceptions"></a>Throwing Exceptions</h2><p>当程序出现错误时，假如继续运行下去已经没有意义（或者根本不可能继续），那么我们就想要中断正常的控制流程 - throws an exception。</p><p>比如当想从某<code>ArrayMap</code>中提取某个不存在的键值时, java自动抛出一个<code>implicit exception</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java ExceptionDemo</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ArrayIndexOutOfBoundsException: -<span class="number">1</span></span><br><span class="line">at ArrayMap.get(ArrayMap.java:<span class="number">38</span>)</span><br><span class="line">at ExceptionDemo.main(ExceptionDemo.java:<span class="number">6</span>)</span><br></pre></td></tr></table></figure></p><p>如果想让自己的程序抛出更详细的信息, 可以在程序中加入<code>explicit exception</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    intlocation = findKey(key);</span><br><span class="line">    <span class="keyword">if</span>(location &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> newIllegalArgumentException(<span class="string">"Key "</span> + key + <span class="string">" does not exist in map."</span>\);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values[findKey(key)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$java ExceptionDemo</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Key yolp does not exist in map.</span><br><span class="line">at ArrayMap.get(ArrayMap.java:<span class="number">40</span>)</span><br><span class="line">at ExceptionDemo.main(ExceptionDemo.java:<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>单纯 throw exception 会导致代码崩溃。但是通过 <code>try - catch</code> “捕捉”异常(<code>RuntimeException</code> 是 Java object), 可以防止程序崩溃。</p><p>比如通过捕捉异常, 来引入修正措施: 下面这个代码通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 当狗在生气时, 如果尝试拍拍它，会抛出一个 RuntimeException，</span></span><br><span class="line"><span class="comment">捕捉到 exception 后, 用香蕉来抚慰它. */</span></span><br><span class="line">Dog d = <span class="keyword">new</span> Dog(<span class="string">"Lucy"</span>, <span class="string">"Retriever"</span>, <span class="number">80</span>);</span><br><span class="line">d.becomeAngry();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    d.receivePat();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(</span><br><span class="line">    <span class="string">"Tried to pat: "</span> + e);</span><br><span class="line">    d.eatTreat(<span class="string">"banana"</span>);</span><br><span class="line">&#125;</span><br><span class="line">d.receivePat();</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ java ExceptionDemo</span><br><span class="line">Tried to pat: java.lang.RuntimeException: grrr... snarl snarl</span><br><span class="line">Lucy is a displeased Retriever weighing <span class="number">80.0</span> standard lb units.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ java ExceptionDemo</span><br><span class="line">Tried to pat: java.lang.RuntimeException: grrr... snarl snarl</span><br><span class="line">Lucy munches the banana</span><br><span class="line"></span><br><span class="line">Lucy enjoys the pat.</span><br><span class="line"></span><br><span class="line">Lucy is a happy Retriever weighing <span class="number">80.0</span> standard lb units.</span><br></pre></td></tr></table></figure><p>使用<code>if else</code>来管理异常会让代码变得很乱而难以阅读. 而使用<code>try catch</code>可以为每种类型的 exception 提供不同的应对。使代码像清晰的记述文般铺展开来: 首先，尝试执行所需的操作。然后，捕捉任何错误。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125; ...</span><br></pre></td></tr></table></figure></p><p>好的代码像一个故事, 构建上有一定的美感。这种清晰度使代码的长期维护变得更容易。</p><h3 id="Uncaught-Exceptions-Stack-Trace"><a href="#Uncaught-Exceptions-Stack-Trace" class="headerlink" title="Uncaught Exceptions Stack Trace"></a>Uncaught Exceptions Stack Trace</h3><p>如果 exception 到达堆栈底部后仍未被捕获，程序崩溃，Java 打印出堆栈的跟踪:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException in thread “main”:</span><br><span class="line">at ArrayRingBuffer.peek:<span class="number">63</span></span><br><span class="line">at GuitarString.sample:<span class="number">48</span></span><br><span class="line">at GuitarHeroLite.java:<span class="number">110</span></span><br></pre></td></tr></table></figure></p><p><img src="https://joshhug.gitbooks.io/hug61b/content/assets/callstack.png" alt="" title="image from: https://joshhug.gitbooks.io/hug61b"><br>程序猿可以据此追踪错误路径。</p><h3 id="Checked-vs-Unchecked-Exceptions"><a href="#Checked-vs-Unchecked-Exceptions" class="headerlink" title="Checked vs Unchecked Exceptions"></a>Checked vs Unchecked Exceptions</h3><p>有时候，某些抛出的 exception 无法通过编译，可以理解为这些异常在编译器看来是非常恶心的存在，需要程序猿必须给这些 exception 提供明确的应对处理方案 - 这种叫 checked exception （”must be checked”）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eagle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (today == “Thursday”) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ javac Eagle</span><br><span class="line">Eagle.java:<span class="number">4</span>: error: unreported exception IOException; must be caught or declared to be thrown</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>); &#125;</span><br><span class="line">^</span><br></pre></td></tr></table></figure><p>很明显，Java对此<code>IOException</code>并不满意, 因为<code>IOExceptions</code>是 checked exception, 而这里没有提供应对处理方案。但假如换做<code>RuntimeException</code>就可以编译通过 (虽然在 runtime 时会崩溃).<br><img src="https://joshhug.gitbooks.io/hug61b/content/assets/checked_exceptions.png" alt="" title="image from: https://joshhug.gitbooks.io/hug61b/"><br><code>Errors</code> 和 <code>Runtime Exceptions</code>, 以及它们的子类都是<code>unchecked</code>. 这种异常都是直到运行时才能发现的错误, 它们一般无法从中恢复到正常状态 - 比如代码尝试从数组中获取<code>-1</code>元素，好像就没什么解决办法。</p><p>其余的都是 <code>checked exception</code>, 它们其中大多数都有修正的可能性。例如遇到<code>FileNotFound</code>，可以考虑要求用户重新指定他们想要的文件 (可能是因为错误输入导致的)。</p><p>Java在尽最大努力确保每个程序运行时不会崩溃，所以它不会允许程序留下任何明明可以应对修正却没有被明确地修正的错误。</p><p>两种方法来处理 checked error:</p><ol><li><p><strong>Catch</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (today == “Thursday”) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"psych!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 假如能够应对，尽量用 catch 锁定异常防止其逃逸。</p></li><li><p><strong>Specify</strong>: 如果实在不想在该方法中处理这种异常，可以将责任推迟到别的地方。我们可以指定该方法是危险的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gulgate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ... <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"hi"</span>); ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后任何其他调用<code>gulgate()</code>的方法也变成危险的了, 它们也需要被处理(同样使用两种方法之一)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// catch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        gulgate();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Averted!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或 specify</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    gulgate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 需要明确异常处理责任人。同时确保调用者知道该方法是危险的！</p></li></ol><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>Java提供了 foreach (enhanced for) 的循环简写语法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayMap&lt;String, Integer&gt; am = <span class="keyword">new</span> ArrayMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : am) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现的关键原理是使用<code>Iterable</code>接口使一个类变成可迭代的: 该接口包含一个<code>iterator()</code>方法用于返回一个<code>Iterator</code>对象。<code>Iterator</code>接口定义<code>Iterator</code>对象和<code>hasNext(), next()</code>方法来进行实际的迭代操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map61B</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Iterable</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> K[] keys;</span><br><span class="line">    <span class="keyword">private</span> V[] values;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keys = (K[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        values = (V[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ptr;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">KeyIterator</span><span class="params">()</span> </span>&#123; ptr = <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (ptr != size); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            K returnItem = keys[ptr];</span><br><span class="line">            ptr = ptr + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不同的数据结构，<code>Iterator</code>有不同的实现方式.</p><p><code>KeyIterator</code>即使是<code>private</code>也可以编译, 因为<code>iterator()</code>在这里是<code>public</code>的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayMap&lt;String, Integer&gt; am = <span class="keyword">new</span> ArrayMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = am.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : am) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了用嵌套类来自定义实现<code>Iterator</code>, 也可以利用数据结构本身的特性. 比如<code>ArrayMap</code>里面刚好包含一个可迭代的数据结构<code>List keys</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;K&gt; keylist = keys();</span><br><span class="line">    <span class="keyword">return</span> keylist.Iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意要点</strong></p><ul><li><code>hasNext()</code>的判断依据是<strong>当前状态下能返回至少一个成员</strong>, 不要混淆为<em>下一次能否返回</em>: 因为迭代时过程中, 每次调用<code>next()</code>之前, java 都会先调用<code>hasNext()</code>.</li><li>实现方法时, 要保证第一次<code>next()</code>返回的是第一个成员.</li></ul><h2 id="总结Java的特性"><a href="#总结Java的特性" class="headerlink" title="总结Java的特性"></a>总结Java的特性</h2><blockquote><ul><li>Packages<ul><li>Good: Organizing, making things package private</li><li>Bad: Specific</li></ul></li><li>Static type checking<ul><li>Good: Checks for errors early , reads more like a story</li><li>Bad: Not too flexible, (casting)</li></ul></li><li>Inheritance.<ul><li>Good: Reuse of code</li><li>Bad: “Is a”, the path of debugging gets annoying, can’t instantiate, implement every method of an interface</li></ul></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 高级语法。&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>Python Digest 之奇技淫巧</title>
    <link href="http://shukebeta.me/python-digest/"/>
    <id>http://shukebeta.me/python-digest/</id>
    <published>2018-05-07T23:00:00.000Z</published>
    <updated>2018-06-29T19:18:48.676Z</updated>
    
    <content type="html"><![CDATA[<p>What you will get from this Python digest:<br>1, Learn advanced python programming.<br>2, Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.<br>3, Practice going from a problem description to a solution, using a series of assignments.</p><a id="more"></a><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a><a href="https://docs.python.org/2/library/operator.html" target="_blank" rel="noopener">Operator</a></h2><h3 id="Emulating-numeric-types"><a href="#Emulating-numeric-types" class="headerlink" title="Emulating numeric types"></a>Emulating numeric types</h3><p>In-place operation: One modifies the data-structure itself<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">object.__iadd__(self, other)</span><br><span class="line">object.__isub__(self, other)</span><br><span class="line">object.__imul__(self, other)</span><br><span class="line">object.__imatmul__(self, other)</span><br><span class="line">object.__itruediv__(self, other)</span><br><span class="line">object.__ifloordiv__(self, other)</span><br><span class="line">object.__imod__(self, other)</span><br><span class="line">object.__ipow__(self, other[, modulo])</span><br><span class="line">object.__ilshift__(self, other)</span><br><span class="line">object.__irshift__(self, other)</span><br><span class="line">object.__iand__(self, other)</span><br><span class="line">object.__ixor__(self, other)¶</span><br><span class="line">object.__ior__(self, other)</span><br></pre></td></tr></table></figure></p><p> These methods are called to implement the augmented arithmetic assignments. These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self).<br> If x is an instance of a class with an <code>__iadd__()</code> method, <code>x += y</code> is equivalent to <code>x = operator.iadd(x, y)</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B = np.arange(12).reshape(4,3)</span><br><span class="line">for b in B:</span><br><span class="line">    b += 1</span><br><span class="line">print(B) # B will be changed</span><br></pre></td></tr></table></figure></p><h2 id="Object-oriented-Programming"><a href="#Object-oriented-Programming" class="headerlink" title="Object oriented Programming"></a>Object oriented Programming</h2><h3 id="Class-Name-Guidline"><a href="#Class-Name-Guidline" class="headerlink" title="Class Name Guidline"></a><a href="https://www.python.org/dev/peps/pep-0008/#id41" target="_blank" rel="noopener">Class Name Guidline</a></h3><p><a href="https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc" target="_blank" rel="noopener">underscore (_)</a>:<br>• For storing the value of last expression in interpreter.<br>• For ignoring the specific values. (so-called “I don’t care”)<br>• To use as ‘Internationalization(i18n)’ or ‘Localization(l10n)’ functions.<br>• To separate the digits of number literal value.</p><p>To give special meanings and functions to name of variables or functions<br>• _single_leading_underscore: weak “internal use” indicator, declaring private variables, functions, methods and classes in a module. Anything with this convention are ignored in from module import *.<br>• single_trailing_underscore_: used by convention to avoid conflicts with Python keyword<br>• <strong>double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, </strong>boo becomes _FooBar__boo; see <a href="#designing-for-inheritance">Designing for inheritance</a>)<br>• <strong>double_leading_and_trailing_underscore</strong>: “magic” objects or attributes that live in user-controlled namespaces. E.g. <strong>init</strong>, <strong>import</strong> or <strong>file</strong>. Never invent such names; only use them as documented. See <a href="#magic-attributes">Magic Attributes</a></p><h3 id="Designing-for-inheritance"><a href="#Designing-for-inheritance" class="headerlink" title="Designing for inheritance"></a><a href="https://www.python.org/dev/peps/pep-0008/#id49" target="_blank" rel="noopener">Designing for inheritance</a></h3><p>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name.<br>• Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions.<br>• Note 2: Name mangling can make certain uses, such as debugging and <strong>getattr</strong>(), less convenient. However the name mangling algorithm is well documented and easy to perform manually.<br>• Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers.</p><h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a><a href="https://docs.python.org/2/howto/descriptor.html" target="_blank" rel="noopener">Descriptor</a></h3><h3 id="Magic-Attributes"><a href="#Magic-Attributes" class="headerlink" title="Magic Attributes"></a><a href="https://docs.python.org/2/library/stdtypes.html#special-attributes" target="_blank" rel="noopener">Magic Attributes</a></h3><p><code>__init__</code> for initialization purpose.</p><p><a href="https://docs.python.org/2/library/stdtypes.html#object.__dict__" target="_blank" rel="noopener"><code>object.__dict__</code></a>: A dictionary or other mapping object used to store an object’s (writable) attributes. Basically it contains all the attributes which describe the object under question. It can be used to alter or read the attributes.  </p><p><code>__call__</code></p><h3 id="Is-Python-call-by-value-or-call-by-reference"><a href="#Is-Python-call-by-value-or-call-by-reference" class="headerlink" title="Is Python call-by-value or call-by-reference?"></a>Is Python call-by-value or call-by-reference?</h3><p>Neither.</p><blockquote><p>In Python, (almost) everything is an object. What we commonly refer to as “variables” in Python are more properly called names. A variable is not an alias for a location in memory. Rather, it is simply a binding to a Python object, likewise, “assignment” is really the binding of a name to an object. Each binding has a scope that defines its visibility, usually the block in which the name originates.<br>– <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/" target="_blank" rel="noopener">https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/</a></p></blockquote><p>Python实际上有两种对象。</p><ul><li>一种是可变对象，表现出随时间变化的行为。可变对象的变更对与它绑定的所有名称都可见，如 Python list。</li><li>一种是不可变对象，值在创建后无法修改。<ul><li>跟java的 immutable reference类似的是 Python tuple：虽然 tuple 不可变，那仅是针对其自身所绑定固定的对象而言<code>tuple(list1, list2)</code>，但tuple包含的元素对象<code>list1, list2</code>本身有自己的可变属性.</li></ul></li></ul><p>所以Python的方法调用中,<code>foo(bar)</code>只是在<code>foo</code>的作用域内创建一个与参数<code>bar</code>的绑定。</p><ul><li>如果<code>bar</code>指向可变对象，当<code>foo</code>更改时，这些更改可以在函数<code>foo</code>的作用域外可见。</li><li>如果<code>bar</code>指向一个不可变的对象，<code>foo</code>只能在其自身本地空间中创建一个名称<code>bar</code>并将其绑定到其他对象。</li></ul><h2 id="Solving-Problem"><a href="#Solving-Problem" class="headerlink" title="Solving Problem"></a>Solving Problem</h2><p>A general process to solve problem with three steps: understand, specify and design.<br>1, Start with a vague understanding that you refine into a formal specification of a problem. In this step you want to take inventory of the concepts you are dealing with.<br>2, Specify how this problem can be made amenable to being coded. What is the input and output? What output is desirable?<br>3, Design working code</p><p>?? —-(1 Vague Understanding)–&gt;Formal specification of a problem —(2 Specify)—&gt;Amendable specification—(3 Design)—&gt;Working Code</p><h2 id="Program-Design-and-Development"><a href="#Program-Design-and-Development" class="headerlink" title="Program Design and Development"></a>Program Design and Development</h2><h3 id="Dimensions-of-programming"><a href="#Dimensions-of-programming" class="headerlink" title="Dimensions of programming"></a>Dimensions of programming</h3><ul><li>Correctness, Efficiency, Features, Elegance</li><li>Each part takes time, learn to make Tradeoff:<ul><li>During the process, generally Correctness comes first.<ul><li>Test</li></ul></li><li>But pursuing the 100% Correctness is not the best choice.</li><li>There is a balance of tradeoff, and sometimes saving some time and efforts to improving the Efficiency or adding more Features may be a better option.</li><li>Elegance is good for maintaining and improving the program, which means saving for the future. <strong>Refactoring</strong> - moving along the Elegance direction without changing the other dimensions.<ul><li>DRY: don’t repeat yourself</li><li>Reuse: save time and code lines, also reduce the possibility of mistake<h3 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a><a href="https://docs.python.org/3.5/tutorial/controlflow.html#intermezzo-coding-style" target="_blank" rel="noopener">Coding Style</a></h3>For Python, <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008</a> has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Here are the most important points extracted:</li></ul></li></ul></li><li><p>Use 4-space indentation, and no tabs.</p><p> 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.</p></li><li><p>Wrap lines so that they don’t exceed 79 characters.</p><p> This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.</p></li><li><p>Use blank lines to separate functions and classes, and larger blocks of code inside functions.</p></li><li><p>When possible, put comments on a line of their own.</p></li><li><p>Use <a href="#docstring">docstrings</a>.</p></li><li><p>Use spaces around operators and after commas, but not directly inside bracketing constructs: <code>a = f(1, 2) + g(3, 4)</code>.</p></li><li><p>Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use self as the name for the first method argument (see <a href="https://docs.python.org/3.5/tutorial/classes.html#tut-firstclasses" target="_blank" rel="noopener">A First Look at Classes</a> for more on classes and methods).</p></li><li><p>Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.</p></li><li><p>Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</p></li></ul><h3 id="Docstring"><a href="#Docstring" class="headerlink" title="Docstring"></a>Docstring</h3><p>An easy way to associate documentation with a function.</p><ul><li>Documentation Strings conventions<ul><li>The first line should always be a short, concise summary of the object’s purpose.</li><li>The second line should be blank</li><li>The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li></ul></li><li><p>The following Python file shows the declaration of docstrings within a Python source file:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;Assuming this is file mymodule.py, then this string, being thefirst statement in the file, will become the &quot;mymodule&quot; module&apos;sdocstring when the file is imported.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class MyClass(object):</span><br><span class="line">    &quot;&quot;&quot;The class&apos;s docstring&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def my_method(self):</span><br><span class="line">        &quot;&quot;&quot;The method&apos;s docstring&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def my_function():</span><br><span class="line">    &quot;&quot;&quot;The function&apos;s docstring&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>The following is an interactive session showing how the docstrings may be accessed:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import mymodule&gt;&gt;&gt; help(mymodule)</span><br><span class="line"></span><br><span class="line">Assuming this is file mymodule.py then this string, being thefirst statement in the file will become the mymodule modulesdocstring when the file is imported</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; help(mymodule.MyClass)The class&apos;s docstring&gt;&gt;&gt; help(mymodule.MyClass.my_method)The method&apos;s docstring&gt;&gt;&gt; help(mymodule.my_function)The function&apos;s docstring&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>It is important that each part of the specification gets turned into a piece of code that implements it and a test that tests it.</p><ul><li>Extreme values<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a><a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" target="_blank" rel="noopener">assert</a></h3>Insert debugging assertions into a program. Assertions are not a substitute for unit tests or system tests, but rather a complement.</li><li><a href="http://wiki.python.org/moin/UsingAssertionsEffectively" target="_blank" rel="noopener">Using Assertions Effectively</a><ul><li>Places to consider putting assertions:<ul><li>checking parameter types, classes, or values</li><li>checking data structure invariants</li><li>checking “can’t happen” situations (duplicates in a list, contradictory state variables.)</li><li>after calling a function, to make sure that its return is reasonable<h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3></li></ul></li></ul></li><li>Tracking time<br> Track which part of the code is the bottle neck of efficiency<ul><li>>&gt; python -m cProfile file.py</li><li><code>import cProfile</code>, <code>cProfile.run(&#39;test()&#39;)</code></li></ul></li></ul><h2 id="Aspect-oriented-programming"><a href="#Aspect-oriented-programming" class="headerlink" title="Aspect-oriented programming"></a>Aspect-oriented programming</h2><ul><li>correct</li><li>efficiency<ul><li><a href="#time">Tracking time</a>: to find out the bottle neck function or algorithm</li><li>Rethinking the implementation of the bottle neck<ul><li>Fewer</li><li>Easier/smaller: <a href="https://github.com/ShootingSpace/Guide-to-Computer-Science/blob/master/Note%20-%20CS106B%20Stanford%20Programming%20Abstractions.md#divide-and-conquer" target="_blank" rel="noopener">Divide and Conquer</a></li></ul></li></ul></li><li>debugging<br>Each part is done with some line of codes. Instead of mix different part of the code together, it would be better to define them as different function/class. Try to seperate them as much as possible.</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>There are many special and useful function implementation and control flow in python: lambda, map, filter, reduce, generator, etc..</p><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>λ, istead of defining function with <code>def</code> and a specific function name, Lambda provide a convinent way to define a function using its own native logic and methematical expression.<br>The benifits are<br>• A small function could be defined wihtin the same code structure without seperating out a specific <code>def</code> function<br>• Without bothering creating any proper funciton name for a small anonymous function.</p><p>Lambda implementation<br>1, Like nested function definitions, lambda functions can reference variables from the containing scope, returning a function from another function. This is often used to create <strong>function wrappers</strong>, such as Python’s decorators.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uses a lambda expression to return a function</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_incrementor</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = make_incrementor(<span class="number">42</span>)  <span class="comment"># f is declared as a lambda function "lambda x: x+42" with parameter n = 42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>) <span class="comment"># call f with x=0 to return the</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)</span><br><span class="line"><span class="number">43</span></span><br></pre></td></tr></table></figure></p><p>This is like creating a compiler to save process cost: some parameters like default values or initial values are compiled into the compiler, program process these parameter only once, then this compiler as a function could be called many times with other input parameters which varies every time the compiler is being called(like user input values).</p><p>2, Pass a small function as an argument, sorting or max by an alternate key<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [(<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">2</span>, <span class="string">'two'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">4</span>, <span class="string">'four'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs</span><br><span class="line">[(<span class="number">4</span>, <span class="string">'four'</span>), (<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">2</span>, <span class="string">'two'</span>)]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l =[(<span class="string">'x'</span>,<span class="number">2</span>),(<span class="string">'y'</span>,<span class="number">4</span>),(<span class="string">'z'</span>,<span class="number">0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(l, key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'z'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Lambda with logic control flow<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lambda x,y: <span class="keyword">False</span> <span class="keyword">if</span> x&lt;y <span class="keyword">else</span> x+y</span><br></pre></td></tr></table></figure></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a><a href="https://docs.python.org/2/library/functions.html#filter" target="_blank" rel="noopener">Filter</a></h3><p>Construct a list from the elements of an iterable for which function returns <strong>true</strong>. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list.</p><ul><li><code>filter(function, iterable)</code> equals to<ul><li>if function is <code>None</code>:  <code>[item for item in iterable if item]</code></li><li>if not: <code>[item for item in iterable if function(item)]</code></li></ul></li><li><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])</code> &gt;&gt;&gt; <code>[3, 6, 9]</code></li><li>See <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilter" target="_blank" rel="noopener">itertools.ifilter()</a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilterfalse" target="_blank" rel="noopener">itertools.ifilterfalse()</a> for iterator versions of this function, including a variation that filters for elements where the function returns false.</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><a href="https://docs.python.org/2/library/functions.html#map" target="_blank" rel="noopener">Map</a></h3><p>Apply function to every item of iterable and <strong>return a list</strong> of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x % 2, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">&gt;&gt;&gt; [1, 0, 1, 0, 1, 0, 1, 0, 1]</span><br></pre></td></tr></table></figure></p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a><a href="https://docs.python.org/2/library/functions.html#reduce" target="_blank" rel="noopener">Reduce</a></h3><p>Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</span><br><span class="line">Out[1]: 15 # ((((1+2)+3)+4)+5)</span><br><span class="line">In [1]: reduce(lambda a, b: &apos;&#123;&#125;, &#123;&#125;&apos;.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">Out[1]: &apos;1, 2, 3, 4, 5, 6, 7, 8, 9&apos;</span><br></pre></td></tr></table></figure></p><h3 id="List-Dict-Set-Comprehensions"><a href="#List-Dict-Set-Comprehensions" class="headerlink" title="List/Dict/Set Comprehensions"></a>List/Dict/Set Comprehensions</h3><ul><li>List comprehensions: <code>[ s for r, s in cards if r in &#39;JQK&#39; ]</code></li><li>Dictionary comprehensions: <code>{x: x ** 2 for x in range(5) if x % 2 == 0}</code></li><li>Set comprehensions: <code>{int(sqrt(x)) for x in range(30)}</code></li><li>And in general, we can have any number of for statements, if statements, more for statements, more if statements. The whole is read from left to right</li></ul><h3 id="Generator-Expressions"><a href="#Generator-Expressions" class="headerlink" title="Generator Expressions"></a><a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" target="_blank" rel="noopener">Generator Expressions</a></h3><p>Unlike the for loop in the list comprehensions which walk through the whole loop, generator will walk one step in the for loop if a <code>next()</code> is called.</p><ul><li>The advantage is<ul><li>less indentation</li><li>stop the loop early</li><li>easier to edit</li></ul></li><li>Implementation of generator: <code>g = (sq(x) for x in range(10) if x%2 == 0).</code>  <ul><li>The generator function is a promise, but no computation has been done yet.</li><li><code>next(g)</code> to call a one-time calculation.</li><li>When reaching the end of for-loop in the generator, the <code>next(g)</code> comment will return a false called “StopIteration”.</li><li>To avoid the “StopIteration” false<ul><li>Use a outer for statement: <code>for xx in g: ...</code></li><li>convert the generator to list: <code>list(g)</code></li></ul></li></ul></li></ul><h3 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h3><p>Using a yield expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.</p><ul><li><a href="https://docs.python.org/2/reference/expressions.html#yield-expressions" target="_blank" rel="noopener">Yield expressions</a><br> The yield expression is only used when defining a generator function, and can only be used in the body of a function definition.</li><li><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html" target="_blank" rel="noopener">Yield implementation</a></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ints</span><span class="params">(start, end=None)</span>:</span></span><br><span class="line">    i = start</span><br><span class="line">    <span class="keyword">while</span> i &lt;= end <span class="keyword">or</span> end <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></span><br><span class="line">     n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">     <span class="keyword">while</span> n &lt; max:</span><br><span class="line">          <span class="keyword">yield</span> b</span><br><span class="line">          <span class="comment"># print b</span></span><br><span class="line">          a, b = b, a + b</span><br><span class="line">          n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>The true beneath <code>For Statemet</code> is <strong>iterable</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itmes:</span><br><span class="line">     <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure></p><p>What the whole truth is:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it = iter(items)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">         x = next(it)</span><br><span class="line">         <span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>Overall, Python calls the thing that can be iterated over in a for loop an iterable. Strings and lists are examples of iterables, and so are generators.</p><p><a href="https://docs.python.org/2/library/itertools.html#module-itertools" target="_blank" rel="noopener">itertools library</a> - Functions creating iterators for efficient looping.<br><code>any(iterable)</code>: Return True if any element of the iterable is true. If the iterable is empty, return False.</p><h3 id="Unpacking-Argument-Lists"><a href="#Unpacking-Argument-Lists" class="headerlink" title="Unpacking Argument Lists"></a><a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" target="_blank" rel="noopener">Unpacking Argument Lists</a></h3><p>The <code>*</code> operator simply unpacks the tuple or list and passes them as the positional arguments to the function.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">3</span>, <span class="number">6</span>))            <span class="comment"># normal call with separate arguments</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(*args))            <span class="comment"># call with arguments unpacked from a list</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><h3 id="Handling-different-types-of-argument-polymorphism"><a href="#Handling-different-types-of-argument-polymorphism" class="headerlink" title="Handling different types of argument (*polymorphism)"></a>Handling different types of argument (*polymorphism)</h3><p>An argument could be different type:<br>   <code>timedcalls(n,fn)</code>, if n is int <code>isinstance(n,int)</code>, it means controling the how many times fn was called, while n is float, it means controling the total runtime of fn called</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a><a href="https://www.python.org/dev/peps/pep-0318/" target="_blank" rel="noopener">Decorator</a></h2><p>Motivation: when applying a transformation to a function <code>def f(self): ...definition...; f = dec(f)</code>, it becomes less readable with longer methods. It also seems less than pythonic to name the function three times for what is conceptually a single declaration.</p><p>The solution is to place the decoration in the function’s declaration:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a><a href="https://www.programiz.com/python-programming/property" target="_blank" rel="noopener">@property</a></h3><p><code>property(fget=None, fset=None, fdel=None, doc=None)</code><br>A property object has three methods, getter(), setter(), and delete() to specify fget, fset and fdel at a later point.</p><p><code>some_object = property(get_some_object,set_some_object)</code> equals to<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some_object = property()  <span class="comment"># make empty property</span></span><br><span class="line">some_object = some_object.getter(get_some_object) <span class="comment"># assign fget</span></span><br><span class="line">some_object = some_object.setter(set_some_object) <span class="comment"># assign fset</span></span><br></pre></td></tr></table></figure></p><p>Decorator as tools<br>• Debug tool: help developping, count calls times, count excecute time<br>• Performance: make the programme faster, such as dynamic programming algorithm<br>• Expressiveness: doc string, explaining funciton<br>• Trace: help to monitor the execution of the program, such as each level result printed with different indentation</p><p>Disable decorator: <code>dec = disabled</code>, make the decorator disabled.</p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="noopener">Regular Expression</a></h2><p><code>import re</code></p><p><a href="http://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html" target="_blank" rel="noopener">Reference: A Regular Expression Matcher</a></p><p>In C language, any number start with ‘0’ is interpreted as an octal number( base-8 number system ):<br>‘012’ -&gt; int 10; ‘09’ -&gt; invalid</p><p><strong>Special characters</strong><br>• <code>*</code> match 0 or more repetitions of the preceding character. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.<br>• <code>?</code> Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’.<br>• <code>.</code> (Dot) matches any single character<br>• <code>^</code> (Caret) Matches the start of the string<br>• <code>$</code> Matches the end of the string or just before the newline at the end of the string, foo matches both ‘foo’ and ‘foobar’, while the regular expression foo$ matches only ‘foo’<br>• <code>+</code> match 1 or more repetitions of the preceding RE. <code>ab+</code> will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’.</p><p><strong>Commonly used expression</strong><br>• Upper case letter <code>&#39;[A-Z]&#39;</code><br>• Any alphanumeric character <code>[a-zA-Z0-9_]</code><br>• Decimal digit <code>[0-9]</code><br>• Non-digit character <code>[^0-9]</code><br>• Whitespace character <code>[ \t\n\r\f\v]</code></p><p><code>search(string[, pos[, endpos]])</code>: Scan through string looking for a location where this regular expression produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern.</p><p><code>re.findall(pattern, string, flags=0)</code>：Return all non-overlapping matches of pattern in string, as a list of strings.</p><h3 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a><a href="https://docs.python.org/2.4/lib/typesseq-strings.html" target="_blank" rel="noopener">String Formatting</a></h3><p>Modulo(<code>%</code>): String and Unicode objects have one unique built-in operation: the <code>%</code> operator (modulo). This is also known as the string formatting or interpolation operator. Given format <code>%</code> values (where format is a string or Unicode object), <code>%</code> conversion specifications in format are replaced with zero or more elements of values.<br><code>%d</code>:    Signed integer decimal.<br><code>%s</code>:    String (converts any python object using str()).<br><code>print &#39;%d: %s&#39; % (1, &#39;animal&#39;)</code> &gt;&gt; <code>1: animal</code></p><h2 id="Python-data-structure"><a href="#Python-data-structure" class="headerlink" title="Python data structure"></a>Python data structure</h2><h3 id="Numpy-indexing"><a href="#Numpy-indexing" class="headerlink" title="Numpy indexing"></a><a href="https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#indexing" target="_blank" rel="noopener">Numpy indexing</a></h3><p>Ellipsis: The same as <code>...</code>. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types. <code>a = [1,2,3], a[...] is actually the same as a</code></p><p>None: extends one more demention by further slicing the corresponding c into smallest units.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = np.arange(<span class="number">27</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>), <span class="comment">#t shape is (3,3,3)</span></span><br><span class="line">t[<span class="keyword">None</span>,].shape <span class="comment"># (1, 3, 3, 3)</span></span><br><span class="line">t[...,<span class="keyword">None</span>].shape <span class="comment"># (3, 3, 3, 1)</span></span><br><span class="line">t[:, <span class="keyword">None</span>,:].shape <span class="comment"># (3, 1, 3, 3)</span></span><br><span class="line">t[:,:, <span class="keyword">None</span>].shape <span class="comment"># (3, 3, 1, 3)</span></span><br></pre></td></tr></table></figure></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>• <a href="https://www.udacity.com/course/design-of-computer-programs--cs212" target="_blank" rel="noopener">CS212 Design of Computer Program @Udacity</a>, <a href="https://www.udacity.com/wiki/cs212" target="_blank" rel="noopener">Course Wiki</a></p><blockquote><p>Syllabus<br>Lesson 1: How to think to solve problem<br>Lesson 2: Python features; Instrumentation<br>Lesson 3: Build function as tools; Define language; Grammar<br>Lesson 4: Dealing with Complexity Through Search<br>Lesson 5: Dealing with Uncertainty Through Probability</p></blockquote><p>• <a href="https://docs.python.org/3/tutorial/" target="_blank" rel="noopener">The Python Tutorial</a><br>• <a href="http://www.openbookproject.net/thinkcs/" target="_blank" rel="noopener">Open Book Project: How to Think Like a Computer Scientist: Learning with Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What you will get from this Python digest:&lt;br&gt;1, Learn advanced python programming.&lt;br&gt;2, Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.&lt;br&gt;3, Practice going from a problem description to a solution, using a series of assignments.&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Python" scheme="http://shukebeta.me/tags/Python/"/>
    
      <category term="Programming Language" scheme="http://shukebeta.me/tags/Programming-Language/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理快速入门 | 02 N-Gram 语言模型 - ANLP UoE 爱丁堡</title>
    <link href="http://shukebeta.me/NOTE-ANLP-02-n-gram-model/"/>
    <id>http://shukebeta.me/NOTE-ANLP-02-n-gram-model/</id>
    <published>2018-04-01T23:00:00.000Z</published>
    <updated>2018-06-29T19:35:53.370Z</updated>
    
    <content type="html"><![CDATA[<p>生成模型在语言模型中的应用包括 N-Gram语言模型，朴素贝叶斯分类器，隐马尔可夫模型。</p><blockquote><p>在概率统计理论中, 生成模型是指能够生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。</p></blockquote><blockquote><p>生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。</p></blockquote><a id="more"></a><h2 id="N-Gram-语言模型"><a href="#N-Gram-语言模型" class="headerlink" title="N-Gram 语言模型"></a>N-Gram 语言模型</h2><p>如何训练一个语言模型? 在神经网络大热之前, 人们普遍使用<code>N-Gram</code>语言模型。就是收集不同n-gram频率的统计数据，并用它们预测下一个单词，概率模型基于前面提到的马尔可夫简化假设：若使用<code>N</code>-Gram 来预测下一个单词，出现概率仅取决于前面的<code>(N-1)</code>个单词.</p><p>一个<code>N-Gram</code>就是n个连续的单词</p><ul><li><code>Uni</code>gram: “the”, “students”, “opened”, ”their”</li><li><code>Bi</code>gram: “the students”, “students opened”, “opened their”</li><li><code>tri</code>grams: “the students opened”, “students opened their”</li><li><code>4-</code>grams: “the students opened their”</li></ul><p>通过计数来估计统计概率：<code>P(wi| prefixes) = count(prefixes, wi)/count(prefixes) = count(“the students”)/count(“the students opened”)</code></p><p>在实际中，使用 log 转换来避免数值下溢，并且log 转换可以把乘法转换为加法, 计算更快.</p><p>N-Gram模型的缺点很明显：</p><ul><li>无法很好地解决NLP中的长距离依赖现象</li><li>N-gram只是在测试语料库与训练语料库比较相似时表现才比较好。</li><li>稀疏问题1：大多数高阶N-Gram几乎不会出现，我们不能简单地把这些定义为0概率的，因为语言是千变万化的，有些词组虽然少见但不代表不存在</li><li>稀疏问题2：少部分低阶n-gram在测试集中出现了但是在训练集中没有。比如需要预测 “students opened their _”, 但是训练集中没出现过“students opened their”。</li><li>一般而言，N越高，模型表现越好，但是更大的N使稀疏问题变得更糟。通常人们不会取大于5的N。</li><li>需要存储所有可能的N-Gram，所以模型的大小是 <code>O(exp(n))</code>,需要大量的内存.</li></ul><p>针对数据稀疏问题, 可以使用各种平滑处理.</p><h3 id="Add-alpha-smoothing"><a href="#Add-alpha-smoothing" class="headerlink" title="Add alpha smoothing"></a>Add alpha smoothing</h3><ul><li>Assign equal probability to all unseen events.</li><li>Applied in text classification, or domains where zeros probability is not common.</li></ul><h3 id="Backoff-smoothing"><a href="#Backoff-smoothing" class="headerlink" title="Backoff smoothing"></a>Backoff smoothing</h3><ul><li>Use information from lower order N-grams (shorter histories)</li><li>Back off to a lower-order N-gram if we have zero evidence for a higher-order interpolation N-gram.</li><li>Discount: In order for a backoff model to give a correct probability distribution, we have to discount the higher-order N-grams to save some probability mass for the lower order N-grams.</li></ul><p>对于像网络数据这种非常大的N-gram，使用stupid backoff.</p><h3 id="Interpolation-smoothing"><a href="#Interpolation-smoothing" class="headerlink" title="Interpolation smoothing"></a>Interpolation smoothing</h3><ul><li>Interpolation: mix the probability estimates from all the N-gram estimators, weighing and combining the trigram, bigram, and unigram counts</li><li>Simple interpolation: <code>P(w3|w1,w2)=1P(w3|w1,w2)+λ2P(w3|w2)+λ3P(w3)</code>, Σλ=1.</li><li>λ could be trianed/conditioned on training set/contest, choose λ that maximie the probability of held-out data</li></ul><h3 id="Kneser-Ney-smoothing"><a href="#Kneser-Ney-smoothing" class="headerlink" title="Kneser-Ney smoothing"></a>Kneser-Ney smoothing</h3><p>这是目前表现最好的平滑方案.</p><ul><li>Combine absolute discounting and interpolation: Extending interpolatation with an absolute discounting 0.75 for high order grams.</li><li>Use a better estimate for probabilities of lower-order unigrams, the continuation probability, P_continuatin(w) is how likely is w to appear as a novel continutaion.<ul><li>For each word w, count the number of bigram types it completes. Or count the number of word types seen to precede w.</li><li>Every bigram type was a novel continuation the first time it was seen.</li><li>normalized by the total number of word bigram types.</li></ul></li><li>To lower the probability of some fix bigram like “San Franscio”</li><li>For bigram, <code>Pkn(wi|wi-1)=max(count(wi-1,wi)-d, 0)/c(wi-1) +λ(wi-1)P_continuatin(wi), λ(wi-1) = d{w:count(wi-1,w)&gt;0}/c(wi-1)</code>, where {w:count(wi-1,w)&gt;0} is the number of word types that can follow wi-1, also is the # of word types we discounted, also is the # of times we applied normalized discount.</li><li>For general N-gram, <img src="/images/kneser-ney.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成模型在语言模型中的应用包括 N-Gram语言模型，朴素贝叶斯分类器，隐马尔可夫模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在概率统计理论中, 生成模型是指能够生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理快速入门 | 01 概率模型 - 语言模型 - ANLP UoE 爱丁堡</title>
    <link href="http://shukebeta.me/NOTE-ANLP-01-probability-model/"/>
    <id>http://shukebeta.me/NOTE-ANLP-01-probability-model/</id>
    <published>2018-03-31T23:00:00.000Z</published>
    <updated>2018-06-29T19:35:57.287Z</updated>
    
    <content type="html"><![CDATA[<p>爱丁堡大学的自然语言处理入门课程笔记。</p><p>References:<br><a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/" target="_blank" rel="noopener">Accelerated natural language processing</a><br><a href="https://www.inf.ed.ac.uk/teaching/courses/anlp/review/review_ay17.html" target="_blank" rel="noopener">ANLP revision guide</a><br><a href="https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html" target="_blank" rel="noopener">Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning</a><br><a id="more"></a></p><h2 id="概率模型-Probability-model"><a href="#概率模型-Probability-model" class="headerlink" title="概率模型 Probability model"></a>概率模型 Probability model</h2><p>概率模型是随机现象的数学表示，由样本空间，样本空间内的事件以及与每个事件相关的概率定义。目标是模拟给一个事件发生的概率</p><h3 id="估算概率-Probability-estimation"><a href="#估算概率-Probability-estimation" class="headerlink" title="估算概率 Probability estimation"></a>估算概率 Probability estimation</h3><p>相关频率/最大似然估计<br>Relative frequency / maximum likelihood estimation p(X) = Count(x)/N</p><h3 id="平滑处理-Smoothing"><a href="#平滑处理-Smoothing" class="headerlink" title="平滑处理 Smoothing"></a>平滑处理 Smoothing</h3><p>一般用于处理0概率的问题，比如在训练集中看不到, 但出现在测试集中的词。</p><h4 id="加一（Laplace）平滑"><a href="#加一（Laplace）平滑" class="headerlink" title="加一（Laplace）平滑"></a>加一（Laplace）平滑</h4><p>最简单的平滑法，为所有事件（不管有没出现过）的频次加一，这样保证了没有0概率事件出现。<br>这种平滑效果很差，因为齐夫定律<code>Zipf&#39;s law</code>的关系:</p><blockquote><p>在自然语言的语料库里，一个单词出现的频率与它在频率表里的排名成反比。</p></blockquote><p>会有很多长尾单词很少甚至几乎没有出现过, 所以在总数为1的概率池子了, 为了给这些长尾单词分配至少频次1的概率, 需要从真正出现的单词(所谓真实发生的事件)中分走很多概率.</p><p>更多高级的平滑方案参考<a href="/NOTE-ANLP-02-n-gram-model">N-gram</a>部分。</p><h4 id="语言模型-Language-modeling"><a href="#语言模型-Language-modeling" class="headerlink" title="语言模型 Language modeling"></a>语言模型 Language modeling</h4><p>语言模型: 一种用于计算连续的单词（就是句子）或者任何其他序列数据（比如语音）出现的概率的模型，最基本的应用是基于某种语言模型，预测下一个单词出现的概率 <code>P(w|w1, w2, w3...)</code>。</p><p>语言模型本身即是一种概率模型(或者说人们选择用概率模型来描述为语言建模). 因为近现代的自然语言处理主要集中在信息沟通传输方面(比如密码,语音识别, 机器翻译, 校正等), 而香农的信息传输模型使用条件概率来描述鉴定噪音中的真实信息.</p><p>如何表达: 一个句子发生的概率就是里面各个单词的概率的乘积。依赖于概率的链式法则, 一个位置的单词的概率，条件于该位置之前的句子部分的概率。所以通过链式法则得出的语言模型概率是冗长的条件概率乘积。</p><p>但我们可以通过马尔可夫性质 Markov property 把语言模型简化，一个位置单词出现的条件概率可以通过某种近似来逼近: 仅考虑离它最近的（若干）单词，得到<code>P(the| water is so transparent that) ≈ P(the| that)</code>.</p><p><a href="/NOTE-ANLP-01-evaluation#evaluation-concepts-and-methods">Evaluation</a>：一般通过困惑度（Perplexity）来衡量语言模型的好坏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爱丁堡大学的自然语言处理入门课程笔记。&lt;/p&gt;
&lt;p&gt;References:&lt;br&gt;&lt;a href=&quot;http://www.inf.ed.ac.uk/teaching/courses/anlp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accelerated natural language processing&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.inf.ed.ac.uk/teaching/courses/anlp/review/review_ay17.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ANLP revision guide&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="NLP" scheme="http://shukebeta.me/categories/NLP/"/>
    
    
      <category term="NLP" scheme="http://shukebeta.me/tags/NLP/"/>
    
      <category term="Python" scheme="http://shukebeta.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java | Hash @Override equals() hashcode()</title>
    <link href="http://shukebeta.me/Java-hashcode-equals/"/>
    <id>http://shukebeta.me/Java-hashcode-equals/</id>
    <published>2018-02-27T00:00:00.000Z</published>
    <updated>2018-06-29T19:10:35.858Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍：</p><ol><li>Hashcode（哈希码）与 equals（判断相等）的关系</li><li>Hashcode 方法的底层实现原理</li><li>开发中需要掌握的原则和方法</li></ol><h3 id="HashSet-HashMap-HashTable"><a href="#HashSet-HashMap-HashTable" class="headerlink" title="HashSet, HashMap, HashTable"></a>HashSet, HashMap, HashTable</h3><p>HashSet底层是调用HashMap. HashMap 使用hashCode和equals来进行对象比较。<br><a id="more"></a><br>拿HashSet和add()举例(其余的数据结构,和 remove, contains等方法类似):假设HashSet里面已经有了obj1, 那么当调用HashSet.add(obj2)时:</p><ol><li>if (obj1 == obj2), 那么没有必要调用 hashCode(), 已经有了这个对象, 没必要添加了</li><li>else, if hashCode 不同，那么可以直接添加了, 没必要进一步调用 obj1.equals(obj2) 来判断对象是否相等</li><li>else hashCode 相同，那么需要进一步调用obj1.equals(obj2)</li></ol><p>下面这段代码虽然 HashSet 只存了 a 对象，但当检查是否包含 b 对象时，返回true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">String a = <span class="string">"hello"</span>;</span><br><span class="line">String b = <span class="string">"hello"</span>;</span><br><span class="line">wordSet.add(a);</span><br><span class="line"><span class="keyword">return</span> wordSet.contains(b); <span class="comment">// return true</span></span><br></pre></td></tr></table></figure></p><p>根据<a href="https://docs.oracle.com/javase/6/docs/api/java/util/Set.html#add%28E%29" target="_blank" rel="noopener">Javadoc for Set</a>.</p><blockquote><p>adds the specified element e to this set if the set contains no element e2 such that (e==null ? e2==null : e.equals(e2)).</p></blockquote><p>根据<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-" target="_blank" rel="noopener">Javadoc for String.equals</a></p><blockquote><p>Compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object.</p></blockquote><p>Java的set是使用它包含的元素（对象）的 <code>equals()</code>来比较 b 和 a 的。这里 String 类的<code>equals()</code>method 是比较字符串值是否相等(准确的说，是先检查是不是引用同一个对象，再看是不是同一个类，再比较值)，而不是引用的对象是否一样，故<code>b.equals(a)</code>是 true。</p><p>同样的，remove 和 add 也会先进行类似检查。</p><p>问题是，为何 hashCode 不同，就没有进一步调用<code>equals()</code>的必要呢？因为有一个前提是代码遵守The hashCode contract。</p><h3 id="Hashcode-and-equals"><a href="#Hashcode-and-equals" class="headerlink" title="Hashcode and equals"></a>Hashcode and equals</h3><p>在Java中，每个对象都有一个hashCode，它有时容易被人遗忘或误用。有以下三点需要注意，避免掉入常见的陷阱。</p><h4 id="The-hashCode-contract"><a href="#The-hashCode-contract" class="headerlink" title="The hashCode contract"></a>The hashCode contract</h4><p>根据 The hashCode contract:</p><blockquote><p>Objects that are equal must have the same hash code within a running process.</p></blockquote><p>除了字面意思，也有其他隐含的意思: 不相等的对象的hashcode也可能一样; 具有相同 hash code 的对象不一定相等.</p><blockquote><p>You must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable. — Effective Java, by Joshua Bloch</p></blockquote><p>根据这个contract，可以延伸出以下实践原则：</p><p><strong>一、 每当你 override equals 时，也要 override hashCode</strong><br>假如你需要使用不一样的equals判断标准，那么就需要重写equals。但假如仅仅重写equals，而不重写hashcode()，就可能会违背 The hashCode contract。</p><p>为什么？因为 hashCode method 需要同时适配真正使用到的 equals method 的判断标准。通过重写equals，我们重新声明了一种判断对象是否相等的标准，但原始的 hashCode method还是会将所有对象视为不同的对象。所以如果没有不重写hashcode，那么根据@Override equals 判断为相同的对象将拥有不同的hashcode（可能）。这样，即使已经有了这个object，在HashMap上调用 contains() 也会返回false。</p><p>例子：在Java的创建街道street这个类，在判断两条街道是否相同时，我们有自定义的规则 - 只要是在同一个城市，有同样的街道名，那么两个street就相等，即使他们是存放在不同内存位置的两个对象（Java 的 Object 原生的equals是根据引用的对象内存地址来比较判断的）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Street</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Street))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        Street rhs = (Street) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EqualsBuilder().</span><br><span class="line">            <span class="comment">// if deriving: appendSuper(super.equals(obj)).</span></span><br><span class="line">            append(name, rhs.name).</span><br><span class="line">            append(age, rhs.city).</span><br><span class="line">            isEquals();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">17</span>, <span class="number">31</span>). <span class="comment">// two randomly chosen prime numbers</span></span><br><span class="line">            <span class="comment">// if deriving: appendSuper(super.hashCode()).</span></span><br><span class="line">            append(name).</span><br><span class="line">            append(city).</span><br><span class="line">            toHashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果没有重写hashCode()， 那么两个名字和所在城市一样的，但引用不同地址的street就会按照默认的 hashcode() 返回不一样的code，但是根据重写的equals(), 他们是一样的, 这样就违背了 hashCode contract。</p><p>为了安全起见，让Eclipse IDE 生成 equals 和 hashCode 函数：<code>Source &gt; Generate hashCode() and equals()...</code><br><img src="https://eclipsesource.com/wp-content/uploads/2012/09/generate-hashcode-equals.png" alt=""></p><p>为了提醒自己, 还可以配置Eclipse以检测是否有违反此规则的情况，并为仅重写了equals但没重写hashCode的情况显示错误：<code>Preferences &gt; Java &gt; Compiler &gt; Errors/Warnings, then use the quick filter to search for “hashcode”</code><br><img src="https://eclipsesource.com/wp-content/uploads/2012/09/hashcode-error-config.png" alt=""></p><h3 id="HashCode-collisions"><a href="#HashCode-collisions" class="headerlink" title="HashCode collisions"></a>HashCode collisions</h3><p>HashCode collisions 指两个不同的对象具有相同的hashcode这种情况, 这不是什么严重的问题. 只是会导致更多的搜索步骤，太多collisions就可能会降低系统性能</p><p>但是，如果将HashCode错误地用作对象的唯一句柄，例如将其用作Map中的key，那么有时会得到错误的对象。虽然collisions一般很少见，但却是不可避免的。例如，字符串“Aa”和“BB”产生相同的hashCode：2112. 因此衍生出第二个原则</p><p><strong>二、永远不要把hashcode当做key来使用</strong></p><p>Java中有4,294,967,296个（2<sup>32</sup>)可能的int值）。既然拥有40亿个插槽，collisions似乎几乎不可能对吧？</p><p>但事实上，也不是那么不可能。试想，一个房间里有23名随机人员。你如何估计里面有两个人生日一样的概率？很低？因为一年有365天？事实上，概率约为50％！这种现象被称为<a href="http://en.wikipedia.org/wiki/Birthday_paradox" target="_blank" rel="noopener">生日问题(悖论)</a>。</p><blockquote><p>如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。</p></blockquote><p>问题的本质是”23人之中两两之间存在生日相同的概率””,而不是”其他22人与其中一个人的生日相同的概率”.</p><p>类比到hashcode里，这意味着有77,163个不同的对象，collisions概率是50%（假设有一个理想的hashCode函数，将对象均匀分布在所有可用的buckets中）。</p><h3 id="HashCodes-会变"><a href="#HashCodes-会变" class="headerlink" title="HashCodes 会变"></a>HashCodes 会变</h3><p>HashCode 不保证在不同的执行过程中总能返回相同的code。根据JavaDoc：Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. <strong>This integer need not remain consistent from one execution of an application to another execution</strong> of the same application.</p><p>这种情况并不常见，实际上，库中的某些类甚至指定了用于计算hashcode的精确公式（例如String）。对于这些类，hashcode总是相同的。但是，尽管大多数的hashCode方法提供了稳定的值，但我们不能依赖它。正如<a href="http://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html" target="_blank" rel="noopener">这篇文章</a>所指出的那样，Java库实际上在不同的进程中返回不同的hashCode值，这往往会让人们感到困惑。 Google的<a href="http://code.google.com/p/protobuf/" target="_blank" rel="noopener">Protocol Buffers</a>就是一个例子。 因此，您不应该在分布式应用程序中使用hash code。即使两者相等，远程对象的 hash code 也可能与本地的不同。</p><p><strong>三、不要在分布式应用程序中使用 hashCode</strong><br>此外，要意识到，hashCode函数的实现可能会随着版本的更改而改变。因此我们的代码最好不依赖任何特定的hash code 值。例如，你不应该使用hash code来保持某种状态，不然下次运行时，“相同”对象的hash code可能会不同。</p><p>所以最好的建议可能是：除非自己创建了基于 hashcode 算法，否则根本就不要使用 hashCode 呵呵……</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在依赖于 HashSet, HashMap, HashTable … 等数据结构的程序中：</p><ol start="3"><li>仅重写 equals()，会导致业务出错</li><li>仅重写 hashcode(), 在比较两个对象时不会强制Java忽略内存地址</li><li>如果不涉及对象比较(比如仅仅是iteration), 那么不需要hashCode and/or equals</li></ol><p>参考：<br><a href="https://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/" target="_blank" rel="noopener">https://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/</a><br><a href="https://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java" target="_blank" rel="noopener">https://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hashcode（哈希码）与 equals（判断相等）的关系&lt;/li&gt;
&lt;li&gt;Hashcode 方法的底层实现原理&lt;/li&gt;
&lt;li&gt;开发中需要掌握的原则和方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;HashSet-HashMap-HashTable&quot;&gt;&lt;a href=&quot;#HashSet-HashMap-HashTable&quot; class=&quot;headerlink&quot; title=&quot;HashSet, HashMap, HashTable&quot;&gt;&lt;/a&gt;HashSet, HashMap, HashTable&lt;/h3&gt;&lt;p&gt;HashSet底层是调用HashMap. HashMap 使用hashCode和equals来进行对象比较。&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 13 实现继承 Implementation Inheritance - CS61B Berkeley - Josh Hug</title>
    <link href="http://shukebeta.me/NOTE-data-structures-CS61B-13-Implementation-Inheritance/"/>
    <id>http://shukebeta.me/NOTE-data-structures-CS61B-13-Implementation-Inheritance/</id>
    <published>2018-02-24T00:00:00.000Z</published>
    <updated>2018-06-29T19:34:55.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implementation-Inheritance"><a href="#Implementation-Inheritance" class="headerlink" title="Implementation Inheritance"></a>Implementation Inheritance</h2><p>除了signature之外，Java也允许subclass继承具体的实现方法。实现继承是subclass从superclass继承实现的关系。<br><a id="more"></a></p><h3 id="缺省方法"><a href="#缺省方法" class="headerlink" title="缺省方法"></a>缺省方法</h3><p>从 Java 8开始支持 Default method。</p><p>我们可以在List中列出已实现的method。这些方法就是 default method，定义了List hypernyms的一些默认行为：<code>default public void method() { ... }</code>.</p><p>我们可以自由调用interface中定义的方法，而不用操心具体的实现。Default method 适用于实现接口的任何类型的对象！子类可以直接调用，而不必重新实现 default method。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过，我们仍然可以override default method，在子类中重新定义该方法。这样，只要我们在LinkedLList上调用<code>print()</code>，它就会调用子类override的方案，而不是父类的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedList</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Dynamic-type"><a href="#Dynamic-type" class="headerlink" title="Dynamic type"></a>Dynamic type</h3><p>Java是通过一个叫“dynamic method selection”的特性，来确定要调用 default method 还是已经被子类override的method。</p><p>当实例声明<code>List&lt;String&gt; l = new LinkedList&lt;String&gt;();</code>, 则指明<code>l</code>是 static 类型的 List。由 new 生成的 object 是LinkedList类型，也从属于 List 类型。但是，因为这个对象本身是使用 LinkedList 构造函数实例化的，所以我们称之为 dynamic type。</p><blockquote><p>Dynamic type 的名称源于: 当<code>l</code>被重新分配指向另一种类型的对象时，比如说一个 ArrayList 对象，<code>l</code>的动态类型现在就变为 ArrayList. 因为它根据当前引用的对象的类型而改变, 所以是动态的。</p></blockquote><p>Static vs. Dynamic Type:</p><ul><li>Java 每个变量都有一个static type （compile-time type），这是变量声明时指定的类型，在编译时会检查。</li><li>每个变量也有一个 Dynamic Type（run-time type），此类型在变量实例化（new）时指定，并在运行时检查。等同于地址指向的对象的类型。</li></ul><p>当Java运行一个被overriden的方法时，会根据该实例的dynamic type 匹配对应的 method。</p><p>注意，如果是overload:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">(LinkedList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于上面的实例化的<code>l</code>, 当Java检查要调用哪个方法时，它会检查 static type (此时是List)并使用相同类型的参数调用该方法，也就是使用List作为签名的那个方法。</p><h3 id="区别-Interface-Inheritance-与-Implementation-Inheritance"><a href="#区别-Interface-Inheritance-与-Implementation-Inheritance" class="headerlink" title="区别 Interface Inheritance 与 Implementation Inheritance"></a>区别 Interface Inheritance 与 Implementation Inheritance</h3><p>Interface Inheritance 接口继承（what）：指定 subclass 应该实现的功能，即只提供 method signature。</p><p>Implementation Inheritance 实现继承（how）：提供功能的实现方案，即提供 method implementation。允许代码再利用，也给subclass设计者提供了更多的自由度，由他们自行决定是否override default method。</p><p>Implementation inheritance 也有一些缺点：</p><ul><li>人会犯错。我们有可能忘了自己曾经override过一个方法。</li><li>如果两个接口给出冲突的 default method，则可能很难解决冲突。</li><li>无形中鼓励代码复杂化。</li><li>Breaks encapsulation!</li></ul><p>最后，注意<strong>从属</strong>和<strong>拥有</strong>的区别：subclass 和 superclass 是上下级从属分类，而不是拥有与被拥有的关系，不要跟 nested class 混淆。</p><blockquote><p>Interface Methods: Default methods and abstract methods in interfaces are inherited like instance methods. However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict.<br>– <a href="https://docs.oracle.com/javase/tutorial/java/IandI/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/IandI/index.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Implementation-Inheritance&quot;&gt;&lt;a href=&quot;#Implementation-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Implementation Inheritance&quot;&gt;&lt;/a&gt;Implementation Inheritance&lt;/h2&gt;&lt;p&gt;除了signature之外，Java也允许subclass继承具体的实现方法。实现继承是subclass从superclass继承实现的关系。&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 12 接口继承 Interface Inheritance - CS61B Berkeley - Josh Hug</title>
    <link href="http://shukebeta.me/NOTE-data-structures-CS61B-12-Interface-Inheritance/"/>
    <id>http://shukebeta.me/NOTE-data-structures-CS61B-12-Interface-Inheritance/</id>
    <published>2018-02-23T00:00:00.000Z</published>
    <updated>2018-06-29T19:35:00.697Z</updated>
    
    <content type="html"><![CDATA[<p>我们前面创建的 <code>LinkedList</code> and <code>ArrayList</code> 其实很相似 - 所有的method都一样.</p><p>如果我们需要写一个需要用到 list 的类比如<code>WordUtils</code> class, 我们如何让它既可以使用<code>LinkedList</code>又可以用<code>ArrayList</code>？<br><a id="more"></a><br>简单的方法及时写两个同名不同参数的methods。即所谓<code>method overloading</code>。<br><code>public static String longest(LinkedList&lt;String&gt; list)</code><br><code>public static String longest(ArrayList&lt;String&gt; list)</code></p><p>但 overload 有几个缺点:</p><ul><li>重复冗余，写两个几乎相同的代码块。</li><li>产生更多需要维护的代码，那意味着如果你想对的方法做一个小优化或debug，你需要在对应每种list的方法中改变它。</li><li>如果我们想要适配更多的列表类型，不得不复制每个新列表类的方法。</li></ul><p>为避免以上问题，我们一般希望能尽量把两个功能近似的方法合并，但要保证其足够广泛的适用场景。此时可以使用<strong>接口 interface</strong>。<br><!-- more --></p><h3 id="上位词，下义词和接口继承"><a href="#上位词，下义词和接口继承" class="headerlink" title="上位词，下义词和接口继承"></a>上位词，下义词和接口继承</h3><p>Hypernyms, Hyponyms, and Interface Inheritance</p><p>首先要理解，上位词和下位词是语言学的定义，直接沿用到编程语言中。就像狗是哈士奇的上位词，哈士奇是狗的下义词，在Java把这种关系形式化：如果<code>LinkedList</code>是List的Hyponyms，那么<code>LinkedList</code>类是List的subclass，而List类是<code>LinkedList</code>类的superclass(超类/父类)。</p><p>在Java中，为了表达这种层次结构，我们需要：</p><ol><li>定义通用列表 List interface。</li><li>把<code>LinkedList</code>和<code>ArrayList</code>指定为 List 的 hyponyms。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 List 是Java中的 interface 接口。本质上是一个指定list必须能够做什么的合约，具体如何做并不是它关心的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 具体的执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        insert(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指定ArrayList是List的hyponyms. <code>implements List&lt;Item&gt;</code>类似一种承诺 - 保证具备 List interface 中制定的所有属性（变量）和行为（方法），并提供具体实现方案。</p><p>这样就可以同时适配多种list：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">   <span class="comment">/** Returns the length of the longest word. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> list.get(maxDex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     ArrayList&lt;String&gt; someList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     <span class="comment">//or</span></span><br><span class="line">     LinkedList&lt;String&gt; someList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">     ...</span><br><span class="line">     System.out.println(longest(someList));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a>Overriding</h3><p>Subclass 可以<strong>覆盖 override</strong> superclass的方法。</p><blockquote><p>区分 Override 与 重载 overloaded：Override 的方法 signature 相同；overloaded的方法同名但不同signature。</p></blockquote><p>在子类中实现合约指定的功能时，需要在method的signature顶部包含<code>@Override</code>标签。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但即使不包含这个<code>@Override</code>，我们仍然override了这个方法。所以从技术上来说，<code>@Override</code>并不是必须的。但是，它可以作为一个保障, 提醒编译器我们打算override此方法, 如果过程中出现问题, 编译器可以提醒。假设当我们想 override <code>addLast</code>，却不小心写成<code>addLsat</code>。此时如果不包含<code>@Override</code>，那么可能无法发现错误。如果有了<code>@Override</code>，编译器就会提示我们修复错误。</p><h3 id="总结：Interface-Inheritance"><a href="#总结：Interface-Inheritance" class="headerlink" title="总结：Interface Inheritance"></a>总结：Interface Inheritance</h3><p>接口继承是指subclass继承superclass的所有方法/行为的关系：</p><ul><li>子类继承父类</li><li>Interfaces 接口列出所有方法的签名，就像‘合约’，但没有具体的实现</li><li>根据‘合约’，由子类来实现且必须实现（override）每一个method，否则无法通过编译</li><li>继承关系可以延续多代。例如，B可以继承A，C可以继承B.</li></ul><h3 id="GRoE"><a href="#GRoE" class="headerlink" title="GRoE"></a>GRoE</h3><p>根据Java的Golden Rule of Equals，每一个赋值a = b，本质上是把b中的bits拷贝到a中，着要求b和a的类型相同。</p><p>同理, 假设<code>public static String longest(List&lt;String&gt; list)</code>既接受List, 也接受ArrayList和LinkedList，但是由于ArrayList和List是不同的类，那怎么遵守GRoE呢？</p><p>因为ArrayList与List有着上下位包含的关系，这意味着ArrayList应该能够赋值给List的内存位中.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; someList = <span class="keyword">new</span> SLList&lt;String&gt;();</span><br><span class="line">    someList.addFirst(<span class="string">"elk"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码运行时，会创建SLList并将其地址存储在someList变量中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们前面创建的 &lt;code&gt;LinkedList&lt;/code&gt; and &lt;code&gt;ArrayList&lt;/code&gt; 其实很相似 - 所有的method都一样.&lt;/p&gt;
&lt;p&gt;如果我们需要写一个需要用到 list 的类比如&lt;code&gt;WordUtils&lt;/code&gt; class, 我们如何让它既可以使用&lt;code&gt;LinkedList&lt;/code&gt;又可以用&lt;code&gt;ArrayList&lt;/code&gt;？&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 11 测试 Testing - CS61B Berkeley - Josh Hug</title>
    <link href="http://shukebeta.me/NOTE-data-structures-CS61B-11-testing/"/>
    <id>http://shukebeta.me/NOTE-data-structures-CS61B-11-testing/</id>
    <published>2018-01-29T00:00:00.000Z</published>
    <updated>2018-06-29T19:35:04.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如何知道自己的程序是否真的在工作？在现实世界中，程序员相信他们的代码，因为代码通过了他们自己编写的测试。常用的测试有 Ad Hoc Testing， Unit test 和 Integration Testing。</p><p>Ad Hoc Testing，是指没有计划和记录的软件测试，除非发现缺陷，不然一般只运行一次。</p><h3 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h3><p>程序可分解为单元（或程序中可测试的最小部分），Unit test 严格测试代码的每个单元，最终确保项目正确运行。<br>Unit test 好处：</p><ol><li>Unit test 保证良好的代码结构（每个 method “只打一份工”），帮助我们较好地解析任务，</li><li>允许我们考虑每个方法的所有边界情况，并单独测试它们。</li><li>让我们每次只专注于一个单元，进行测试，debug，对准确度有信心后，再进行下一个单元的开发。相比于一次性写完所有代码，再测试debug，Unit test 减少了 debugging 时间。<a id="more"></a>坏处：</li><li>测试也要花时间</li><li>测试本身也是有可能出错的，测试可能不全面，不规范，或者有bug</li><li>有些单元是依赖于其他单元的</li><li>Unit testing 无法保证各个模块的交互，无法保证整个系统作为一个整体是否正常工作。</li></ol><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><p>JUnit是一个给Java做测试的框架，由Erich Gamma（Design Patterns）和Kent Beck（eXtreme Programming）编写。<br>JUnit使用Java的 reflection 功能（Java程序可以检查自己的代码）和注释。<br>JUnit允许我们：</p><ul><li>定义并执行测试和测试套件</li><li>使用测试作为规范的有效手段</li><li>使用测试来支持重构</li><li>将修改的代码集成到构建中<br>JUnit可用于多个IDE，例如BlueJ，JBuilder和Eclipse在一定程度上具有JUnit集成。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(&lt;expected&gt;, &lt;actual&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assertEquals</code>测试一个变量的实际值是否等于它的期望值。<br>JUnit test 各个测试方法，必须是非静态的（JUnit的设计人员设计规定的）。</p><p>JUnit的术语</p><ul><li>Test runner：测试运行器， 运行测试和报告结果的软件。实现方式：集成到IDE中，独立GUI，命令行等</li><li>Test suite：测试套件是一组测试用例。</li><li>Test case：测试用例用于测试单个方法对特定输入集的响应。</li><li>Unit test：单元测试的单元，是代码中我们能够相对合理地测试的最小的元素，通常是单个类。</li></ul><p>常用的JUnit接口和方法<br><code>@Before</code>: Creates a test fixture by creating and initialising objects and values.</p><p><code>@After</code>: Releases any system resources used by the test fixture. Java usually does this for free, but files, network connections etc. might not get tidied up automatically.</p><p><code>@Test</code>：tests cases.</p><p><code>static void assertTrue(boolean test)</code>, <code>static void assertTrue(String message, boolean test)</code>, <code>static void assertFalse(boolean test)</code>, <code>static void assertFalse(String message, boolean test)</code></p><h3 id="Integration-Testing"><a href="#Integration-Testing" class="headerlink" title="Integration Testing"></a>Integration Testing</h3><p>鉴于 Unit testing 无法保证，有交互的多个模块，作为一个整体是否正常工作。<br>我们可能需要 integration testing，把各个模块合并，作为一个组合，进行测试（也可以把 Unit test 组合起来变成 integration testing）。</p><p>Integration testing 一般都比较麻烦，也不容易自动化，而且一般是在比较高的抽象层进行测试，可能会漏掉微小的错误。</p><p>当把所有模块都作为一个整体，也就是整个系统作为测试对象时，就是 system testing。</p><h3 id="Test-driven-development"><a href="#Test-driven-development" class="headerlink" title="Test driven development"></a>Test driven development</h3><p>TDD开发步骤：</p><ol><li>明确一项新功能需求。</li><li>为该功能编写 Unit test。</li><li>运行测试，<font color="red">按理应该无法通过测试</font>（因为还没写功能程序）。</li><li>编写通过实现该功能的代码，<font color="green">通过测试</font>。</li><li>可选：重构代码，使其更快，更整洁等等。</li></ol><p><img src="http://www.pathfindersolns.com/wp-content/uploads/2012/05/red-green-refactorFINAL2.png" alt="source from http://ryantablada.com/post/red-green-refactor---a-tdd-fairytale " title="image from: http://ryantablada.com/post/red-green-refactor---a-tdd-fairytale"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;如何知道自己的程序是否真的在工作？在现实世界中，程序员相信他们的代码，因为代码通过了他们自己编写的测试。常用的测试有 Ad Hoc Testing， Unit test 和 Integration Testing。&lt;/p&gt;
&lt;p&gt;Ad Hoc Testing，是指没有计划和记录的软件测试，除非发现缺陷，不然一般只运行一次。&lt;/p&gt;
&lt;h3 id=&quot;Unit-test&quot;&gt;&lt;a href=&quot;#Unit-test&quot; class=&quot;headerlink&quot; title=&quot;Unit test&quot;&gt;&lt;/a&gt;Unit test&lt;/h3&gt;&lt;p&gt;程序可分解为单元（或程序中可测试的最小部分），Unit test 严格测试代码的每个单元，最终确保项目正确运行。&lt;br&gt;Unit test 好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unit test 保证良好的代码结构（每个 method “只打一份工”），帮助我们较好地解析任务，&lt;/li&gt;
&lt;li&gt;允许我们考虑每个方法的所有边界情况，并单独测试它们。&lt;/li&gt;
&lt;li&gt;让我们每次只专注于一个单元，进行测试，debug，对准确度有信心后，再进行下一个单元的开发。相比于一次性写完所有代码，再测试debug，Unit test 减少了 debugging 时间。
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>Computer Systems - A Programmer&#39;s Perspective (CSAPP) - CMU 15213</title>
    <link href="http://shukebeta.me/csapp/"/>
    <id>http://shukebeta.me/csapp/</id>
    <published>2018-01-29T00:00:00.000Z</published>
    <updated>2018-08-21T19:44:14.466Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSAPP 非常巧妙的把程序设计及优化、数字电路基础、指令集体系、汇编语言、存储器体系结构、链接与装载、进程、虚存等来自不同学科的核心知识点和在一起，并以程序员的视角呈现; 告诉我们作为一个程序员，究竟需要对计算机的硬件了解到什么程度？</p></blockquote><p>本笔记是 CMU CSAPP 的学习笔记, 使用 CMU 15-213, UW CSE351 的课程视频, lab, 作业, project 辅助练习.</p><ol><li><a href="http://csapp.cs.cmu.edu/" target="_blank" rel="noopener">Computer Systems: A Programmer’s Perspective (csapp)</a>, 豆瓣-<a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener">深入理解计算机系统</a></li><li><a href="https://www.cs.cmu.edu/~213/" target="_blank" rel="noopener">卡内基梅隆大学 CMU 15-213 Introduction to Computer Systems (ICS)</a></li><li><a href="https://courses.cs.washington.edu/courses/cse351/" target="_blank" rel="noopener">华盛顿大学 UW CSE351: The Hardware/Software Interface</a><a id="more"></a></li></ol><h2 id="Computer-system"><a href="#Computer-system" class="headerlink" title="Computer system"></a>Computer system</h2><h3 id="Information-is-Bits-Context"><a href="#Information-is-Bits-Context" class="headerlink" title="Information is Bits + Context"></a>Information is Bits + Context</h3><p>Study systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The source program is a sequence of bits, each with a value of 0 or 1, organized in 8-bit chunks(bytes). Each byte represents some text character in the program.</p><p>All information in a system — including disk files, programs stored in memory, user data stored in memory, and data transferred across a network—is represented as a bunch of bits.</p><h3 id="Programs-are-traslated-by-other-programs-into-different-forms"><a href="#Programs-are-traslated-by-other-programs-into-different-forms" class="headerlink" title="Programs are traslated by other programs into different forms"></a>Programs are traslated by other programs into different forms</h3><p>The hello program begins as a high-level C program because it can be read and understood by human beings in that form. However, in order to run hello.c on the system, the individual C statements must be translated by other programs into a sequence of low-level machine-language instructions.</p><p>These instructions are then packaged in a form called an executable object program and stored as a binary <strong>disk</strong> file. Object programs are also referred to as executable object files.</p><p>The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known collectively as the compilation system.</p><ul><li>Preprocessing phase.The preprocessor (cpp) modifies the original C program according to directives that begin with the # character.</li><li>Compilation phase. The compiler (cc1) translates the text file hello.i into the text file hello.s, which contains an assembly-language program. Assembly language is useful because it provides a common output language for different compilers for different high-level languages.</li><li>Assembly phase. Next, the assembler (as) translates hello.s into machinelanguage instructions, packages them in a form known as a relocatable object program, and stores the result in the object file hello.o.<ul><li>The hello.o file is a binary file whose bytes encode machine language instructions rather than characters.</li></ul></li><li>Linking phase. The printf function resides in a separate precompiled object file called printf.o, which must somehow be merged with our hello.o program. The linker (ld) handles this merging.</li></ul><h3 id="Processors-read-and-interpret-instructions-stored-in-memory"><a href="#Processors-read-and-interpret-instructions-stored-in-memory" class="headerlink" title="Processors read and interpret instructions stored in memory"></a>Processors read and interpret instructions stored in memory</h3><p>The hello.c source program has been translated by the compilation system into an executable object file called hello that is stored on disk, to run the executable file on Unix:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unix&gt; ./hello</span><br><span class="line">hello, world</span><br><span class="line">unix&gt;</span><br></pre></td></tr></table></figure></p><p>The shell is a command-line interpreter that prints a prompt, waits for you to type a command line, and then performs the command.</p><h3 id="Hardware-organization-of-a-systems"><a href="#Hardware-organization-of-a-systems" class="headerlink" title="Hardware organization of a systems"></a>Hardware organization of a systems</h3><p>Hardware organization of a typical system.</p><h4 id="Buses"><a href="#Buses" class="headerlink" title="Buses"></a>Buses</h4><p>Electrical conduits that carry bytes of information back and forth between the components. Buses are typically designed to transfer fixed-sized chunks of bytes known as words. USB: Universal Serial bus.</p><h4 id="Input-output-I-O-devices"><a href="#Input-output-I-O-devices" class="headerlink" title="Input/output (I/O) devices"></a>Input/output (I/O) devices</h4><p>The system’s connection to the external world. Each I/O deviceisconnected to the I/O bus by either a controller or an adapter：</p><ul><li>Controllers are chip sets in the device itself or on the system’s main printed circuit board (often called the motherboard).</li><li>An adapter is a card that plugs into a slot on the motherboard.</li></ul><h4 id="Main-Memory"><a href="#Main-Memory" class="headerlink" title="Main Memory"></a>Main Memory</h4><p>A temporary storage device that holds both a program and the data it manipulates while the processor is executing the program.</p><ul><li>Physically, main memory consists of a collection of dynamic random access memory (DRAM) chips.</li><li>Logically, memory is organized as a linear array of bytes, each with its own unique address (array index) starting at zero<br>*<h4 id="Processor-Central-Processing-Unit-CPU"><a href="#Processor-Central-Processing-Unit-CPU" class="headerlink" title="Processor: Central Processing Unit (CPU)"></a>Processor: Central Processing Unit (CPU)</h4></li><li>PC: Program counter, a word-sized storage device (or register) at CPU core. At any point in time, the PC points at (contains the address of) some machine-language instruction in main memory.</li><li>Register: a quickly accessible location available to CPU,</li><li>Register file: an array of registers, each with its own unique name.</li><li>Arithmetic/logic unit: ALU computes new data and address values.</li></ul><p>A processor repeatedly executes the instruction pointed at by the program counter and updates the program counter to point to the next instruction. The processor reads the instruction from memory pointed at by the PC, interprets the bits in the instruction, performs some simple operation dictated by the instruction, and then updates the PC to point to the next instruction.</p><h4 id="CPU-operations-examples"><a href="#CPU-operations-examples" class="headerlink" title="CPU operations examples"></a>CPU operations examples</h4><p>Load: Copy a byte or a word from main memory into a register, overwriting the previous contents of the register.</p><p>Store(write): Copy a byte or a word from a register to a location in main memory, overwriting the previous contents of that location.</p><p>Operate: Copy the contents of two registers to the ALU, perform an arithmetic operation on the two words, and store the result in a register, overwriting the previous contents of that register.</p><p>Jump: Extract a word from the instruction itself and copy that word into the program counter (PC), overwriting the previous value of the PC.</p><p>Branch greater than (BGT): compares two registers and decides whether to branch (target would be the address to branch to), i.e. it is implementing the “if” decision.</p><h3 id="Running-a-programs"><a href="#Running-a-programs" class="headerlink" title="Running a programs"></a>Running a programs</h3><ol><li>Initially, the shell program is waiting for user types a command. As we type the characters “./hello” at the keyboard, the shell program reads each one into a register, and then stores it in memory.</li><li>When we hit the <em>enter</em> key on the keyboard, the shell knows that we have finished typing the command. The shell then loads the executable hello file by executing a sequence of instructions that copies the code and data in the hello object file <strong>from disk to main memory</strong>. The data include the string of characters “hello, world\n” that will eventually be printed out. Using a technique known as direct memory access (DMA), the data travels directly from disk to main memory, without passing through the processor.</li><li>Once the code and data in the hello object file are loaded into memory, the processor begins executing the machine-language instructions in the hello program’s main routine. These instructions copy the bytes in the <code>hello, world\n</code> string from memory to the register file, and from there to the display device, where they are displayed on the screen.</li></ol><h3 id="Caches"><a href="#Caches" class="headerlink" title="Caches"></a>Caches</h3><p>An important lesson from this simple example is that a system spends a lot of time moving information from one place to another. From a programmer’s perspective, much<br>of this copying is overhead that slows down the “real work” of the program. Because of physical laws, larger storage devices are slower than smaller storage devices. Speed that processor read from: register &gt; memory &gt; disk.</p><p>It is easier and cheaper to make processors run faster than it is to make main memory run faster. To deal with the processor-memory gap, system designers include smaller<br>faster storage devices called cache memories (or simply caches) that serve as temporary staging areas for information that the processor is likely to need in the near future.</p><p>The L1 and L2 caches are implemented with a hardware technology known as static random access memory (SRAM). Newer and more powerful systems even have three levels of cache: L1, L2, and L3.</p><p>By setting up caches to hold data that is likely to be accessed often, we can perform most memory operations using the fast caches.</p><h3 id="Storage-Devices-Form-a-Hierarchy"><a href="#Storage-Devices-Form-a-Hierarchy" class="headerlink" title="Storage Devices Form a Hierarchy"></a>Storage Devices Form a Hierarchy</h3><p><img src="/images/memory_hierarchy.png" alt="" title="source from:http://csapp.cs.cmu.edu/"></p><h3 id="Operating-system"><a href="#Operating-system" class="headerlink" title="Operating system"></a>Operating system</h3><p>The operating system has two primary purposes: (1) to protect the hardware from misuse by runaway applications, and (2) to provide applications with simple and uniform mechanisms for manipulating complicated and often wildly different low-level hardware devices.</p><p>Think of the operating system as a layer of software interposed between the application program and the hardware, with fundamental abstractions: processes, virtual memory, and files.<br><img src="/images/operating_system_abs.png" alt="" title="Abstractions provided by an operating system. Source from:http://csapp.cs.cmu.edu/"></p><h4 id="Process-进程"><a href="#Process-进程" class="headerlink" title="Process 进程"></a>Process 进程</h4><p>A process is the operating system’s abstraction for a running program. Multiple processes can run concurrently on the same system by having the processor switch (<strong>context switching</strong>) among them, and each process appears to have exclusive use of the hardware.</p><p>The os keeps track of all the state information that the process needs in order to run. This state, i.e. the context, includes information such as the current values of the PC, the register file, and the contents of main memory.</p><p>When the operating system decides to transfer control from the current process to some new process, it performs a context switch by saving the context of the current process, restoring the context of the new process, and then passing control to the new process. The new process picks up exactly where it left off. <img src="/images/Process_context.png" alt="" title="Process context switching. Source from:http://csapp.cs.cmu.edu/"></p><h4 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h4><p>Virtual memory is an abstraction that provides each process with the illusion that it has exclusive use of the main memory. Each process has the same uniform view of memory, which is known as its virtual address space.</p><p>In Linux, the topmost region of the address space is reserved for code and data in the operating system that is common to all processes. The lower region of the address space holds the code and data defined by the user’s process.<br><img src="/images/Process_virtual_address.png" alt="" title="Process virtual address space. Source from:http://csapp.cs.cmu.edu/"><br>Starting with the lowest addresses and working our way up:</p><ol><li>Program code and data: Fixed in size once the process begins running. The code and data areas are initialized directly from the contents of an executable object file, in our case the hello executable.</li><li>Run-time heap: expands and contracts dynamically at run time as a result of calls to C standard library routines such as <code>malloc</code> and <code>free</code>.</li><li>Shared libraries: holds the code and data for shared libraries such as the C standard library and the math library.</li><li>User stack: the compiler uses to implement function calls. Each time we call a function, the stack grows. Each time we return from a function, it contracts.</li><li>Kernel virtual memory: The kernel is the part of the operating system that is always resident in memory. Application programs are not allowed to read or write the contents of the top region of the address space (which is reserved for the kernel) or to directly call functions defined in the kernel code.</li></ol><h4 id="Thread-线程"><a href="#Thread-线程" class="headerlink" title="Thread 线程"></a>Thread 线程</h4><p>In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically a part of the operating system.</p><p>In most cases a thread is a component of a process. Multiple threads can exist within one process, executing concurrently and sharing resources such as memory, while different processes do not share these resources.</p><p>Threads are an increasingly important programming model because of the requirement for concurrency in network servers, because it is easier to share data between multiple threads than between multiple processes, and because threads are typically more efficient than processes.</p><h4 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h4><p>A file is a sequence of bytes. Every I/O device, including disks, keyboards, displays, and even networks, is modeled as a file. All input and output in the system is performed by reading and writing files, using a small set of system calls known as <em>Unix I/O</em>.</p><h2 id="Concurrency-and-Parallelism"><a href="#Concurrency-and-Parallelism" class="headerlink" title="Concurrency and Parallelism"></a>Concurrency and Parallelism</h2><p>Concurrency: general concept of a system with multiple, simultaneous activities.<br>Parallelism: the use of concurrency to make a system run faster.</p><p>Parallelism could be achieved in different levels of abstraction in computer system. There are three common levels (from the highest to the lowest level in the system hierarchy):</p><h3 id="Thread-Level-Concurrency"><a href="#Thread-Level-Concurrency" class="headerlink" title="Thread-Level Concurrency"></a>Thread-Level Concurrency</h3><p>Building on the process abstraction, we are able to devise systems where multiple programs execute at the same time, leading to concurrency. With threads, we can even have multiple control flows executing within a single process.</p><p>When we construct a system consisting of multiple processors all under the control of a single operating system kernel, we have a multiprocessor system</p><p><strong>Multi-core processors</strong>: Several CPUs (referred to as “cores”) integrated onto a single integrated-circuit chip.</p><p><strong>Hyperthreading</strong>: Sometimes called simultaneous multi-threading, is a technique that allows a single CPU to execute multiple flows of control.</p><h3 id="instruction-level-parallelism"><a href="#instruction-level-parallelism" class="headerlink" title="instruction-level parallelism"></a>instruction-level parallelism</h3><p>At a much lower level of abstraction, modern processors can execute multiple instructions at one time.</p><h3 id="Single-Instruction-Multiple-Data-SIMD-Parallelism"><a href="#Single-Instruction-Multiple-Data-SIMD-Parallelism" class="headerlink" title="Single-Instruction, Multiple-Data (SIMD) Parallelism"></a>Single-Instruction, Multiple-Data (SIMD) Parallelism</h3><p>At the lowest level, special hardware that allows a single instruction to cause multiple operations to be performed in parallel.</p><h2 id="Memory-Data-amp-Addressing"><a href="#Memory-Data-amp-Addressing" class="headerlink" title="Memory, Data, &amp; Addressing"></a>Memory, Data, &amp; Addressing</h2><p>十进制，2进制，16进制:</p><ul><li>A single byte consists of 8 bits.</li><li>二进制 value ranges from 00000000<sub>2</sub> to 11111111<sub>2</sub>,</li><li>十进制 value ranges from 0<sub>10</sub> to 255<sub>10</sub></li><li>二进制表示法过于冗长，而使用十进制表示法，与bits进行模式转换非常繁琐。</li><li>十六进制，hexadecimal numbers: Hexadecimal (or simply “hex”) uses digits ‘0’ through ‘9’ along with characters ‘A’ through ‘F’ to represent 16 possible values. Values range from 00<sub>16</sub> to FF<sub>16</sub>.</li></ul><p>内存：</p><ul><li>A machine-level program views memory as a very large array of bytes, referred to as virtual memory.</li><li>Every byte of memory is identified by a unique number, known as its address.</li><li>The set of all possible addresses is known as the virtual address space - 进程可用的虚拟地址范围称为该进程的“虚拟地址空间”。</li></ul><p>这个虚拟地址空间只是一个呈现给机器级程序的虚拟概念。实际的实现需要用到随机访问存储器（RAM），磁盘存储，特殊的硬件和操作系统软件的组合来构建相对于程序而言的单片字节数组。</p><h3 id="Address-and-Pointers"><a href="#Address-and-Pointers" class="headerlink" title="Address and Pointers"></a>Address and Pointers</h3><p>地址是内存的位置，指针是一种包含地址的数据对象。</p><p>Byte ordering: Endianness</p><ul><li><strong>little endian</strong> - where the least significant byte comes first, followed by most Intel-compatible machines.</li><li><strong>big endian</strong> - where the most significant byte comes first, followed by most machines from IBM and Sun Microsystems</li><li>Many recent microprocessors are bi-endian, meaning that they can be configured to operate as either little- or big-endian machines.</li></ul><h3 id="Integer-and-floating-point-numbers"><a href="#Integer-and-floating-point-numbers" class="headerlink" title="Integer and floating point numbers"></a>Integer and floating point numbers</h3><p>把多个bits组合起来，通过解码，可以表达有限集合内的所有元素。比如二进制数字系统可以表示正整数。</p><p>Three most important representations of numbers.</p><ol><li>Unsigned encodings：based on traditional binary notation, representing numbers greater than or equal to 0.</li><li>Two’s-complement encodings: the most common way to represent signed integers, that is, numbers that may be either positive or negative.</li><li>Floating-point encodings: base-two version of scientific notation for<br>representing real numbers.</li></ol><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li><p>Naming data types with <code>typedef</code>: C的<code>typedef</code>声明用于给数据类型命名。这对提高代码可读性有很大的帮助，因为深层嵌套类型声明可能难以解读。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> *int_pointer;</span><br><span class="line">int_pointer ip;</span><br></pre></td></tr></table></figure><p>  等同于<code>int *ip;</code></p></li><li>Formatted printing with <code>printf</code>(<code>fprintf</code> and <code>sprintf</code>): provides a way to print information<br>with considerable control over the formatting details.<ul><li>The first argument is a format string. Each character sequence starting with ‘%’ indicates how to format the next argument. <code>%d</code> - 输出十进制整数, <code>%f</code> - 浮点数, <code>%c</code> - 字符</li><li>while any remaining arguments are values to be printed.</li></ul></li><li><code>sizeof(T)</code> returns the number of bytes required to store an object of type T</li><li><code>void *malloc(size_t size)</code>分配请求的内存(size in bytes)并返回一个指向它的指针(如果请求失败，则返回<code>NULL</code>)。</li></ul><h3 id="Addresses-and-pointer-in-C"><a href="#Addresses-and-pointer-in-C" class="headerlink" title="Addresses and pointer in C"></a>Addresses and pointer in C</h3><p>指针是C的核心功能，可以引用数据结构元素（包括数组）。就像变量一样，指针有两个组成部分：值和类型。该值指示某个对象的位置，而其类型指示该位置处存储什么类型的对象（例如，整数或浮点数）。</p><ul><li><code>&amp;</code> - “address of”, return a pointer;</li><li>Variable declarations： <code>int x</code>, find location in memory in which to store integer.</li><li>Pointer declarations use <code>*</code>: <code>int *pointer</code>, declares a variable <code>pointer</code> that is a pointer pointing to an object of type integer.</li><li>Assignment to a pointer: <code>pointer = &amp;x</code>, assigns <code>pointer</code> to point to the address where <code>x</code> is stored.</li><li>To use the value pointed to by a pointer, use <code>*</code>:<ul><li>if <code>pointer = &amp;x</code>, then <code>x = *pointer +1</code> is the same as <code>x = x + 1</code></li><li>假如x是一个对象, 那么<code>*(&amp;x)</code>=<code>*&amp;x</code> = <code>x</code></li></ul></li></ul><h3 id="Pointers-and-arrays"><a href="#Pointers-and-arrays" class="headerlink" title="Pointers and arrays"></a>Pointers and arrays</h3><p>C通过数组将标量数据聚合为更大的数据类型。In C, we can dereference a pointer with array notation, and we can reference array elements with pointer notation.<br>C有一个不常见的特性, 就是我们可以生成指向数组内的元素的指针，并使用这些指针来执行算术运算。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T A[N];</span><br></pre></td></tr></table></figure></p><p>首先，它在内存中分配一个L*N大小的连续区域, 其中L是数据类型T的大小（以bytes为单位）. 数组的元素可以使用 0 ~ N-1 之间的整数索引来访问 <code>A[i]</code>;</p><p>其次，它引入了一个标识符A，可以作为指向数组开头的指针;</p><p>在指针上进行算术运算时，其实际的索引值会根据指针引用的数据类型的大小进行缩放,  即假设A的值是xa, 那么<code>A+i</code>的值就是<code>xa + L * i</code>, <code>A[i]</code> = <code>*(A+i)</code>;</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>#define</code> 指令允许在源代码中定义宏 macro。这些宏定义允许在整个代码中声明常量值。 宏定义不是变量，不能像变量那样通过程序代码进行更改。创建表示数字，字符串或表达式的常量时，通常使用此语法。</p><p>定义常数：<code>#define CNAME value</code> or <code>#define CNAME (expression)</code>。<code>CNAME</code>是常数的名称。大多数C程序员用大写字母来定义常量名，但这不是C语言的要求。<code>expression</code>就是被分配给常量的表达式。如果表达式包含运算符，则该表达式必须括在括号内。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CSAPP 非常巧妙的把程序设计及优化、数字电路基础、指令集体系、汇编语言、存储器体系结构、链接与装载、进程、虚存等来自不同学科的核心知识点和在一起，并以程序员的视角呈现; 告诉我们作为一个程序员，究竟需要对计算机的硬件了解到什么程度？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本笔记是 CMU CSAPP 的学习笔记, 使用 CMU 15-213, UW CSE351 的课程视频, lab, 作业, project 辅助练习.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Computer Systems: A Programmer’s Perspective (csapp)&lt;/a&gt;, 豆瓣-&lt;a href=&quot;https://book.douban.com/subject/26912767/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解计算机系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~213/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;卡内基梅隆大学 CMU 15-213 Introduction to Computer Systems (ICS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://courses.cs.washington.edu/courses/cse351/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;华盛顿大学 UW CSE351: The Hardware/Software Interface&lt;/a&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="CS" scheme="http://shukebeta.me/tags/CS/"/>
    
      <category term="csapp" scheme="http://shukebeta.me/tags/csapp/"/>
    
      <category term="C" scheme="http://shukebeta.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 10 LinkedList 还是 ArrayList - CS61B Berkeley - Josh Hug</title>
    <link href="http://shukebeta.me/NOTE-data-structures-CS61B-10-java-which-list/"/>
    <id>http://shukebeta.me/NOTE-data-structures-CS61B-10-java-which-list/</id>
    <published>2018-01-28T00:00:00.000Z</published>
    <updated>2018-06-29T19:35:09.766Z</updated>
    
    <content type="html"><![CDATA[<p>Java 提供了 <code>ArrayList</code>, <code>ArrayDeque</code> 和 <code>LinkedList</code> 几个API.</p><p>队列 queue, 通俗的含义, 就是不能插队, 只能在末尾插入.</p><blockquote><p>双端队列 Double Ended Queue (Deque) 是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩<br>–<a href="http://www.cplusplus.com/reference/deque/deque/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/deque/deque/</a></p></blockquote><p>CS61b的<a href="http://sp18.datastructur.es/materials/proj/proj1a/proj1a" target="_blank" rel="noopener">project 1a</a>需要实现两种双端队列（array based 和 linkedklist based）.</p><p>不同的API, 在考虑什么时候应该用哪个时, 我们需要考虑它们的性能差异:</p><ul><li><strong>搜索/定位</strong>：与<code>LinkedList</code>相比，<code>ArrayList</code>搜索更快。 <code>ArrayList</code>的<code>get(int index)</code>性能是<code>O(1)</code>的，而LinkedList的性能是<code>O(n)</code>。因为<code>ArrayList</code>基于<code>array</code>数据结构，可以直接用 array index 定位元素。</li><li><strong>删除/插入</strong>：<code>LinkedList</code> 操作性能是<code>O(1)</code>，而<code>ArrayList</code>的性能从<code>O(n)</code>（删除/插入第一个元素）到<code>O(n)</code>（最后一个元素）都有可能。因为<code>LinkedList</code>的每个元素都包含两个指向其相邻前后元素的指针（地址），因此仅需要改变，被删节点的<code>prev</code>和<code>next</code>指针位置。而在<code>ArrayList</code>中，需要移动剩余元素，来重新填充<code>array</code>空间。</li><li><strong>内存开销</strong>：<code>LinkedList</code>的每个元素都有更多的内存开销(额外的指针), 而<code>ArrayLists</code>没有这个开销。但是，<code>ArrayLists</code>需要占用初始容量。一般<code>ArrayList</code>的默认初始容量非常小（Java 1.4 - 1.8使用10）。但是，往<code>ArrayLists</code>添加元素时， 它可能会适当地增大容量，所以如果添加了很多元素，则必须不断调整数组的大小，那样也可能会导致元素频繁挪动位置。</li></ul><p>综上所述：</p><ol><li>如果在应用中需要<strong>频繁插入和删除</strong>，那么选择<code>LinkedList</code>。</li><li>假如一开始，就知道后面要添加大量元素，那就使用较高的初始容量来构造<code>ArrayList</code>。</li><li>大部分用例中, 相比LinkedList, 人们更偏爱ArrayList以及ArrayDeque。如果你不确定应该选哪个, 那么就直接考虑ArrayList吧(参考 <a href="https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist)" target="_blank" rel="noopener">https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist)</a>.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 提供了 &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;ArrayDeque&lt;/code&gt; 和 &lt;code&gt;LinkedList&lt;/code&gt; 几个API.&lt;/p&gt;
&lt;p&gt;队列 queue, 通俗的含义, 就是不能插队, 只能在末尾插入.&lt;/p&gt;
&lt;b
      
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 09 双向链表 Doubly Linked List - CS61B Berkeley - Josh Hug</title>
    <link href="http://shukebeta.me/NOTE-data-structures-CS61B-09-java-doubly-linked-list/"/>
    <id>http://shukebeta.me/NOTE-data-structures-CS61B-09-java-doubly-linked-list/</id>
    <published>2018-01-13T00:00:00.000Z</published>
    <updated>2018-06-29T19:35:13.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>Doubly Linked List</p><p>前面介绍过的单向链表有几个缺点. 第一个就是它的<code>addLast</code>操作非常慢。单向链表只有一个变量保存列表头的地址, 以及每个节点对后面节点的单向引用(链接). 对于很长的列表，<code>addLast</code>方法必须遍历整个列表, 直到找到列表末尾才能执行插入操作.<br><a id="more"></a><br>最直观的优化方案就是加个’车尾’<img src="/images/sllist_last_pointer.png" alt="" title="image from: https://joshhug.gitbooks.io/"> 这样我们就可以直接通过<code>last.next</code>引用末尾位置.</p><p>不过另一个问题并没有解决, 就是删除列表最后一项<code>removeLast</code>这个操作还是很慢。因为在目前的结构设计下, 我们需要先找到倒数第二项，然后将其下一个指针设置为<code>null</code>。而要找到倒数第二节点, 我们就得先找到倒数第三个节点…… 以此类推。也就是说，对于删除末尾的操作，还是要几乎遍历整个列表。</p><h3 id="反方向的链接"><a href="#反方向的链接" class="headerlink" title="反方向的链接"></a>反方向的链接</h3><p>基于前面单向链表构建双向链表, 一个比较有效的方法是额外为每个节点添加一个指向前面节点的链接 - 指针.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> OneNode prev; <span class="comment">//指向前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> OneNode next; <span class="comment">//指向后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>增加这些额外的指针会导致额外的代码复杂度, 以及额外的内存开销, 这就是追求时间效率的代价.</p><h3 id="Sentinel-与尾节点"><a href="#Sentinel-与尾节点" class="headerlink" title="Sentinel 与尾节点"></a>Sentinel 与尾节点</h3><p>双向链表的一个设计初衷，就是为了解决单向链表针对列表末尾位置的操作效率不高的问题，除了sentinel和反方向的链接还不够，我们还需要一个节点（指针）能够直接帮我们定位到列表末端。可以考虑添加一个的尾节点<code>last</code><img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_basic_size_0.png" alt="" title="image from: https://joshhug.gitbooks.io/"> <img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_basic_size_2.png" alt="" title="image from: https://joshhug.gitbooks.io/"> 这样的列表就可以支持<code>O(1)</code>复杂度的<code>addLast</code>,<code>getLast</code> 和 <code>removeLast</code>操作了。</p><h2 id="循环双端队列"><a href="#循环双端队列" class="headerlink" title="循环双端队列"></a>循环双端队列</h2><p>Circular double ended queue</p><p>上面的尾节点设计虽然没什么错误，但有点瑕疵：最后一个尾节点指针有时指向前哨节点，有时指向一个真正的节点。更好的方法是使双向链表首尾相连, 构成一个循环，即前后节点共享唯一的一个前哨节点。<img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_circular_sentinel_size_0.png" alt="" title="image from: https://joshhug.gitbooks.io/"> <img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_circular_sentinel_size_2.png" alt="fig source https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_circular_sentinel_size_2.png" title="image from: https://joshhug.gitbooks.io/"><br>这样的设计相对更整洁，更美观(主观上的), sentinel的<code>prev</code>就指向列表最后一个节点, sentinel的<code>next</code>指向列表第一个节点.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDeque</span>&lt;<span class="title">GType</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> OneNode prev;</span><br><span class="line">        <span class="keyword">public</span> GType item;</span><br><span class="line">        <span class="keyword">public</span> OneNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OneNode</span><span class="params">(OneNode p, GType i, OneNode n)</span> </span>&#123;</span><br><span class="line">            prev = p;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Sentinel’s forward link always points to the last element.<br>Sentinel’s backward link always points to the first element.</p><p>然后修改构造函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Creates an empty deque. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedListDeque</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>,<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sentinel.prev = sentinel;</span><br><span class="line">    sentinel.next = sentinel;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Creates a deque with x  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedListDeque</span><span class="params">(GType x)</span></span>&#123;</span><br><span class="line">    sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sentinel.next = <span class="keyword">new</span> OneNode(sentinel, x, sentinel);</span><br><span class="line">    sentinel.prev = sentinel.next;</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果初始化的是空列表, 其实就是一个自己指向自己的<code>sentinel</code>节点. 如果是非空列表, 那么<code>sentinel</code>节点和真实的节点就构成了一个最简单的二元循环体.</p><h3 id="针对列表末尾位置的操作"><a href="#针对列表末尾位置的操作" class="headerlink" title="针对列表末尾位置的操作"></a>针对列表末尾位置的操作</h3><p>双端链表结构优雅，虽然某些操作如<code>addFirst</code>等编码复杂度会提高, 但不影响速度. 更重要的是, 相比单向链表, 它反而使得<code>addLast, moveLast</code>等方法的代码实现变得简单了, 而且还进一步提升了运行速度(<code>从O(n)到O(c)</code>).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Adds an item to the back of the Deque - O(c) */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(GType x)</span></span>&#123;</span><br><span class="line">    OneNode oldBackNode = sentinel.prev;</span><br><span class="line">    OneNode newNode = <span class="keyword">new</span> OneNode(oldBackNode, x, sentinel);</span><br><span class="line">    sentinel.prev = newNode;</span><br><span class="line">    oldBackNode.next = newNode;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes and returns the item at the front of the Deque.</span></span><br><span class="line"><span class="comment"> * If no such item exists, returns null.O(c). */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GType <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    OneNode oldFrontNode = sentinel.next;</span><br><span class="line">    sentinel.next = oldFrontNode.next;</span><br><span class="line">    oldFrontNode.next.prev = sentinel;</span><br><span class="line">    size -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> oldFrontNode.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h2&gt;&lt;p&gt;Doubly Linked List&lt;/p&gt;
&lt;p&gt;前面介绍过的单向链表有几个缺点. 第一个就是它的&lt;code&gt;addLast&lt;/code&gt;操作非常慢。单向链表只有一个变量保存列表头的地址, 以及每个节点对后面节点的单向引用(链接). 对于很长的列表，&lt;code&gt;addLast&lt;/code&gt;方法必须遍历整个列表, 直到找到列表末尾才能执行插入操作.&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 08 单向链表 Singly Linked List - CS61B Berkeley - Josh Hug</title>
    <link href="http://shukebeta.me/NOTE-data-structures-CS61B-08-java-singly-linked-list/"/>
    <id>http://shukebeta.me/NOTE-data-structures-CS61B-08-java-singly-linked-list/</id>
    <published>2018-01-12T00:00:00.000Z</published>
    <updated>2018-06-29T19:35:17.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>Linked List</p><p>前面有介绍以array为基础搭建的列表，支持自动扩容, 各种插入，删除速度都很快. 这里再介绍另一种方案, 链表, 也可以实现列表自动扩容.</p><h3 id="带链接的节点"><a href="#带链接的节点" class="headerlink" title="带链接的节点"></a>带链接的节点</h3><p>链表的核心组成是带链接的节点, 每个节点就像火车车厢, 有钩子连接下一节车厢.<img src="/images/408px-Singly-linked-list.png" alt=""><br><a id="more"></a><br>以int节点为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">        item = i;</span><br><span class="line">        next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>next</code>就是这个链接, 每一个节点就是其上一个节点的<code>next</code>.</p><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p>Nested static class</p><p>这个节点作为一个相对独立的数据结构, 我们更希望让他单独作为一个类来维护. 再另外创建一个名为<code>LinkedList</code>的class与用户进行交互. 这样还有另一个好处就是提供一个命名为<code>LinkedList</code>的类给用户交互，用户更直观地知道自己是在调用链表。如果直接与node类交互，用户可能会困扰. 但同时考虑到这个node类只有<code>LinkedList</code>会调用，所以我们可以把node类嵌套进<code>LinkedList</code>中，也就是嵌套类，在类中定义类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">XXX</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> XXX item;</span><br><span class="line">        <span class="keyword">public</span> OneNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OneNode</span><span class="params">(XXX i, OneNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OneNode first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> OneNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面是各种方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上定义使用了<a href="/NOTE-CS61B-data-structures-05-java-variable-types#通用数据类型">泛型</a>。声明<code>OneNode</code>实例<code>first</code>为私有变量, 是为了防止用户错误地摆弄链接指向，<code>private</code>和<code>public</code>的使用<a href="/NOTE-CS61B-data-structures-07-java-array-based-list#公共与私有">参考</a>.</p><h4 id="静态与非静态嵌套类"><a href="#静态与非静态嵌套类" class="headerlink" title="静态与非静态嵌套类"></a>静态与非静态嵌套类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果嵌套类不需要使用外部类的任何实例方法或变量，那可以声明嵌套类为static。像静态类方法一样， <strong>静态</strong>嵌套类不能直接引用其外部类中定义的<strong>实例</strong>变量或方法。外部类不能直接访问静态嵌套类的成员变量，要通过静态嵌套类来访问。</p><p><strong>非静态</strong>嵌套类一般叫做内部类 inner class，可以直接访问外部类的方法和变量。一个内部类的实例作为成员存在于其外部类的实例中。因为内部类与一个实例相关联，所以它不能自己定义任何静态成员。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> outVar;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> inVar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Outer O = <span class="keyword">new</span> Outer();</span><br><span class="line">    Outer.Inner I = O.new Inner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作为OuterClass的成员，嵌套类可以声明为private，public，protected或package private。外部类只能声明为public或package private。更多详情<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" target="_blank" rel="noopener">参考官网</a>.</p><h3 id="补充必要的实例方法"><a href="#补充必要的实例方法" class="headerlink" title="补充必要的实例方法"></a>补充必要的实例方法</h3><p>插入的操作核心是改变链接指向， 比如原来是<code>A-&gt;B-&gt;D</code>, 要插入C, 则把<code>C.next</code>指向D,然后把<code>B.next</code>改为指向C, 变为<code>A-&gt;B-&gt;C-&gt;D</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">XXX</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OneNode first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(XXX x)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="comment">/** 在列表开头插入 x. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> OneNode(x, first);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 返回列表第一个元素. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XXX <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在列表末尾插入 x. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        OneNode p = first;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把 p 当做指针顺藤摸瓜一直挪到列表末尾. */</span></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.next = <span class="keyword">new</span> OneNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 删除列表末尾的元素. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//自行补充...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，如果用户不小心把某节点x指回自己<code>x.next=x</code>,那就会进入死循环，所以我们需要把<code>OnoNode</code>实例<code>first</code>声明为私有变量已提供必要的保护。</p><h3 id="超载"><a href="#超载" class="headerlink" title="超载"></a>超载</h3><p>Overloading</p><p>如果想初始化一个空列表, 可以:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 构造一个空列表. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fist = <span class="keyword">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即使原来已经有一个带参数x的构造器了, 这里再加一个同名构造器也没问题. 因为Java允许有不同参数的方法重名, 即超载 overloading.</p><h3 id="程序不变条件"><a href="#程序不变条件" class="headerlink" title="程序不变条件"></a>程序不变条件</h3><p>Invariants</p><p>上面超载了一个初始化空列表的构造器, 加入初始化一个空列表，然后直接调用<code>addLast</code>，程序会报错, 因为<code>null</code>没有<code>next</code>.</p><p>有几种修改方法, 比如用<code>if else</code>这种加特例的方法. 这个方案虽然可以能解决问题，但是应尽量避免加入特例代码。毕竟有特例就意味着增加了复杂度和额外的代码特例记忆需求, 而人记忆是有限的.</p><p>一个更简洁（尽管不太显而易见）的解决方案是修改数据结构本身，让所有<code>LinkedList</code>，维护起来都没有差别，即使是空的。如果把列表比做拉货的火车，那么货物就是列表承载的数据。一列火车如果只有车厢而没有车头（或者车尾）的话是没有意义的，因为没有动力。所以不管火车有没有拉货，有车厢还是没车厢，要称之为火车我们至少需要一个火车头，通过创建一个特殊节点 - 前哨节点 sentinel。前哨节点将保存一个值，具体数值我们不关心，它只是作为火车头，不装货。<img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig22/three_item_sentenlized_SLList.png" alt="" title="image from: https://joshhug.gitbooks.io/"><br>所以我们要修改<code>LinkedList</code>为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一个元素 （假如有的话）就是 sentinel.next. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">XXX</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OneNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造一个空列表. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造一个初始元素为x的列表. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> OneNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于像<code>LinkedList</code>这样简单的数据结构来说，特例不多，我们也许可以hold住, 一旦后续遇到像树tree等更复杂的数据结构，控制特例数量就显得极为重要了。所以现在就要培养自己的这方面的习惯，保持程序不变条件成立。所谓 invariants 就是指数据结构任何情况下都是不会出错（除非程序有bug）.</p><p>具有前哨节点的<code>LinkedList</code>至少具有以下 invariants：</p><ul><li>列表默认存在前哨节点。</li><li>列表第一个元素（如果非空的话）总是在<code>sentinel.next.item</code>。</li><li>size变量始终是已添加的元素总数。</li></ul><p>不变条件使得代码的推敲变得更加容易，同时给程序员提供了能够确保代码正常工作的具体目标。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;Linked List&lt;/p&gt;
&lt;p&gt;前面有介绍以array为基础搭建的列表，支持自动扩容, 各种插入，删除速度都很快. 这里再介绍另一种方案, 链表, 也可以实现列表自动扩容.&lt;/p&gt;
&lt;h3 id=&quot;带链接的节点&quot;&gt;&lt;a href=&quot;#带链接的节点&quot; class=&quot;headerlink&quot; title=&quot;带链接的节点&quot;&gt;&lt;/a&gt;带链接的节点&lt;/h3&gt;&lt;p&gt;链表的核心组成是带链接的节点, 每个节点就像火车车厢, 有钩子连接下一节车厢.&lt;img src=&quot;/images/408px-Singly-linked-list.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://shukebeta.me/categories/CS/"/>
    
    
      <category term="Java" scheme="http://shukebeta.me/tags/Java/"/>
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
      <category term="cs61b" scheme="http://shukebeta.me/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>Git Bash 直接启动 sublime 或 atom 等编辑器以打开或新建文件</title>
    <link href="http://shukebeta.me/Launch-editor-in-Gitbash/"/>
    <id>http://shukebeta.me/Launch-editor-in-Gitbash/</id>
    <published>2018-01-01T00:00:00.000Z</published>
    <updated>2018-06-29T19:11:17.502Z</updated>
    
    <content type="html"><![CDATA[<p>程序员或者其他需要码字多的人，经常要使用编辑器如sublime、atom 和 Typora等。如果每次都要用鼠标点击才能用sublime打开文件，或者在编辑器中新建文件，那么就会有点麻烦！但你可以用一句命令解决！</p><p>配置在Git Bash中用各种文本编辑器打开文件或者直接新建文件。这里以atom为例。</p><h2 id="常规步骤"><a href="#常规步骤" class="headerlink" title="常规步骤"></a>常规步骤</h2><ol><li>打开Git Bash并<code>cd</code>到你的目标文件夹, 或者直接在目标文件中右键打开Git Bash.</li><li><code>atom xxx.md</code> 就会在弹出的atom窗口中打开名为<code>xxx.md</code>的markdown文件, 如果没有这个文件, 会自动创建一个.</li><li>适用于其他类型文件, 如<code>.java</code>等.</li><li>如果想用sublime, 可以用<code>subl xxx.java</code>, 同理notepad++ 可以用 <code>notepad++ xxx.java</code>等。 (若出现错误,看下面)</li></ol><h2 id="若系统无法识别命令"><a href="#若系统无法识别命令" class="headerlink" title="若系统无法识别命令"></a>若系统无法识别命令</h2><p>一般使用sublime或者notepad++的用户, 可能会出现<code>error: 系统无法识别命令...</code>之类的, 可以这么解决:</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>新建一个文件命名为<code>subl</code>（注意不能有后缀名），内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">&quot;D:\Sublime Text 3\sublime_text.exe&quot; $1 &amp;</span><br></pre></td></tr></table></figure></p><p>第一行指明这是个 shell 脚本.<br>第二行的字符串是sublime的安装目录, 示例只是我电脑的目录, 注意这里要改为你自己的目录,<br>第二行的$1 是取的命令之后输入的参数<br>第二行的&amp;是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash</p><p>文件保存到 <code>C:\Program Files (x86)\Git\mingW32\bin</code> 目录下(你的git目录可能与我的不一样，注意改成你自己的)</p><p>同理适用于其他编辑器，比如用<code>chrome</code>打开<code>.html</code>文件等。如果不想每次都新建一个文件，可以用下面的方法2。</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><ol><li>找到 <code>C:\Users\你的计算机名</code>目录，如果你的计算机名是Administrator，那么你就要去<code>C:\Users\Administrator</code>目录下, 这里一般存放着windows系统的<code>我的文档, 桌面</code>等文件夹.</li><li>在该目录下用Git Bash输入<code>notepad .bashrc</code>, 这会用windows记事本新建并打开一个文件<code>.bashrc</code>，这个文件没有名称只有后缀名。<code>.bashrc</code>里面可以给Git Bash设置命令的别名, 设置路径等。</li><li>在.bashrc文件加入下面一行文本<code>alias notepad++=&quot;/D/Notepad++/notepad++.exe&quot;</code>, 这里你需要修改为你电脑的安装路径。<code>alias</code>就是别名的意思，当我们执行<code>notepad++</code>的时候，实际执行的是<code>=</code>后面的语句.</li><li>重新打开Git Bash, 设置才能生效，如果不想关掉在打开的话，可以直接在bash下输入<code>source ~/.bashrc</code>就可以立刻加载修改后的设置，设置立即生效。<br>现在在bash下输入<code>notepad++ test.py</code>, 就直接打开了notepad++并创建了这个叫test的Python文件。这里的别名不一定非要取<code>notepad++</code>，随你想叫什么都行。</li></ol><p>同理也可以扩展到别的文本编辑器，<code>alias atom=&quot;atom的路径&quot;</code>, <code>alias sublime=&quot;sublime的路径&quot;</code>等. 最后还要注意一点，上面所说的路径最好不要有空格，括号等，否则会造成命令无效.</p><p><code>.bashrc</code>还有很多有用的配置,可以根据需要进行扩展. 比如很多程序猿会选择修改删除命令<code>rm</code>(此命令不加任何参数的话，会直接删除文件, 可能会造成误删的后果)。这个时候可以给rm加个参数-i，意为在删除的时候给出提示。在文件<code>.bashrc</code>里添加这行代码<code>alias rm=&quot;rm -i&quot;</code>。但这里不建议这么做，因为<code>rm=&quot;rm -i&quot;</code>是一个定时炸弹，在使用它之后，习惯了之后, 你会本能地期望<code>rm</code>在删除文件之前会提示你。但是，总有一天你可能会用一个没有rm alias 别名的系统, 这时若你也直接随手一甩<code>rm</code>, 本以为会有提示, 结果发现数据真的被删除了。</p><p>在任何情况下，预防文件丢失或损坏的好方法就是进行备份。</p><p>所以如果你想个性化删除命令, 最好不要动<code>rm</code>，而是创建属于你的命令，比如<code>trash, myrm, delete</code>等, 用<code>alias trash=&#39;/bin/rm -irv&#39;</code>会创建一条把文件放入垃圾回收站的命令.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序员或者其他需要码字多的人，经常要使用编辑器如sublime、atom 和 Typora等。如果每次都要用鼠标点击才能用sublime打开文件，或者在编辑器中新建文件，那么就会有点麻烦！但你可以用一句命令解决！&lt;/p&gt;
&lt;p&gt;配置在Git Bash中用各种文本编辑器打开文
      
    
    </summary>
    
      <category term="Productivity" scheme="http://shukebeta.me/categories/Productivity/"/>
    
    
      <category term="Software Engineer" scheme="http://shukebeta.me/tags/Software-Engineer/"/>
    
  </entry>
  
</feed>
