<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Computer Science &amp; AI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-11T09:53:48.031Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Parallel Programming Language and Systems - Informatics - University of Edinburgh 爱丁堡</title>
    <link href="http://yoursite.com/ppls/"/>
    <id>http://yoursite.com/ppls/</id>
    <published>2018-05-10T23:00:00.000Z</published>
    <updated>2018-05-11T09:53:48.031Z</updated>
    
    <content type="html"><![CDATA[<p>并行编程语言和系统 - 知识点汇总<br>参考<br><a href="http://www.inf.ed.ac.uk/teaching/courses/ppls/" target="_blank" rel="noopener">http://www.inf.ed.ac.uk/teaching/courses/ppls/</a><br><a href="http://www.cs.cmu.edu/~213/" target="_blank" rel="noopener">CMU 15213: Introduction to Computer Systems (ICS)</a><br><a href="http://csapp.cs.cmu.edu/" target="_blank" rel="noopener">Computer Systems: A Programmer’s Perspective</a><br><a id="more"></a></p><h2 id="Introduction-to-parallel-computer-architecture"><a href="#Introduction-to-parallel-computer-architecture" class="headerlink" title="Introduction to parallel computer architecture"></a>Introduction to parallel computer architecture</h2><p>Covering some of the nasty issues presented by the shared memory model, including weak consistency models and false sharing in the cache, and some architectural issues for the multicomputer model.</p><p>Bridging the gap between the parallel applications and algorithms which we can design and describe in abstract terms and the parallel computer architectures (and their lowest level programming interfaces) which it is practical to construct.</p><p>The ability to express parallelism (a.k.a concurrency) concisely, correctly and efficiently is important in several contexts:<br>• Performance Computing: parallelism is the means by which the execution time of computationally demanding applications can be reduced. In the era of static (or even falling) clock speeds and increasing core count, this class is entering the computing mainstream.<br>• Distributed Computing: when concurrency is inherent in the nature of the system and we have no choice but to express and control it.<br>• Systems Programming: when it is conceptually simpler to think of a system as being composed of concurrent components, even though these will actually be executed by time-sharing a single processor.</p><h2 id="Parallel-Architecture"><a href="#Parallel-Architecture" class="headerlink" title="Parallel Architecture"></a>Parallel Architecture</h2><p>Two types (mainstream):</p><ul><li>Shared Memory architectures: in which all processors can physically address the whole memory, usually with support for cache coherency (for example, a quad or oct core chip, or more expensive machines with tens or hundreds of cores)</li><li>Multicomputer architectures: in which processors can only physically address their “own” memory (for example, a networked cluster of PCs), which interact with messages across the network.</li></ul><p>Increasingly, systems will span both classes (e.g. cluster of manycore, or network-onchip manycores like the Intel SCC), and incorporate other specialized, constrained parallel hardware such as GPUs.</p><p>Real parallel machines are complex, with unforseen semantic and performance traps. We need to provide programming tools which simplify things, but without sacrificing too much performance.</p><h3 id="Shared-Memory-Architectures"><a href="#Shared-Memory-Architectures" class="headerlink" title="Shared Memory Architectures"></a>Shared Memory Architectures</h3><p>Uniform Memory Access (UMA) architectures have all memory “equidistant” from all CPUs.<br>For NUMA performance varies with data location. NUMA is also confusingly called Distributed Shared Memory as memory is physically distributed but logically shared.<br><img src="/images/Shared_Memory_Architectures.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"></p><p>Memory consistency challenge: when, and in what order should one processor public updates to the shared memory? Exactly what and when it is permissible for each processor to see is defined by the <strong>Consistency Model</strong>, which is effectively a contract between hardware and software, must be respected by application programmers (and compiler/library writers) to ensure program correctness.</p><p>Different consistency models trade off conceptual <strong>simplicity against cost</strong> (time/hardware complexity):</p><ul><li><strong>Sequential consistency</strong>: every processor “sees” the same sequential interleaving of the basic reads and writes. This is very intuitive, but expensive to implement.</li><li><strong>Release consistency</strong>: writes are only guaranteed to be visible after program specified synchronization points (triggered by special machine instructions). This is less intuitive, but allows faster implementations.</li></ul><p>Shared memory architectures also raise tricky performance issues: The unit of transfer between memory and cache is a cache-line or block, containing several words. <strong>False sharing</strong> occurs when two logically unconnected variables share the same cache-line. Updates to one cause remote copies of the line, including the other variable, to be invalidated.</p><h3 id="Multicomputer-architectures"><a href="#Multicomputer-architectures" class="headerlink" title="Multicomputer architectures"></a>Multicomputer architectures</h3><p>Lack of any hardware integration between cache/memory system and the interconnect. Each processor only accesses its <strong>own physical address space</strong>, so no consistency issues. Information is shared by explicit, co-operative message passing<br><img src="/images/Multicomputer_Architectures.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"><br>Performance/correctness issues include the semantics of <strong>synchronization</strong> and constraints on <strong>message ordering</strong>.</p><h2 id="Parallel-Applications-and-Algorithms"><a href="#Parallel-Applications-and-Algorithms" class="headerlink" title="Parallel Applications and Algorithms"></a>Parallel Applications and Algorithms</h2><p>Local and global synchronization, conditional synchronization, synchronous and asynchronous message exchange.</p><p>Three well-known parallel patterns: <strong>Bag of Tasks, Pipeline and Interacting Peers</strong>.</p><p>Here using the <code>co</code>, <code>&lt; &gt;</code>, <code>await</code> notation.</p><p>在<code>co oc</code>内的代码, 顺序是任意的.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这里暂时用 // 表示并行的代码</span><br><span class="line">co</span><br><span class="line">    a=1; // a=2; // a=3; ## all happen at the same time, What is a in the end?</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></p><p>To answer the above question, we need to define <strong>Atomic Actions</strong>: Reads and writes of single variables as being atomic. For more than one statements, if they appear to execute as a single indivisible step with no visible intermediate states, they are atomic, must be enclosed in <code>&lt; &gt;</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=0;</span><br><span class="line">co</span><br><span class="line">    a=1; // a=2; // b=a+a; ## what is b?</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></p><p>The above code has no <code>&lt; &gt;</code>, each value accessed in an expression is a read. Each assignment is <code>a</code> write. Thus, <code>b</code> could be 0, 1, 2, 3, or 4.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=0;</span><br><span class="line">co</span><br><span class="line">    a=1; // a=2; // &lt;b=a+a;&gt;</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></p><p>Now the only outcomes for b are 0, 2 or 4.</p><p><strong>Sequential memory consistency (SC)</strong><br>To make agreement on such inconsistency, we define the sequential memory consistency (SC), to be consistent with the following rules:</p><ol><li>ordering of atomic actions (particularly reads and writes to memory) from any one thread have to occur in normal program order</li><li>atomic actions from different threads are interleaved arbitrarily (ie in an unpredictable sequential order, subject only to rule 1)</li></ol><p><strong>It doesn’t mean that SC programs have to be executed sequentially</strong>!<br>It only means that the results we get must be the same as if the program had been executed in this way.</p><p><strong>Await</strong><br>The await notation <code>&lt; await (B) S &gt;</code> allows us to indicate that <code>S</code> must appear to be delayed until <code>B</code> is true, and must be executed within the same atomic action as a successful check of <code>B</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=0; flag=0;</span><br><span class="line">co</span><br><span class="line">&#123;a=25; flag=1;&#125;</span><br><span class="line">//</span><br><span class="line">&lt;await (flag==1) x=a;&gt; ## x = 25</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></p><p>However, it is not guaranteed that, an await statement is executed right after its condition becomes true. If other atomic actions make the condition false again, before the await executes, it will have to wait for another chance.</p><h3 id="The-Bag-of-Tasks"><a href="#The-Bag-of-Tasks" class="headerlink" title="The Bag-of-Tasks"></a>The Bag-of-Tasks</h3><p>Example: Adaptive Quadrature, compute an approximation to the shaded integral by partitioning until the 梯形 trapezoidal approximation is “good enough”, compared with the sum of its two sub-divided trapezoidals’s area.<br><code>area = quad (a, b, f(a), f(b), (f(a)+f(b))*(b-a)/2);</code><br>The recursive calls to <code>quad</code> do not interfere with each other. So we can parallelize the program by changing the calls to<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 简单地并行</span><br><span class="line">co</span><br><span class="line">    larea = quad(left, mid, f(left), f(mid), larea); //</span><br><span class="line">    rarea = quad(mid, right, f(mid), f(right), rarea);</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></p><p>In practice, there is very little work directly involved in each call to <code>quad</code>. The work involved in <strong>creating and scheduling a process or thread is substantial</strong> (much worse than a simple function call), program may be swamped by this overhead.</p><p>Using the Bag of Tasks pattern: a <strong>fixed number of worker processes/threads</strong> maintain and process a dynamic collection of homogeneous “tasks”. Execution of a particular task may lead to the <strong>creation</strong> of more task instances.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Bag of Tasks pattern</span><br><span class="line">co [w = 1 to P] &#123;</span><br><span class="line">    while (all tasks not done) &#123;</span><br><span class="line">        get a task;</span><br><span class="line">        execute the task;</span><br><span class="line">        possibly add new tasks to the bag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1, Shared bag: contains <code>task(a, b, f(a), f(b), area)</code><br>2, Get a task: remove a record from the bag, either:<br>    · adds its local area approximation to the total<br>    · or creates two more tasks for a better approximation (by adding them to the bag).</p><p>Advantage:<br>1, It constraints the number of processes/threads to avoid overhead.<br>2, Useful for independent tasks and to implement recursive parallelism<br>3, <strong>Naturally load-balanced</strong>: each worker will probably complete a different number of tasks, but will do roughly the same amount of work overall.</p><p>Bag of Tasks <strong>Implementation</strong>: The challenge is to make accessing the bag much cheaper than creating a new thread. With a shared address space, a simple implementation would make the bag an atomically accessed shared data structure.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shared int size = 1, idle = 0;</span><br><span class="line">shared double total = 0.0;</span><br><span class="line">bag.insert (a, b, f(a), f(b), approxarea);</span><br><span class="line">co [w = 1 to P] &#123;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        &lt; idle++; &gt;</span><br><span class="line">        &lt; await ( size &gt; 0 || idle == P )             ## 检测 termination</span><br><span class="line">          if (size &gt; 0) &#123;                             ## get a task</span><br><span class="line">              bag.remove (left, right ...); size--; idle--;</span><br><span class="line">          &#125; else break; &gt;                             ## the work is done</span><br><span class="line">        mid = (left + right)/2; ..etc..               ## compute larea, etc</span><br><span class="line">        if (fabs(larea + rarea - lrarea) &gt; EPSILON) &#123; ## create new tasks</span><br><span class="line">            &lt; bag.insert (left, mid, fleft, fmid, larea);</span><br><span class="line">              bag.insert (mid, right, fmid, fright, rarea);</span><br><span class="line">              size = size + 2; &gt;</span><br><span class="line">        &#125; else &lt; total = total + larea + rarea; &gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www2.cs.arizona.edu/~greg/mpdbook/lectures/lec09.html" target="_blank" rel="noopener">Detecting termination</a>: when bag is empty AND all tasks are done; All tasks are done when all workers are waiting to get a new task.</p><p>A more sophisticated implementation (with less contention) might internally have a collection of bags, perhaps one per worker, with task-stealing to distribute the load as necessary.</p><p>With <strong>message passing</strong>, a simple scheme might allocate an explicit “farmer” node to maintain the bag. Again, a more sophisticated implementation could distribute the bag and the farmer, with task-stealing and termination checking via messages.</p><h3 id="Pipeline-Patterns"><a href="#Pipeline-Patterns" class="headerlink" title="Pipeline Patterns."></a>Pipeline Patterns.</h3><p>Example: <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="noopener">The Sieve of Eratosthenes</a> algorithms for finding all prime numbers.</p><p>To find all prime numbers in the range 2 to N. The algorithm write down all integers in the range, then repeatedly remove all multiples of the smallest remaining number. Before each removal phase, the new smallest remaining number is guaranteed to be prime.</p><p>Notice that, it is not necessarily to wait one Sieve completed then start another. As long as one Sieve stage finds out one candidate number could not be divided exactly by the sieve number, it could generate a new stage with this candidate number as Sieve. And different sieve just remove the multiples of its own Sieve number.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># a message-passing style pipeline pseudocode</span><br><span class="line">main() &#123;                                # the generator</span><br><span class="line">    spawn the first sieve process;</span><br><span class="line">    for (i=2; i&lt;=N; i++) &#123;</span><br><span class="line">        send i to first sieve;</span><br><span class="line">    &#125;</span><br><span class="line">    send -1 to first sieve;             # a &quot;stop&quot; signal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sieve() &#123;</span><br><span class="line">    int myprime, candidate;</span><br><span class="line">    receive myprime from predecessor and record it;</span><br><span class="line">    do &#123;</span><br><span class="line">        receive candidate from predecessor;</span><br><span class="line">        if (candidate == -1) &#123;send -1 to successor if it exists&#125;</span><br><span class="line">        else if (myprime doesn&apos;t divide candidate exactly) &#123;</span><br><span class="line">            if (no successor yet) spawn successor sieve process;</span><br><span class="line">            send candidate to successor sieve process;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (candidate != -1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每一个数(2-N)都可能作为筛子, 筛掉能整除这个筛子的其他数，而筛子之间是互相独立的，所以可以以<a href="http://www.informit.com/articles/article.aspx?p=366887&amp;seqNum=8" target="_blank" rel="noopener">流水线模式 pipeline patterns</a>来并行操作，动态生成筛子。最开始最小的数字<code>2</code>会成为筛子。筛子可以理解为不同的工序，其余数字从小到大逐一通过这些工序加工（在 Sieve of Eratosthenes 问题中变为筛选排查），无法被筛子整除的数字会被传递到下个筛子（如果没有下一个筛子，则以这个数字创建新的筛子），这样保证生成的筛子就都是素数了。虽然工序是按顺序过的，但是所有工序可以同时对不同的产品（数字）开工，从而达到并行目的。</p><p>For pipeline patterns, the potential concurrency can be exploited by assigning each operation (stage of the pipeline) to a different worker and having them work simultaneously, with the data elements passing from one worker to the next as operations are completed. Despite the dependencies (order constraints) of the processing steps, the pipeline threads can work in parallel by applying their processing step to different data (products).</p><p>Think of pipeline patterns as the factory assembly line. We need to pick out prime number from a range of numbers N, each number is passed into a sequence of stages, each stages checks a pass in number based on the stages’s Sieve. The numbers that finally pass all stages without being removed is a prime number.</p><p>Pipelines are composed of a sequence of threads, in which each thread’s input is the previous thread’s output, (<strong>Producer-Consumer relationships</strong>).</p><p>The advantages of pipeline patterns is that construction of pipeline stages is dynamic and data-dependent.</p><p>To allow production and consumption to be loosely synchronized, we will need some buffering in the system.</p><p>The programming challenges are to ensure that no producer overwrites a buffer entry before a consumer has used it, and that no consumer tries to consume an entry which doesn’t really exist (or re-use an already consumed entry)</p><h3 id="Interacting-Peers-Pattern"><a href="#Interacting-Peers-Pattern" class="headerlink" title="Interacting Peers Pattern"></a>Interacting Peers Pattern</h3><p>Models of physical phenomena are often expressed as a system of partial differential equations. These can be approximately solved by “finite difference methods” which involve iteration on a matrix of points, in an interacting peers pattern. The “compute” step usually involves only a small number of neighbouring points. The termination test looks for convergence.</p><p>We could use a duplicate grid and <strong>barriers</strong> to enforce correct synchronization between iterations:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">shared real grid[n+2, n+2], newgrid[n+2, n+2];</span><br><span class="line">shared bool converged; local real diff;</span><br><span class="line">co [i = 1 to n, j = 1 to n] &#123;</span><br><span class="line">    initialise grid;</span><br><span class="line">    do &#123;</span><br><span class="line">        barrier();                                  ## before resetting test</span><br><span class="line">        converged = true;                           ## provisionally</span><br><span class="line">        newgrid[i,j] = (grid[i-1,j] + grid[i+1,j] +</span><br><span class="line">            grid[i,j-1] + grid[i,j+1])/4;           ## compute new value</span><br><span class="line">        diff = abs (newgrid[i,j] - grid[i,j]);      ## compute local change</span><br><span class="line">        barrier();                                  ## before converged update</span><br><span class="line">        if (diff &gt; EPSILON) converged = false;      ## any one will do</span><br><span class="line">        grid[i,j] = newgrid[i,j];                   ## copy back to real grid</span><br><span class="line">        barrier();                                  ## before global check</span><br><span class="line">    &#125; while (not converged);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A <code>barrier()</code> in ppls makes any thread that arrive here has to wait all the other threads arriving here.</p><p>以方腔热对流的模拟计算模型为例，每个网格节点$(i,j)_{t+1}$ 的更新依赖于上一个迭代时间点的$(i,j)_t$以及其临近几个点的值，创建最多跟网格点数量一样的threads，然后并行地计算网格点的新值，更新的值用一个buffer层来缓存，用<code>barrier()</code>来保证所有网格点的更新值都计算完毕，再检查收敛情况，再用一个<code>barrier()</code>保证所有buffer层的值都更新到原网格上，再决定是否进行下一次计算。</p><p>Single Program Multiple Data (SPMD): A programming style, all processes execute more or less the same code, but on distinct partitions of the data.</p><h3 id="Other-Patterns"><a href="#Other-Patterns" class="headerlink" title="Other Patterns"></a>Other Patterns</h3><p>Other candidate patterns include MapReduce (championed by Google), Scan, Divide &amp; Conquer, Farm as well as application domain specific operations.</p><h2 id="Shared-Variable-Programming"><a href="#Shared-Variable-Programming" class="headerlink" title="Shared Variable Programming"></a>Shared Variable Programming</h2><p>In the <strong>shared-memory programming model</strong>, tasks share a common address space, which they read and write asynchronously. An advantage of this model from the programmer’s point is that the notion of data “ownership” is lacking, so there is no need to specify explicitly the communication of data between tasks. Program development can often be simplified.</p><p>There are two fundamentally different synchronization in shared variable programming. <strong>Mutual Exclusion</strong> and <strong>Condition Synchronization</strong>.</p><h3 id="Mutual-Exclusion"><a href="#Mutual-Exclusion" class="headerlink" title="Mutual Exclusion"></a>Mutual Exclusion</h3><p>Atomic actions, at most one thread is executing the critical section at a time. Prevent two or more threads from being active concurrently for some period, because their actions may interfere incorrectly. For example, we might require updates to a shared counter (e.g., count++) to execute with mutual exclusion.</p><h4 id="Critical-Sections-problem"><a href="#Critical-Sections-problem" class="headerlink" title="Critical Sections problem"></a>Critical Sections problem</h4><p>A simple pattern of mutual exclusion occurs in the critical section problem. This occurs when n threads execute code of the following form, in which it is essential that at most one thread is executing statements in the critical section at a time (because of potentially unsafe access to shared variables)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">co [i = 1 to n] &#123;</span><br><span class="line">    while (something) &#123;</span><br><span class="line">        lock(l);</span><br><span class="line">        critical section;</span><br><span class="line">        unlock(l);</span><br><span class="line">        non-critical section;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Design code to execute before (<strong>entry protocol</strong>) and after (<strong>exit protocol</strong>) the critical section to make the critical section <strong>atomic</strong>. If one thread lock the critical section, no one(thread) else could lock it or unlock it anymore, until the thread unlock it.</p><p>Important properties:<br>· Mutual exclusion.<br>· Absence of Deadlock (or Livelock): If two or more threads are trying to enter the critical section, at least one succeeds. A deadlock is a state in which each member of a group is waiting for some other member to take action, such as sending a message or more commonly releasing a lock, so that neither of them take action.<br>· Absence of Unnecessary Delay: If a thread is trying to enter its critical section and the other threads are executing their non-critical sections, or have terminated, the first thread is not prevented from entering its critical section.<br>· Eventual Entry (No Starvation): A thread that is attempting to enter its critical section will eventually succeed. May not matter in some “performance parallel” programs - as long as we are making progress elsewhere.</p><p>Simple implementation of each lock with a <strong>shared boolean variable</strong>: if <code>false</code>, then one locking thread can set it to <code>true</code> and be allowed to proceed. Other attempted locks must be forced to wait.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># model assumes that the l = false;</span><br><span class="line"># write is already atomic</span><br><span class="line"># This might fail if the model is more relaxed than SC.</span><br><span class="line">lock_t l = false;</span><br><span class="line">co [i = 1 to n] &#123;</span><br><span class="line">    while (something) &#123;</span><br><span class="line">        &lt; await (!l) l = true; &gt; # guarantee the others waiting</span><br><span class="line">        critical section;</span><br><span class="line">        l = false; # unlock the lock, open the critical section</span><br><span class="line">        non-critical section;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>To implement the <code>&lt; await (!l) l = true; &gt;</code>, we rely on some <strong>simpler atomic primitive</strong>, implemented with hardware support. There are many possibilities, including “Fetch-and-Add”, “Test-and-Set” and the “Load-Linked, Store-Conditional” pairing.</p><h5 id="Test-and-Set-TS-instruction"><a href="#Test-and-Set-TS-instruction" class="headerlink" title="Test-and-Set (TS) instruction"></a>Test-and-Set (TS) instruction</h5><p>Behaving like a call-by-reference function, so that the variable passed in is read from and written to, but in reality it is a single machine instruction. The key feature is that this happens (or at least, appears to happen) atomically.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># A Test-and-Set (TS) instructionW</span><br><span class="line">bool TS (bool v) &#123;</span><br><span class="line">    &lt; bool initial = v;</span><br><span class="line">    v = true;</span><br><span class="line">    return initial; &gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_t l = false;</span><br><span class="line">co [i = 1 to n] &#123;</span><br><span class="line">    while (something) &#123;</span><br><span class="line">        while (TS(l)) ;  ## spin lock</span><br><span class="line">        critical section;</span><br><span class="line">        l = false;</span><br><span class="line">        non-critical section;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is called <strong>spin lock</strong>, guarantees mutual exclusion, absence of deadlock and absence of delay, but does not guarantee eventual entry.</p><p>Simple spin locks don’t make good use of the cache (those spinning Test-And-Sets play havoc with contention and coherence performance). A pragmatically better solution is known as <strong>Test-and-Test-and-Set</strong>.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">while</span> (something) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l || TS(l)); <span class="comment">/* only TS() if l was false*/</span></span><br><span class="line">        critical section;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>Simply read <code>l</code> until there is a chance that a Test-and-Set might succeed.</p><h5 id="Lamport’s-Bakery-Algorithm"><a href="#Lamport’s-Bakery-Algorithm" class="headerlink" title="Lamport’s Bakery Algorithm"></a><a href="https://en.wikipedia.org/wiki/Lamport%27s_bakery_algorithm" target="_blank" rel="noopener">Lamport’s Bakery Algorithm</a></h5><p>Implement critical sections using only simple atomic read and simple atomic write instructions (i.e. no need for atomic read-modify-write).</p><p>采用商店结账排队机制，顾客就是一个个threads，根据排队码，越小的优先级越高（0 除外，0 代表没有结账需求），最小的可以进入critical section。</p><p>The challenge is entry protocal, if a thread intends to access the critical section:</p><ol><li>排队取号：It sets its turn <code>turn[i] = max(turn[:])+1</code> (Threads not at or intend to access the critical section have a turn of 0)</li><li>等待叫号：This thread waits until its turn comes up (until it has the smallest turn).</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int turn[n] = [0, 0, ... 0];</span><br><span class="line">co [i=1 to n] &#123;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        turn[i] = max (turn[1..n]) + 1;</span><br><span class="line">        for (j = 1 to n except i) &#123;</span><br><span class="line">            while ((turn[j]!=0 and (turn[i] &gt; (turn[j])) skip;</span><br><span class="line">        &#125;</span><br><span class="line">        critical section;</span><br><span class="line">        turn[i] = 0;</span><br><span class="line">        noncritical section;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>max (turn[1..n]) + 1</code>不是atomic的, 所以会出现问题.</p><p>问题一: if turn setting is not atomic then two (or more) threads may claim the same turn.</p><blockquote><p>两个threads在取号阶段<code>turn[i] = max(turn[:])+1</code>出现并发，两个都先<code>max</code>, 之后再<code>+1</code>.</p></blockquote><p>问题二: there is possibility that a thread can claim a lower turn than another thread which enters the critical section before it!</p><blockquote><p>两个threads在取号阶段<code>turn[i] = max(turn[:])+1</code>出现并发, 并且在两个threads分别进行<code>max</code>的间隙, 刚好在CS中的thread完成并退出CS，导致两个thread看到的<code>max</code>值不一样了. 前者比后者看到的大, 但前者却因为更早进行<code>+1</code>操作而提前进入了CS.</p></blockquote><p>举例：假如同时有三个thread A B C, A 已经在CS中(turn(A)&gt;0)：</p><ol><li>B 先运行max比较(<code>max = turn(A)</code>),</li><li>C 在 A 退出后(<code>turn(A) = 0</code>)才进行比较(<code>max = 0</code>),</li><li>B 先进行<code>+1</code>操作(<code>turn(B) = turn(A)+1 &gt; 1</code>),</li><li>B 进行比较后允许进入CS (<strong>此时turn(C)还是0</strong>, 0是被忽略的);</li><li>之后C才 <code>+1</code>(<code>turn(C) = 0 + 1 = 1</code>);</li><li>这样导致B的值虽然比C大, 但B还是比C先进入CS; 之后因为 C 的 turn 比较小， 所以 C 也跟着进入 CS。</li></ol><p>问题一解决方案 - 使用线程ID（绝不相同）做二次区分, 在相同 turn 的情况下，具有较低ID的 thread 有限。</p><p>问题二解决方案 - 在<code>max (turn[1..n]) + 1</code>之前先<code>turn[i] = 1;</code>.<br>· 这样，任何 threads 想取号都要先标记为 1<br>· 标记后，才有资格跟其他 thread 比较<br>· 以<code>max+1</code>作为号码进入队列，这样任何的可能的 turn 值都必定大于 1<br>· B 无法提前进入CS (<strong>此时turn(C)不再是被忽略的0, 而是最小正整数1</strong>).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  (x, a) &gt; (y,b) means (x&gt;y) || (x==y &amp;&amp; a&gt;b).</span><br><span class="line">while (true) &#123;</span><br><span class="line">    turn[i] = 1; turn[i] = max (turn[1..n]) + 1;</span><br><span class="line">    for (j = 1 to n except i) &#123;</span><br><span class="line">        while ((turn[j]!=0 and (turn[i], i) &gt; (turn[j], j)) skip;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Lamport’s algorithm has the strong property of guaranteeing eventual entry (unlike our spin lock versions). The algorithm is too inefficient to be practical if spin-locks are available.</p><h3 id="Condition-Synchronization"><a href="#Condition-Synchronization" class="headerlink" title="Condition Synchronization"></a>Condition Synchronization</h3><p>Delay an action until some condition (on the shared variables such as in producer-consumer, or with respect to the progress of other threads such as in a <strong>Barrier</strong>) becomes true.</p><h4 id="Barrier-synchronization"><a href="#Barrier-synchronization" class="headerlink" title="Barrier synchronization"></a>Barrier synchronization</h4><p><strong>Barrier synchronization</strong> is a particular pattern of condition synchronization, a kind of computation-wide waiting:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">co [i = 1 to n] &#123;</span><br><span class="line">    while (something) &#123;</span><br><span class="line">        do some work;</span><br><span class="line">        wait for all n workers to get here;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A <strong>Counter Barriers</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;count = count + 1;&gt;</span><br><span class="line">&lt;await (count == n);&gt;</span><br></pre></td></tr></table></figure></p><p>is fine as a single-use barrier, but things get more complex if (as is more likely) we need the barrier to be <strong>reusable</strong>.</p><p>改良为<code>&lt;await (count == n); count = 0;&gt;</code>也不行: an inter-iteration race, 假如<code>count == n</code>, 那么n个threads都完成了前面的statements并准备执行<code>await</code>, 但其中任何一个 thread 先执行完整个代码都使<code>count = 0</code>,这样剩余的threads就无法通过await条件了.</p><h5 id="Sense-Reversing-Barrier"><a href="#Sense-Reversing-Barrier" class="headerlink" title="Sense Reversing Barrier"></a>Sense Reversing Barrier</h5><p>A shared variable sense is <strong>flipped after each use</strong> of the barrier to indicate that all threads may proceed.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shared int count = 0; shared boolean sense = false;</span><br><span class="line">co [i = 1 to n] &#123;</span><br><span class="line">    private boolean mySense = !sense; ## one per thread</span><br><span class="line">    while (something) &#123;</span><br><span class="line">        do some work;</span><br><span class="line">        &lt; count = count + 1;</span><br><span class="line">          if (count == n) &#123; count = 0; sense = mySense; &#125;   ## flip sense</span><br><span class="line">        &gt;</span><br><span class="line">        while (sense != mySense);                           ## wait or pass</span><br><span class="line">        mySense = !mySense;                                 ## flip mySense</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有thread的local variable <code>mySense</code>开始都被赋值<code>true</code>，前面n-1个thread都得在<code>while</code> statement那里等着；直到最后一个thread也<code>do some work;</code>之后, <code>if</code> statement才被执行, <code>count</code> 变为 <code>0</code>, <code>sense</code> 被赋值为<code>mySense</code>也即是<code>true</code>, 所有threads就可以结束内部<code>while</code>循环，然后进行下一轮大循环.</p><p>缺点：$O(n)$效率，count次数（同步次数）正比于thread数量。</p><h5 id="Symmetric-Barriers"><a href="#Symmetric-Barriers" class="headerlink" title="Symmetric Barriers"></a>Symmetric Barriers</h5><p>Symmetric barriers are designed to avoid the bottleneck at the counter.<br>通过 pair-threads barriers 多轮同步来构建一个完整的 n-threads barriers，让所有threads都知道大家已经完成任务。总共是$\log_2n$ 轮同步。每个thread在完成必要工作后, 开始进入下面的pairwise同步环节，自己(myid)的初始arrive状态为0:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># arrive[i] == 1 means arrive barrier</span><br><span class="line"># there will be log_2 #threads stages,</span><br><span class="line"># 每个stage代表一次pairwise同步</span><br><span class="line">for [s = 0 to stages-1] &#123;</span><br><span class="line">    &lt;await (arrive[myid] == 0);&gt;   # 1</span><br><span class="line">    arrive[myid] = 1;              # 2</span><br><span class="line">    work out who my friend is at stage s;</span><br><span class="line">    &lt;await (arrive[friend] == 1);&gt; # 3</span><br><span class="line">    arrive[friend] = 0;            # 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样保证了，每个thread需要先把自己的arrive状态标记为1(#1，#2)，才可以去看同伴的状态（#3），假如同伴也是1，那么表明自己这一组是都到达了barrier状态（大家都是1），那么就会把对方的状态初始化为0 （#4），进入下一阶段，更换同伴，继续同步比较。<br><img src="/images/symmetric_barrier.jpg" alt="" title="Butterfly barrier for 8 processe. Image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"><br>When used as <strong>a step within a multistage symmetric barrier</strong>, 会出现问题：假如有四个thread，那么就会有两个stages：第一次是1和2同步，3和4同步。2一直没到barrier，1一直卡在#3。而3和4 同步完后开始检查1的状况，发现<code>arrive[1] = 1</code>，就运行Lines (3) and (4), 结果1就被初始化了，而2还没是没到barrier。</p><p>解决办法是给每个stage分配新的arrive变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for [s = 0 to stages-1] &#123;</span><br><span class="line">    &lt;await (arrive[myid][s] == 0);&gt;</span><br><span class="line">    arrive[myid][s] = 1;</span><br><span class="line">    work out who my friend is at this stage;</span><br><span class="line">    &lt;await (arrive[friend][s] == 1);&gt;</span><br><span class="line">    arrive[friend][s] = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样假如出现2一直没到barrier的情况, 那么1会卡在当前stage, 1的stage+1的arrive状态就无法更新为1.</p><h5 id="Dissemination-Barriers"><a href="#Dissemination-Barriers" class="headerlink" title="Dissemination Barriers"></a>Dissemination Barriers</h5><p>If n isn’t a power of 2, instead of pairwise synchs, we have two partners at each stage for each thread, one incoming and one outgoing.<br><img src="/images/dissemination_barrier.png" alt="" title=" Dissemination barrier for 6 processes. Image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"></p><h2 id="Structured-Primitives"><a href="#Structured-Primitives" class="headerlink" title="Structured Primitives"></a>Structured Primitives</h2><p>Instead of implementing directly in the user-address space, a number of more structured primitives have been devised for <strong>implementation with the assistance of the operating system</strong>, so that threads can be directly suspended and resumed by the OS’s scheduler.</p><blockquote><p>· Machine code, instructions and data directly understandable by a CPU;<br>· Language primitive, the simplest element provided by a programming language;<br>· Primitive data type, a datatype provided by a programming language.</p></blockquote><h3 id="Semaphores-信号灯"><a href="#Semaphores-信号灯" class="headerlink" title="Semaphores 信号灯"></a>Semaphores 信号灯</h3><p>A semaphore is a special shared variable, accessible only through two atomic operations, <strong>P(try to decrease)</strong> and <strong>V(increase)</strong>, defined by:<br>P(s): <code>&lt;await (s&gt;0) s=s-1;&gt;</code><br>V(s): <code>&lt;s=s+1;&gt;</code></p><p>Property: A thread executing <code>P()</code> on a 0 valued semaphore will be suspended on a queue until after some other thread has executed a <code>V()</code>.</p><p>Application: A semaphore appears to be a simple integer. A thread waits for permission to proceed a <strong>critical section</strong>, and then signals that it has proceeded by performing a <code>P()</code> operation on the semaphore.</p><p><strong>Binary semaphore</strong>: A semaphore whose usage is organised to only ever take the value (0, 1) as a mutex 互斥.<br><strong>Counting(split) semaphore</strong>: can take on arbitrary nonnegative values.</p><p>Semaphores still require careful programming: there is no explicit connection in the program source between “matching” semaphore operations. It is easy to get things wrong.</p><p>Similarly, there is no obvious indication of how semaphores are being used - some may be for mutual exclusion, others for condition synchronization. Again confusion is possible.</p><h4 id="Semaphores-for-Critical-Section-mutual-exclusion"><a href="#Semaphores-for-Critical-Section-mutual-exclusion" class="headerlink" title="Semaphores for Critical Section (mutual exclusion)"></a>Semaphores for Critical Section (mutual exclusion)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sem mutex = 1;</span><br><span class="line">co [i = 1 to n] &#123;</span><br><span class="line">    while (whatever) &#123;</span><br><span class="line">        P(mutex);</span><br><span class="line">        critical section;</span><br><span class="line">        V(mutex);</span><br><span class="line">        noncritical section;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Semaphores-for-Barrier-Synchronisation"><a href="#Semaphores-for-Barrier-Synchronisation" class="headerlink" title="Semaphores for Barrier Synchronisation"></a>Semaphores for Barrier Synchronisation</h4><p>实现 symmetric barrier: an array of arrive semaphores for each stage<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for [s = 1 to stages] &#123;</span><br><span class="line">    V(arrive[myid][s]);</span><br><span class="line">    work out who my friend is at stage s;</span><br><span class="line">    P(arrive[friend][s]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Semaphores-for-Producer-Consumer-Buffering"><a href="#Semaphores-for-Producer-Consumer-Buffering" class="headerlink" title="Semaphores for Producer-Consumer Buffering"></a>Semaphores for Producer-Consumer Buffering</h4><p>针对单个producer和consumer，控制其接触单个容量的buffer权限：一个semaphores标识buffer已满<code>full</code>，一个标识空<code>empty</code>。这种情况下，只能有一个semaphore是<code>1</code>，故称之为<strong>split binary semaphore</strong>。 <code>P(full)</code> 执行 <code>wait full &gt; 0 : full -= 1</code>, <code>V(empty)</code>执行<code>empty += 1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">T buf; sem empty = 1, full = 0;</span><br><span class="line">co</span><br><span class="line">  co [i = 1 to M] &#123;</span><br><span class="line">      while (whatever) &#123;</span><br><span class="line">          ...produce new data locally</span><br><span class="line">          P(empty);</span><br><span class="line">          buf = data;                # producer</span><br><span class="line">          V(full);</span><br><span class="line">  &#125;   &#125;</span><br><span class="line">//</span><br><span class="line">  co [j = 1 to N] &#123;</span><br><span class="line">      while (whatever) &#123;</span><br><span class="line">          P(full);</span><br><span class="line">          result = buf;              # consumer</span><br><span class="line">          V(empty);</span><br><span class="line">          ... handle result locally</span><br><span class="line">  &#125;   &#125;</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></p><p><strong>Bounded Buffer</strong>: Control access to a multi-space buffer (the producer can run ahead of the consumer up to some limit)</p><ul><li>Implement the buffer itself with an array (circular),</li><li>and two integer indices, indicating the current front and rear of the buffer and use arithmetic modulo <code>n</code> (the buffer size), so that the buffer conceptually becomes circular</li><li>For a single producer and consumer, we protect the buffer with a split “counting” semaphore, initialised according to the buffer size.</li><li>Think of full as counting how many space in the buffer are full, and empty as counting how many are empty<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">T buf[n]; int front = 0, rear = 0;</span><br><span class="line">sem empty = n, full = 0;</span><br><span class="line">co ## Producer</span><br><span class="line">    while (whatever) &#123;</span><br><span class="line">        ...produce new data locally</span><br><span class="line">        P(empty);                 # empty&gt;0, 才能生产, empty-=1</span><br><span class="line">        buf[rear] = data; rear = (rear + 1) % n;</span><br><span class="line">        V(full);</span><br><span class="line">    &#125;</span><br><span class="line">// ## Consumer</span><br><span class="line">    while (whatever) &#123;</span><br><span class="line">        P(full);                  # full&gt;0, 才能消耗, full-=1</span><br><span class="line">        result = buf[front]; front = (front + 1) % n;</span><br><span class="line">        V(empty);</span><br><span class="line">        ... handle result locally</span><br><span class="line">    &#125;</span><br><span class="line">oc</span><br></pre></td></tr></table></figure></li></ul><p><strong>Multiple Producers/Consumers</strong>: Because each producer may access the same pointer to overide each other, so as consumer. Thus we need two levels of protection.</p><ul><li>Use a split counting semaphore to avoid buffer overflow (or underflow), as previously.</li><li>Use a mutual exclusion semaphores to prevent interference between producers (and another to prevent interference between consumers). This allows up to one consumer and one producer to be actively simultaneously within a non-empty, non-full buffer.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">T buf[n]; int front = 0, rear = 0; 86</span><br><span class="line">sem empty = n, full = 0, mutexP = 1, mutexC = 1;</span><br><span class="line">co</span><br><span class="line">  co [i = 1 to M] &#123;</span><br><span class="line">      while (whatever) &#123;</span><br><span class="line">          ...produce new data locally</span><br><span class="line">          P(empty);</span><br><span class="line">            P(mutexP); # stop the other producers from accessing the buffer</span><br><span class="line">              buf[rear] = data; rear = (rear + 1) % n;</span><br><span class="line">            V(mutexP);</span><br><span class="line">          V(full);</span><br><span class="line">&#125; &#125;</span><br><span class="line">//</span><br><span class="line">  co [j = 1 to N] &#123;</span><br><span class="line">      while (whatever) &#123;</span><br><span class="line">          P(full);</span><br><span class="line">            P(mutexC);</span><br><span class="line">              result = buf[front]; front = (front + 1) % n;</span><br><span class="line">            V(mutexC);</span><br><span class="line">          V(empty);</span><br><span class="line">          ... handle result locally</span><br><span class="line">    &#125; &#125;</span><br><span class="line">oc</span><br></pre></td></tr></table></figure><p><strong>Extending Multiple Producers/Consumers</strong>: If the buffered items are large and take a long time to read/write, we would like to relax this solution to allow several producers and/or consumers to be active within the buffer simultaneously.</p><ul><li>We need to ensure that these workers accesse distinct buffer locations, which require the index arithmetic to be kept atomic.</li><li>Make sure that the producer/consumers wait for that element to be empty/full before actually proceeding.<br><img src="/images/Multiple_Producers_Consumers.png" alt="" title="The producers are filling distinct slots, but not necessarily completing these fills in strict order - slot i+1 might finish filling before slot i. However, consumers only know that a slot has been filled and assume, possibly incorrectly, that it is the ”next” one. Image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"></li></ul><p>The solution is to have <strong>extra semaphores pair for each buffer location</strong>.</p><h3 id="Monitors"><a href="#Monitors" class="headerlink" title="Monitors"></a>Monitors</h3><p>The monitor is a more structured mechanism which allows threads to have both <strong>mutual exclusion</strong> and the ability to <strong>wait</strong> (block) for a certain condition to become true. It has a mechanism for <strong>signaling</strong> other threads that their condition has been met. A monitor consists of a <strong>mutex (lock)</strong> object and <strong>condition variables</strong> (cv). A condition variable is basically a container of threads that are waiting for a certain condition.</p><p>For <strong>Mutual Exclusion</strong>: i.e. a mutex (lock) object, ensures that <strong>at most one thread is active within the monitor at each point in time</strong>. 不同线程的下一条即将执行的指令 (suspended) 可能是来自同一个 monitor (由os自行分配), 但同一时间内，至多只能有一个线程执行下一条指令，但可能不同线程各自收到了来自这个 monitor 代码的不同指令. It is as if the body of each monitor method is implicitly surrounded with <code>P()</code> and <code>V()</code> operations on a single hidden binary semaphore, shared by all methods.</p><p>For <strong>Condition Synchronization</strong>, using a cv with a monitor to control <strong>a queue of delayed threads</strong> by a kind of <strong>Signal and Continue (SC)</strong> scheme.<img src="/images/signal_and_continue.png" alt="" title="State transition diagram for “signal-and-continue” monitors. Image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"><br>For a <code>condition_variables x;</code></p><ul><li><code>wait(x)</code>: Release lock; wait for the condition to become true; reacquire lock upon return (Java wait())</li><li><code>Signal(x)</code>: Wake up a waiter, if any (Java notify())</li><li><code>signal-all(x)</code>or<code>Broadcast(x)</code>: Wake up all the waiters (Java notifyAll())</li></ul><p>For the thread active inside a monitor method - <strong>executing in monitor state</strong></p><ul><li>If the thread could not proceed, it may call the <code>wait(cv)</code> operation to <strong>give up the (implicit) lock</strong> it holds on the monitor, and being <strong>suspended</strong> (push to the end of CV queue). Each CV has its unique block queue.</li><li>Or the thread could calls the operation <code>signal(cv)</code> to release the lock. This allow one previously blocked thread (normally chosen by a FIFO discipline) to <strong>become ready for scheduling</strong> again (only one will be allowed to enter the <strong>monitor entry queue</strong> at a time). The signalling thread continues uninterrupted.</li><li>Or <code>return()</code>.</li></ul><p>If no threads are waiting, then a <code>signal()</code> is <strong>“lost”</strong> or “forgotten”, whereas a <code>V()</code> in Semaphores allows a subsequent <code>P()</code> to proceed.</p><p><strong>Single producer, single consumer bounder buffer</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">monitor Bounded_Buffer &#123;</span><br><span class="line">    typeT buf[n];                     # an array of some type T</span><br><span class="line">    int front = 0,                    # index of first full slot</span><br><span class="line">        rear = 0;                     # index of first empty slot</span><br><span class="line">        count = 0;                    # number of full slots</span><br><span class="line">    ## rear == (front + count) % n</span><br><span class="line">    condition_variables not_full,     # signaled when count &lt; n</span><br><span class="line">                        not_empty;    # signaled when count &gt; 0</span><br><span class="line">    procedure deposit(typeT data) &#123;   # 存</span><br><span class="line">        while (count == n) wait(not_full);</span><br><span class="line">        buf[rear] = data; rear = (rear+1) % n; count++;</span><br><span class="line">        signal(not_empty);</span><br><span class="line">    &#125;</span><br><span class="line">    procedure fetch(typeT &amp;result) &#123;  # 取</span><br><span class="line">        while (count == 0) wait(not_empty);</span><br><span class="line">        result = buf[front]; front = (front+1) % n; count--;</span><br><span class="line">        signal(not_full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Why the while loop is necessary</strong> as a safety check on the <code>wait</code> calls (why not use if)? - 因为<code>while(count == n)</code>可以保证当 buffer 被进程快的 producers 填满后(<code>count=n</code>), 进程慢的 threads 不会跳出<strong>循环</strong>, 进入 buffer, 而是继续<code>wait()</code>.</p><p>The key difference to semaphores: <code>signal()</code> on a condition variable is not “remembered” in the way that <code>V()</code> on a semaphore is. If no threads are waiting, then a <code>signal()</code> is “lost” or “forgotten”, whereas a <code>V()</code> will allow a subsequent <code>P()</code> to proceed.</p><h2 id="Real-Shared-Variable-Programming-Systems"><a href="#Real-Shared-Variable-Programming-Systems" class="headerlink" title="Real Shared Variable Programming Systems"></a>Real Shared Variable Programming Systems</h2><p>Various concepts for shared variable programming have been embedded in real programming systems. In particular C’s <strong>Posix threads (Pthreads)</strong> library and <strong>Java’s threads and monitors</strong>.</p><h2 id="POSIX-Threads-Pthread"><a href="#POSIX-Threads-Pthread" class="headerlink" title="POSIX Threads (Pthread)"></a>POSIX Threads (Pthread)</h2><p>Create a new thread: Threads (type <code>pthread_t</code>) begin by executing a given function, and terminate when that function exits (or when killed off by another thread).<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_create (pthread_t *thread, p_thread_attr_t *attr, void *(*function) (void *), void *arguments);</span><br></pre></td></tr></table></figure></p><p>Wait for thread termination: <code>int pthread_join (pthread_t t, void ** result);</code></p><p>POSIX provides mechanisms to coordinate accesses including semaphores and building blocks for monitors.<br><strong>Posix semaphores</strong></p><ol><li><code>sem_init(&amp;sem, share, init)</code>, where init is the initial value and share is a “boolean” (in the C sense) indicating whether the semaphore will be shared between processes (true) or just threads within a process (false).</li><li><code>sem_wait(s)</code>, which is the Posix name for P(s)</li><li><code>sem_post(s)</code>, which is the Posix name for V(s)</li></ol><p>A Producers &amp; Consumers:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sem_t</span> empty, full; <span class="comment">// the global semaphores</span></span><br><span class="line"><span class="keyword">int</span> data; <span class="comment">// shared buffer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> pid, cid;</span><br><span class="line">    ....</span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// sem empty = 1</span></span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// sem full = 0</span></span><br><span class="line">    pthread_create(&amp;pid, &amp;attr, Producer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;cid, &amp;attr, Consumer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(pid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(cid, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Producer</span> <span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> produced;</span><br><span class="line">    <span class="keyword">for</span> (produced = <span class="number">0</span>; produced &lt; numIters; produced++) &#123;</span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        data = produced;</span><br><span class="line">        sem_post(&amp;full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Consumer</span> <span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>, consumed;</span><br><span class="line">    <span class="keyword">for</span> (consumed = <span class="number">0</span>; consumed &lt; numIters; consumed++) &#123;</span><br><span class="line">        sem_wait(&amp;full);</span><br><span class="line">        total = total+data;</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"after %d iterations, the total is %d (should be %d)\n"</span>, numIters, total, numIters*(numIters+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Posix Monitors</strong><br>Pthreads provides <strong>locks</strong>, of type <code>pthread_mutex_t m;</code>. These can be</p><ul><li>initialized with <code>pthread_mutex_init(&amp;m, attr)</code>, where attr are attributes concerning scope (as with semaphore creation). If attr is <code>NULL</code>, the default mutex attributes (NONRECURSIVE) are used;</li><li>locked with <code>pthread_mutex_lock(&amp;m)</code>, which blocks the locking thread if <code>m</code> is already locked. There is also a non-blocking version <code>pthread_mutex_trylock(&amp;m)</code>.</li><li>unlocked with <code>pthread_mutex_unlock(&amp;m)</code>. Only a thread which holds a given lock, should unlock it!</li></ul><p>Pthreads provides <strong>condition variables</strong> <code>pthread_cond_t</code>. As well as the usual initialization, these can be:</p><ul><li>waited on with <code>pthread_cond_wait(&amp;cv, &amp;mut)</code> where cv is a condition variable, and mut must be a lock already held by this thread, and which is implictly released.</li><li>signalled with <code>pthread_cond_signal(&amp;cv)</code> by a thread which should (but doesn’t strictly have to) hold the associated mutex. The semantics are “Signal-and-Continue” as previously discussed.</li><li>signalled with <code>pthread_cond_broadcast(&amp;cv)</code>. This is “signal-all”</li></ul><p>A simple Jacobi grid-iteration program with a re-usable Counter Barrier. To avoid copying between “new” and “old” grids, each iteration performs two Jacobi steps. Convergence testing could be added as before.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> barrier; <span class="comment">// mutex semaphore for the barrier</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> go;       <span class="comment">// condition variable for leaving</span></span><br><span class="line"><span class="keyword">int</span> numArrived = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Barrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;barrier);</span><br><span class="line">    numArrived++;</span><br><span class="line">    <span class="keyword">if</span> (numArrived == numWorkers) &#123;</span><br><span class="line">        numArrived = <span class="number">0</span>;</span><br><span class="line">        pthread_cond_broadcast(&amp;go);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pthread_cond_wait(&amp;go, &amp;barrier);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;barrier);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> workerid[MAXWORKERS];</span><br><span class="line">    pthread_mutex_init(&amp;barrier, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;go, <span class="literal">NULL</span>);</span><br><span class="line">    InitializeGrids();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numWorkers; i++)</span><br><span class="line">        pthread_create(&amp;workerid[i], &amp;attr, Worker, (<span class="keyword">void</span> *) i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numWorkers; i++)</span><br><span class="line">        pthread_join(workerid[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Worker</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myid = (<span class="keyword">int</span>) arg, rowA = myid*rowshare+<span class="number">1</span>, rowB = rowA+rowshare<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (iters = <span class="number">1</span>; iters &lt;= numIters; iters++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = rowA; i &lt;= rowB; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= gridSize; j++) &#123;</span><br><span class="line">                grid2[i][j] = (grid1[i<span class="number">-1</span>][j] + grid1[i+<span class="number">1</span>][j] + grid1[i][j<span class="number">-1</span>] + grid1[i][j+<span class="number">1</span>]) * <span class="number">0.25</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Barrier();</span><br><span class="line">        <span class="keyword">for</span> (i = rowA; i &lt;= rowB; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= gridSize; j++) &#123;</span><br><span class="line">                grid1[i][j] = (grid2[i<span class="number">-1</span>][j] + grid2[i+<span class="number">1</span>][j] + grid2[i][j<span class="number">-1</span>] + grid2[i][j+<span class="number">1</span>]) * <span class="number">0.25</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Barrier();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Java-Concurrency"><a href="#Java-Concurrency" class="headerlink" title="Java Concurrency"></a>Java Concurrency</h2><p>Java是一种多线程 multi-threaded 编程语言，其同步模型是基于 monitor 概念，可用于开发多线程程序。多任务 multtasking 就是多个进程共享公共处理资源（如CPU）的时候。多线程将多任务的思想扩展到可以将单个应用程序中的特定操作细分为单独线程的应用程序。每个线程都可以并行运行。操作系统不仅在不同的应用程序之间分配处理时间，而且在应用程序内的每个线程之间分配处理时间。</p><h3 id="Java-Threads"><a href="#Java-Threads" class="headerlink" title="Java Threads"></a>Java Threads</h3><p><img src="https://www.tutorialspoint.com/java/images/Thread_Life_Cycle.jpg" alt="" title="Life Cycle of a Thread. image from: http://www.tutorialspoint.com/java/java_multithreading.htm"><br>Threads can be created from classes which extend <code>java.lang.Thread</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(‘‘<span class="keyword">this</span> is a thread’’);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Simple().start(); <span class="comment">// implicitly calls the run() method</span></span><br></pre></td></tr></table></figure></p><p>Or implement <code>java.lang.Runnable</code> (so we can extend some other class too).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bigger</span> <span class="keyword">extends</span> <span class="title">Whatever</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; .... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Thread( <span class="keyword">new</span> Bigger (...) ).start();</span><br></pre></td></tr></table></figure></p><p>Wait to join with another thread<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friend</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> me;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Friend</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; me = i; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from thread "</span> + me);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="title">throws</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">InterruptedException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i; Friend t[] = <span class="keyword">new</span> Friend[n];</span><br><span class="line">        System.out.println (<span class="string">"Hello from the main thread"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            t[i] = <span class="keyword">new</span> Friend(i);</span><br><span class="line">            t[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            t[i].join(); <span class="comment">// might throw java.lang.InterruptedException</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (<span class="string">"Goodbye from the main thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Java-“Monitors”"><a href="#Java-“Monitors”" class="headerlink" title="Java “Monitors”"></a>Java “Monitors”</h3><p>Java provides an implementation of the <strong>monitor</strong> concept (but doesn’t actually have monitor as a keyword).</p><p>Any object in a Java program can, in effect, become a monitor, simply by declaring one or more of its methods to be <strong>synchronized</strong>, or by including a synchronized block of code.</p><p>Each such object is associated with one, <strong>implicit lock</strong>. A thread executing any synchronized code must first acquire this lock. This happens implicitly (i.e. there is no source syntax). Similarly, upon leaving the synchronized block the lock is <strong>implicitly released</strong>.</p><p>Java’s <strong>condition variable</strong> mechanism uses <strong>Signal-and-Continue</strong> semantics. Each synchronizable object is associated with a single <strong>implicit condition variable</strong>. Manipulated with methods <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code>. We can only have <strong>one conditional variable queue per monitor</strong> (hence the absence of any explicit syntax for the condition variable itself).</p><p><strong>Readers &amp; Writers problem</strong> requires control access to some shared resource, such that there may be many concurrent readers, but only one writer (with exclusive access) at a time.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadWrite</span> </span>&#123; <span class="comment">// driver program -- two readers and two writers</span></span><br><span class="line">    <span class="keyword">static</span> Database RW = <span class="keyword">new</span> Database(); <span class="comment">// the monitor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rounds = Integer.parseInt(arg[<span class="number">0</span>],<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Reader(rounds, RW).start();</span><br><span class="line">        <span class="keyword">new</span> Reader(rounds, RW).start();</span><br><span class="line">        <span class="keyword">new</span> Writer(rounds, RW).start();</span><br><span class="line">        <span class="keyword">new</span> Writer(rounds, RW).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rounds; Database RW;</span><br><span class="line">    <span class="keyword">private</span> Random generator = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reader</span><span class="params">(<span class="keyword">int</span> rounds, Database RW)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rounds = rounds;</span><br><span class="line">        <span class="keyword">this</span>.RW = RW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;rounds; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(generator.nextInt(<span class="number">500</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (java.lang.InterruptedException e) &#123;&#125;</span><br><span class="line">            System.out.println(<span class="string">"read: "</span> + RW.read());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rounds; Database RW;</span><br><span class="line">    <span class="keyword">private</span> Random generator = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Writer</span><span class="params">(<span class="keyword">int</span> rounds, Database RW)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rounds = rounds;</span><br><span class="line">        <span class="keyword">this</span>.RW = RW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;rounds; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(generator.nextInt(<span class="number">500</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (java.lang.InterruptedException e) &#123;&#125;</span><br><span class="line">            RW.write();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Implement the “database”. Simply making both read and write operations synchronized is over restrictive - we would like it to be possible for<br>several readers to be actively concurrently. The last reader to leave will signal a waiting writer.</p><p>Thus we need to count readers, which implies <strong>atomic update</strong> of the count. A reader needs <strong>two protected sections</strong> to achieve this.</p><p>Notice that while readers are actually reading the data they do not hold the lock.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data = <span class="number">0</span>; <span class="comment">// the data</span></span><br><span class="line">    <span class="keyword">int</span> nr = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startRead</span><span class="params">()</span> </span>&#123; nr++; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">endRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nr--;</span><br><span class="line">        <span class="keyword">if</span> (nr==<span class="number">0</span>) notify(); <span class="comment">// awaken a waiting writer</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> snapshot;</span><br><span class="line">        startRead();</span><br><span class="line">        snapshot = data;</span><br><span class="line">        endRead();</span><br><span class="line">        <span class="keyword">return</span> snapshot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (nr&gt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123; wait(); &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">        temp = data; <span class="comment">// next six lines are the ‘‘database’’ update!</span></span><br><span class="line">        data = <span class="number">99999</span>; <span class="comment">// to simulate an inconsistent temporary state</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(generator.nextInt(<span class="number">500</span>)); <span class="comment">// wait a bit</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.lang.InterruptedException e) &#123;&#125;</span><br><span class="line">        data = temp+<span class="number">1</span>; <span class="comment">// back to a safe state</span></span><br><span class="line">        System.out.println(<span class="string">"wrote: "</span> + data);</span><br><span class="line">        notify(); <span class="comment">// awaken another waiting writer</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We could express the same effect with synchronized blocks<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> snapshot;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123; nr++; &#125;</span><br><span class="line">    snapshot = data;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        nr--;</span><br><span class="line">        <span class="keyword">if</span> (nr==<span class="number">0</span>) notify(); <span class="comment">// awaken a waiting writer</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> snapshot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Would it be OK to use <code>notifyAll()</code> in <code>read()</code>?</p><p><strong>Buffer for One Producer - One Consumer</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** (borrowed from Skansholm, Java from the Beginning) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> <span class="keyword">extends</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">putLast</span> <span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        addElement(obj); <span class="comment">// Vectors grow implicitly</span></span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">getFirst</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isEmpty())</span><br><span class="line">            <span class="keyword">try</span> &#123;wait();&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        Object obj = elementAt(<span class="number">0</span>);</span><br><span class="line">        removeElementAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="The-java-util-concurrent-package"><a href="#The-java-util-concurrent-package" class="headerlink" title="The java.util.concurrent package"></a>The <code>java.util.concurrent</code> package</h3><p>Including a re-usable <strong>barrier</strong> and <strong>semaphores</strong> (with P() and V() called <code>acquire()</code> and <code>release()</code>). It also has some thread-safe concurrent data structures (queues, hash tables).</p><p>The <code>java.util.concurrent.atomic</code> package provides implementations of <strong>atomically accessible</strong> integers, booleans and so on, with atomic operations like <code>addAndGet</code>, <code>compareAndSet</code>.</p><p>The <code>java.util.concurrent.locks</code> package provides implementations of <strong>locks and condition variables</strong>, to allow a finer grained, more explicit control than that provided by the built-in synchronized monitors.</p><h2 id="Message-Passing-Programming"><a href="#Message-Passing-Programming" class="headerlink" title="Message Passing Programming"></a>Message Passing Programming</h2><p>When the underyling archictecture doesn’t support physically shared memory (for example, by distributing the OS and virtual memory system), we can make the disjoint nature of the address spaces apparent to the programmer, who must make decisions about data distribution and invoke explicit operations to allow interaction across these.</p><p><strong>Message passing</strong>, which is a approache to abstract and implement such a model, dominates the performance-oriented parallel computing world.</p><p>Message passing is characterized as requiring the <strong>explicit participation</strong> of both interacting processes, since each address space can only be directly manipulated by its owner. The basic requirement is thus for <strong>send</strong> and <strong>receive</strong> primitives for transferring data out of and into local address spaces.</p><p>The resulting programs can seem quite fragmented: we express algorithms as a collection of local perspectives. These are often captured in a single program source using <strong>Single Program Multiple Data (SPMD)</strong> style, with different processes following different paths through the same code, branching with respect to local data values and/or to some process identifier.<br><img src="/images/SPMD_Compare_Exchange.png" alt="" title="Image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">co [me = 0 to P-1] &#123; // assumes P is even</span><br><span class="line">  int a, temp; // these are private to each process now</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  // typical step within a parallel sorting algorithm</span><br><span class="line">  if (me%2 == 0) &#123;</span><br><span class="line">      send (me+1, a); // send from a to process me+1</span><br><span class="line">      recv (me+1, temp); // receive into temp from process me+1</span><br><span class="line">      a = (a&lt;=temp) ? a : temp;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      send (me-1, a);</span><br><span class="line">      recv (me-1, temp);</span><br><span class="line">      a = (a&gt;temp) ? a : temp;</span><br><span class="line">  &#125; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1, <strong>Synchronization</strong>: Must a sending process pause until a matching receive has been executed (<strong>synchronous</strong>), or not (asynchronous)? For example, the compare-exchange code above will deadlock if we use synchronous semantics. Can you fix it? Asynchronous semantics require the implementation to buffer messages which haven’t yet been, and indeed may never be, received.</p><p>2, <strong>Addressing</strong>: When we invoke a send (or receive) do we have to specify a unique destination (or source) process or can we use <strong>wild-cards</strong>? Do we require program-wide process naming, or can we create process groups and aliases?</p><p>3, <strong>Collective Operations</strong>: Do we restrict the programmer to single-source, singledestination point-to-point messages, or do we provide abstractions of more complex data exchanges involving several partners?<img src="/images/Collective_Operations.jpg" alt="" title="Image from: http://www.inf.ed.ac.uk/teaching/courses/ppls/pplsslides.pdf"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并行编程语言和系统 - 知识点汇总&lt;br&gt;参考&lt;br&gt;&lt;a href=&quot;http://www.inf.ed.ac.uk/teaching/courses/ppls/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.inf.ed.ac.uk/teaching/courses/ppls/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cs.cmu.edu/~213/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CMU 15213: Introduction to Computer Systems (ICS)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Computer Systems: A Programmer’s Perspective&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Digest 之奇技淫巧</title>
    <link href="http://yoursite.com/python-digest/"/>
    <id>http://yoursite.com/python-digest/</id>
    <published>2018-05-07T23:00:00.000Z</published>
    <updated>2018-05-08T10:23:59.212Z</updated>
    
    <content type="html"><![CDATA[<p>What you will get from this Python digest:<br>1, Learn advanced python programming.<br>2, Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.<br>3, Practice going from a problem description to a solution, using a series of assignments.</p><p>Reference:<br>• <a href="https://www.udacity.com/course/design-of-computer-programs--cs212" target="_blank" rel="noopener">CS212 Design of Computer Program @Udacity</a>, <a href="https://www.udacity.com/wiki/cs212" target="_blank" rel="noopener">Course Wiki</a></p><blockquote><p>Syllabus<br>Lesson 1: How to think to solve problem<br>Lesson 2: Python features; Instrumentation<br>Lesson 3: Build function as tools; Define language; Grammar<br>Lesson 4: Dealing with Complexity Through Search<br>Lesson 5: Dealing with Uncertainty Through Probability</p></blockquote><p>• <a href="https://docs.python.org/3/tutorial/" target="_blank" rel="noopener">The Python Tutorial</a><br>• <a href="http://www.openbookproject.net/thinkcs/" target="_blank" rel="noopener">Open Book Project: How to Think Like a Computer Scientist: Learning with Python</a><br><a id="more"></a></p><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a><a href="https://docs.python.org/2/library/operator.html" target="_blank" rel="noopener">Operator</a></h2><h3 id="Emulating-numeric-types"><a href="#Emulating-numeric-types" class="headerlink" title="Emulating numeric types"></a>Emulating numeric types</h3><p>In-place operation: One modifies the data-structure itself<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">object.__iadd__(self, other)</span><br><span class="line">object.__isub__(self, other)</span><br><span class="line">object.__imul__(self, other)</span><br><span class="line">object.__imatmul__(self, other)</span><br><span class="line">object.__itruediv__(self, other)</span><br><span class="line">object.__ifloordiv__(self, other)</span><br><span class="line">object.__imod__(self, other)</span><br><span class="line">object.__ipow__(self, other[, modulo])</span><br><span class="line">object.__ilshift__(self, other)</span><br><span class="line">object.__irshift__(self, other)</span><br><span class="line">object.__iand__(self, other)</span><br><span class="line">object.__ixor__(self, other)¶</span><br><span class="line">object.__ior__(self, other)</span><br></pre></td></tr></table></figure></p><p> These methods are called to implement the augmented arithmetic assignments. These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self).<br> If x is an instance of a class with an <code>__iadd__()</code> method, <code>x += y</code> is equivalent to <code>x = operator.iadd(x, y)</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B = np.arange(12).reshape(4,3)</span><br><span class="line">for b in B:</span><br><span class="line">    b += 1</span><br><span class="line">print(B) # B will be changed</span><br></pre></td></tr></table></figure></p><h2 id="Object-oriented-Programming"><a href="#Object-oriented-Programming" class="headerlink" title="Object oriented Programming"></a>Object oriented Programming</h2><h3 id="Class-Name-Guidline"><a href="#Class-Name-Guidline" class="headerlink" title="Class Name Guidline"></a><a href="https://www.python.org/dev/peps/pep-0008/#id41" target="_blank" rel="noopener">Class Name Guidline</a></h3><p><a href="https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc" target="_blank" rel="noopener">underscore (_)</a>:<br>• For storing the value of last expression in interpreter.<br>• For ignoring the specific values. (so-called “I don’t care”)<br>• To use as ‘Internationalization(i18n)’ or ‘Localization(l10n)’ functions.<br>• To separate the digits of number literal value.</p><p>To give special meanings and functions to name of variables or functions<br>• _single_leading_underscore: weak “internal use” indicator, declaring private variables, functions, methods and classes in a module. Anything with this convention are ignored in from module import *.<br>• single_trailing_underscore_: used by convention to avoid conflicts with Python keyword<br>• <strong>double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, </strong>boo becomes _FooBar<strong>boo; see <a href="#designing-for-inheritance">Designing for inheritance</a>)<br>• </strong>double_leading_and_trailing_underscore<strong>: “magic” objects or attributes that live in user-controlled namespaces. E.g. </strong>init<strong>, </strong>import<strong> or </strong>file__. Never invent such names; only use them as documented. See <a href="#magic-attributes">Magic Attributes</a></p><h3 id="Designing-for-inheritance"><a href="#Designing-for-inheritance" class="headerlink" title="Designing for inheritance"></a><a href="https://www.python.org/dev/peps/pep-0008/#id49" target="_blank" rel="noopener">Designing for inheritance</a></h3><p>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name.<br>• Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions.<br>• Note 2: Name mangling can make certain uses, such as debugging and <strong>getattr</strong>(), less convenient. However the name mangling algorithm is well documented and easy to perform manually.<br>• Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers.</p><h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a><a href="https://docs.python.org/2/howto/descriptor.html" target="_blank" rel="noopener">Descriptor</a></h3><h3 id="Magic-Attributes"><a href="#Magic-Attributes" class="headerlink" title="Magic Attributes"></a><a href="https://docs.python.org/2/library/stdtypes.html#special-attributes" target="_blank" rel="noopener">Magic Attributes</a></h3><p><code>__init__</code> for initialization purpose.</p><p><a href="https://docs.python.org/2/library/stdtypes.html#object.__dict__" target="_blank" rel="noopener"><code>object.__dict__</code></a>: A dictionary or other mapping object used to store an object’s (writable) attributes. Basically it contains all the attributes which describe the object under question. It can be used to alter or read the attributes.  </p><p><code>__call__</code></p><h2 id="Solving-Problem"><a href="#Solving-Problem" class="headerlink" title="Solving Problem"></a>Solving Problem</h2><p>A general process to solve problem with three steps: understand, specify and design.<br>1, Start with a vague understanding that you refine into a formal specification of a problem. In this step you want to take inventory of the concepts you are dealing with.<br>2, Specify how this problem can be made amenable to being coded. What is the input and output? What output is desirable?<br>3, Design working code</p><p>?? —-(1 Vague Understanding)–&gt;Formal specification of a problem —(2 Specify)—&gt;Amendable specification—(3 Design)—&gt;Working Code</p><h2 id="Program-Design-and-Development"><a href="#Program-Design-and-Development" class="headerlink" title="Program Design and Development"></a>Program Design and Development</h2><h3 id="Dimensions-of-programming"><a href="#Dimensions-of-programming" class="headerlink" title="Dimensions of programming"></a>Dimensions of programming</h3><ul><li>Correctness, Efficiency, Features, Elegance</li><li>Each part takes time, learn to make Tradeoff:<ul><li>During the process, generally Correctness comes first.<ul><li>Test</li></ul></li><li>But pursuing the 100% Correctness is not the best choice.</li><li>There is a balance of tradeoff, and sometimes saving some time and efforts to improving the Efficiency or adding more Features may be a better option.</li><li>Elegance is good for maintaining and improving the program, which means saving for the future. <strong>Refactoring</strong> - moving along the Elegance direction without changing the other dimensions.<ul><li>DRY: don’t repeat yourself</li><li>Reuse: save time and code lines, also reduce the possibility of mistake<h3 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a><a href="https://docs.python.org/3.5/tutorial/controlflow.html#intermezzo-coding-style" target="_blank" rel="noopener">Coding Style</a></h3>For Python, <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008</a> has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Here are the most important points extracted:</li></ul></li></ul></li><li><p>Use 4-space indentation, and no tabs.</p><p> 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.</p></li><li><p>Wrap lines so that they don’t exceed 79 characters.</p><p> This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.</p></li><li><p>Use blank lines to separate functions and classes, and larger blocks of code inside functions.</p></li><li><p>When possible, put comments on a line of their own.</p></li><li><p>Use <a href="#docstring">docstrings</a>.</p></li><li><p>Use spaces around operators and after commas, but not directly inside bracketing constructs: <code>a = f(1, 2) + g(3, 4)</code>.</p></li><li><p>Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use self as the name for the first method argument (see <a href="https://docs.python.org/3.5/tutorial/classes.html#tut-firstclasses" target="_blank" rel="noopener">A First Look at Classes</a> for more on classes and methods).</p></li><li><p>Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.</p></li><li><p>Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</p></li></ul><h3 id="Docstring"><a href="#Docstring" class="headerlink" title="Docstring"></a>Docstring</h3><p>An easy way to associate documentation with a function.</p><ul><li>Documentation Strings conventions<ul><li>The first line should always be a short, concise summary of the object’s purpose.</li><li>The second line should be blank</li><li>The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li></ul></li><li><p>The following Python file shows the declaration of docstrings within a Python source file:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;Assuming this is file mymodule.py, then this string, being thefirst statement in the file, will become the &quot;mymodule&quot; module&apos;sdocstring when the file is imported.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class MyClass(object):</span><br><span class="line">    &quot;&quot;&quot;The class&apos;s docstring&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def my_method(self):</span><br><span class="line">        &quot;&quot;&quot;The method&apos;s docstring&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def my_function():</span><br><span class="line">    &quot;&quot;&quot;The function&apos;s docstring&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>The following is an interactive session showing how the docstrings may be accessed:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import mymodule&gt;&gt;&gt; help(mymodule)</span><br><span class="line"></span><br><span class="line">Assuming this is file mymodule.py then this string, being thefirst statement in the file will become the mymodule modulesdocstring when the file is imported</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; help(mymodule.MyClass)The class&apos;s docstring&gt;&gt;&gt; help(mymodule.MyClass.my_method)The method&apos;s docstring&gt;&gt;&gt; help(mymodule.my_function)The function&apos;s docstring&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>It is important that each part of the specification gets turned into a piece of code that implements it and a test that tests it.</p><ul><li>Extreme values<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a><a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" target="_blank" rel="noopener">assert</a></h3>Insert debugging assertions into a program. Assertions are not a substitute for unit tests or system tests, but rather a complement.</li><li><a href="http://wiki.python.org/moin/UsingAssertionsEffectively" target="_blank" rel="noopener">Using Assertions Effectively</a><ul><li>Places to consider putting assertions:<ul><li>checking parameter types, classes, or values</li><li>checking data structure invariants</li><li>checking “can’t happen” situations (duplicates in a list, contradictory state variables.)</li><li>after calling a function, to make sure that its return is reasonable<h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3></li></ul></li></ul></li><li>Tracking time<br> Track which part of the code is the bottle neck of efficiency<ul><li>>&gt; python -m cProfile file.py</li><li><code>import cProfile</code>, <code>cProfile.run(&#39;test()&#39;)</code></li></ul></li></ul><h2 id="Aspect-oriented-programming"><a href="#Aspect-oriented-programming" class="headerlink" title="Aspect-oriented programming"></a>Aspect-oriented programming</h2><ul><li>correct</li><li>efficiency<ul><li><a href="#time">Tracking time</a>: to find out the bottle neck function or algorithm</li><li>Rethinking the implementation of the bottle neck<ul><li>Fewer</li><li>Easier/smaller: <a href="https://github.com/ShootingSpace/Guide-to-Computer-Science/blob/master/Note%20-%20CS106B%20Stanford%20Programming%20Abstractions.md#divide-and-conquer" target="_blank" rel="noopener">Divide and Conquer</a></li></ul></li></ul></li><li>debugging<br>Each part is done with some line of codes. Instead of mix different part of the code together, it would be better to define them as different function/class. Try to seperate them as much as possible.</li></ul><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>There are many special and useful function implementation and control flow in python: lambda, map, filter, reduce, generator, etc..</p><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>λ, istead of defining function with <code>def</code> and a specific function name, Lambda provide a convinent way to define a function using its own native logic and methematical expression.<br>The benifits are<br>• A small function could be defined wihtin the same code structure without seperating out a specific <code>def</code> function<br>• Without bothering creating any proper funciton name for a small anonymous function.</p><p>Lambda implementation<br>1, Like nested function definitions, lambda functions can reference variables from the containing scope, returning a function from another function. This is often used to create <strong>function wrappers</strong>, such as Python’s decorators.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uses a lambda expression to return a function</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_incrementor</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = make_incrementor(<span class="number">42</span>)  <span class="comment"># f is declared as a lambda function "lambda x: x+42" with parameter n = 42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>) <span class="comment"># call f with x=0 to return the</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)</span><br><span class="line"><span class="number">43</span></span><br></pre></td></tr></table></figure></p><p>This is like creating a compiler to save process cost: some parameters like default values or initial values are compiled into the compiler, program process these parameter only once, then this compiler as a function could be called many times with other input parameters which varies every time the compiler is being called(like user input values).</p><p>2, Pass a small function as an argument, sorting or max by an alternate key<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [(<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">2</span>, <span class="string">'two'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">4</span>, <span class="string">'four'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs</span><br><span class="line">[(<span class="number">4</span>, <span class="string">'four'</span>), (<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">2</span>, <span class="string">'two'</span>)]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l =[(<span class="string">'x'</span>,<span class="number">2</span>),(<span class="string">'y'</span>,<span class="number">4</span>),(<span class="string">'z'</span>,<span class="number">0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(l, key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'z'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Lambda with logic control flow<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lambda x,y: <span class="keyword">False</span> <span class="keyword">if</span> x&lt;y <span class="keyword">else</span> x+y</span><br></pre></td></tr></table></figure></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a><a href="https://docs.python.org/2/library/functions.html#filter" target="_blank" rel="noopener">Filter</a></h3><p>Construct a list from the elements of an iterable for which function returns <strong>true</strong>. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list.</p><ul><li><code>filter(function, iterable)</code> equals to<ul><li>if function is <code>None</code>:  <code>[item for item in iterable if item]</code></li><li>if not: <code>[item for item in iterable if function(item)]</code></li></ul></li><li><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])</code> &gt;&gt;&gt; <code>[3, 6, 9]</code></li><li>See <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilter" target="_blank" rel="noopener">itertools.ifilter()</a> and <a href="https://docs.python.org/2/library/itertools.html#itertools.ifilterfalse" target="_blank" rel="noopener">itertools.ifilterfalse()</a> for iterator versions of this function, including a variation that filters for elements where the function returns false.</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><a href="https://docs.python.org/2/library/functions.html#map" target="_blank" rel="noopener">Map</a></h3><p>Apply function to every item of iterable and <strong>return a list</strong> of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x % 2, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">&gt;&gt;&gt; [1, 0, 1, 0, 1, 0, 1, 0, 1]</span><br></pre></td></tr></table></figure></p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a><a href="https://docs.python.org/2/library/functions.html#reduce" target="_blank" rel="noopener">Reduce</a></h3><p>Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</span><br><span class="line">Out[1]: 15 # ((((1+2)+3)+4)+5)</span><br><span class="line">In [1]: reduce(lambda a, b: &apos;&#123;&#125;, &#123;&#125;&apos;.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line">Out[1]: &apos;1, 2, 3, 4, 5, 6, 7, 8, 9&apos;</span><br></pre></td></tr></table></figure></p><h3 id="List-Dict-Set-Comprehensions"><a href="#List-Dict-Set-Comprehensions" class="headerlink" title="List/Dict/Set Comprehensions"></a>List/Dict/Set Comprehensions</h3><ul><li>List comprehensions: <code>[ s for r, s in cards if r in &#39;JQK&#39; ]</code></li><li>Dictionary comprehensions: <code>{x: x ** 2 for x in range(5) if x % 2 == 0}</code></li><li>Set comprehensions: <code>{int(sqrt(x)) for x in range(30)}</code></li><li>And in general, we can have any number of for statements, if statements, more for statements, more if statements. The whole is read from left to right</li></ul><h3 id="Generator-Expressions"><a href="#Generator-Expressions" class="headerlink" title="Generator Expressions"></a><a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" target="_blank" rel="noopener">Generator Expressions</a></h3><p>Unlike the for loop in the list comprehensions which walk through the whole loop, generator will walk one step in the for loop if a <code>next()</code> is called.</p><ul><li>The advantage is<ul><li>less indentation</li><li>stop the loop early</li><li>easier to edit</li></ul></li><li>Implementation of generator: <code>g = (sq(x) for x in range(10) if x%2 == 0).</code>  <ul><li>The generator function is a promise, but no computation has been done yet.</li><li><code>next(g)</code> to call a one-time calculation.</li><li>When reaching the end of for-loop in the generator, the <code>next(g)</code> comment will return a false called “StopIteration”.</li><li>To avoid the “StopIteration” false<ul><li>Use a outer for statement: <code>for xx in g: ...</code></li><li>convert the generator to list: <code>list(g)</code></li></ul></li></ul></li></ul><h3 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h3><p>Using a yield expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.</p><ul><li><a href="https://docs.python.org/2/reference/expressions.html#yield-expressions" target="_blank" rel="noopener">Yield expressions</a><br> The yield expression is only used when defining a generator function, and can only be used in the body of a function definition.</li><li><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html" target="_blank" rel="noopener">Yield implementation</a></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ints</span><span class="params">(start, end=None)</span>:</span></span><br><span class="line">    i = start</span><br><span class="line">    <span class="keyword">while</span> i &lt;= end <span class="keyword">or</span> end <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></span><br><span class="line">     n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">     <span class="keyword">while</span> n &lt; max:</span><br><span class="line">          <span class="keyword">yield</span> b</span><br><span class="line">          <span class="comment"># print b</span></span><br><span class="line">          a, b = b, a + b</span><br><span class="line">          n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>The true beneath <code>For Statemet</code> is <strong>iterable</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itmes:</span><br><span class="line">     <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure></p><p>What the whole truth is:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it = iter(items)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">         x = next(it)</span><br><span class="line">         <span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>Overall, Python calls the thing that can be iterated over in a for loop an iterable. Strings and lists are examples of iterables, and so are generators.</p><p><a href="https://docs.python.org/2/library/itertools.html#module-itertools" target="_blank" rel="noopener">itertools library</a> - Functions creating iterators for efficient looping.<br><code>any(iterable)</code>: Return True if any element of the iterable is true. If the iterable is empty, return False.</p><h3 id="Unpacking-Argument-Lists"><a href="#Unpacking-Argument-Lists" class="headerlink" title="Unpacking Argument Lists"></a><a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" target="_blank" rel="noopener">Unpacking Argument Lists</a></h3><p>The <code>*</code> operator simply unpacks the tuple or list and passes them as the positional arguments to the function.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">3</span>, <span class="number">6</span>))            <span class="comment"># normal call with separate arguments</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(*args))            <span class="comment"># call with arguments unpacked from a list</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><h3 id="Handling-different-types-of-argument-polymorphism"><a href="#Handling-different-types-of-argument-polymorphism" class="headerlink" title="Handling different types of argument (*polymorphism)"></a>Handling different types of argument (*polymorphism)</h3><p>An argument could be different type:<br>   <code>timedcalls(n,fn)</code>, if n is int <code>isinstance(n,int)</code>, it means controling the how many times fn was called, while n is float, it means controling the total runtime of fn called</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a><a href="https://www.python.org/dev/peps/pep-0318/" target="_blank" rel="noopener">Decorator</a></h2><p>Motivation: when applying a transformation to a function <code>def f(self): ...definition...; f = dec(f)</code>, it becomes less readable with longer methods. It also seems less than pythonic to name the function three times for what is conceptually a single declaration.</p><p>The solution is to place the decoration in the function’s declaration:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a><a href="https://www.programiz.com/python-programming/property" target="_blank" rel="noopener">@property</a></h3><p><code>property(fget=None, fset=None, fdel=None, doc=None)</code><br>A property object has three methods, getter(), setter(), and delete() to specify fget, fset and fdel at a later point.</p><p><code>some_object = property(get_some_object,set_some_object)</code> equals to<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some_object = property()  <span class="comment"># make empty property</span></span><br><span class="line">some_object = some_object.getter(get_some_object) <span class="comment"># assign fget</span></span><br><span class="line">some_object = some_object.setter(set_some_object) <span class="comment"># assign fset</span></span><br></pre></td></tr></table></figure></p><p>Decorator as tools<br>• Debug tool: help developping, count calls times, count excecute time<br>• Performance: make the programme faster, such as dynamic programming algorithm<br>• Expressiveness: doc string, explaining funciton<br>• Trace: help to monitor the execution of the program, such as each level result printed with different indentation</p><p>Disable decorator: <code>dec = disabled</code>, make the decorator disabled.</p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="noopener">Regular Expression</a></h2><p><code>import re</code></p><p><a href="http://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html" target="_blank" rel="noopener">Reference: A Regular Expression Matcher</a></p><p>In C language, any number start with ‘0’ is interpreted as an octal number( base-8 number system ):<br>‘012’ -&gt; int 10; ‘09’ -&gt; invalid</p><p><strong>Special characters</strong><br>• <code>*</code> match 0 or more repetitions of the preceding character. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.<br>• <code>?</code> Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’.<br>• <code>.</code> (Dot) matches any single character<br>• <code>^</code> (Caret) Matches the start of the string<br>• <code>$</code> Matches the end of the string or just before the newline at the end of the string, foo matches both ‘foo’ and ‘foobar’, while the regular expression foo$ matches only ‘foo’<br>• <code>+</code> match 1 or more repetitions of the preceding RE. <code>ab+</code> will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’.</p><p><strong>Commonly used expression</strong><br>• Upper case letter <code>&#39;[A-Z]&#39;</code><br>• Any alphanumeric character <code>[a-zA-Z0-9_]</code><br>• Decimal digit <code>[0-9]</code><br>• Non-digit character <code>[^0-9]</code><br>• Whitespace character <code>[ \t\n\r\f\v]</code></p><p><code>search(string[, pos[, endpos]])</code>: Scan through string looking for a location where this regular expression produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern.</p><p><code>re.findall(pattern, string, flags=0)</code>：Return all non-overlapping matches of pattern in string, as a list of strings.</p><h3 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a><a href="https://docs.python.org/2.4/lib/typesseq-strings.html" target="_blank" rel="noopener">String Formatting</a></h3><p>Modulo(<code>%</code>): String and Unicode objects have one unique built-in operation: the <code>%</code> operator (modulo). This is also known as the string formatting or interpolation operator. Given format <code>%</code> values (where format is a string or Unicode object), <code>%</code> conversion specifications in format are replaced with zero or more elements of values.<br><code>%d</code>:    Signed integer decimal.<br><code>%s</code>:    String (converts any python object using str()).<br><code>print &#39;%d: %s&#39; % (1, &#39;animal&#39;)</code> &gt;&gt; <code>1: animal</code></p><h2 id="Python-data-structure"><a href="#Python-data-structure" class="headerlink" title="Python data structure"></a>Python data structure</h2><h3 id="Numpy-indexing"><a href="#Numpy-indexing" class="headerlink" title="Numpy indexing"></a><a href="https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#indexing" target="_blank" rel="noopener">Numpy indexing</a></h3><p>Ellipsis: The same as <code>...</code>. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types. <code>a = [1,2,3], a[...] is actually the same as a</code></p><p>None: extends one more demention by further slicing the corresponding c into smallest units.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = np.arange(<span class="number">27</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>), <span class="comment">#t shape is (3,3,3)</span></span><br><span class="line">t[<span class="keyword">None</span>,].shape <span class="comment"># (1, 3, 3, 3)</span></span><br><span class="line">t[...,<span class="keyword">None</span>].shape <span class="comment"># (3, 3, 3, 1)</span></span><br><span class="line">t[:, <span class="keyword">None</span>,:].shape <span class="comment"># (3, 1, 3, 3)</span></span><br><span class="line">t[:,:, <span class="keyword">None</span>].shape <span class="comment"># (3, 3, 1, 3)</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What you will get from this Python digest:&lt;br&gt;1, Learn advanced python programming.&lt;br&gt;2, Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.&lt;br&gt;3, Practice going from a problem description to a solution, using a series of assignments.&lt;/p&gt;
&lt;p&gt;Reference:&lt;br&gt;• &lt;a href=&quot;https://www.udacity.com/course/design-of-computer-programs--cs212&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CS212 Design of Computer Program @Udacity&lt;/a&gt;, &lt;a href=&quot;https://www.udacity.com/wiki/cs212&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Course Wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Syllabus&lt;br&gt;Lesson 1: How to think to solve problem&lt;br&gt;Lesson 2: Python features; Instrumentation&lt;br&gt;Lesson 3: Build function as tools; Define language; Grammar&lt;br&gt;Lesson 4: Dealing with Complexity Through Search&lt;br&gt;Lesson 5: Dealing with Uncertainty Through Probability&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;• &lt;a href=&quot;https://docs.python.org/3/tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Python Tutorial&lt;/a&gt;&lt;br&gt;• &lt;a href=&quot;http://www.openbookproject.net/thinkcs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Open Book Project: How to Think Like a Computer Scientist: Learning with Python&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Software Testing - Informatics - University of Edinburgh 爱丁堡</title>
    <link href="http://yoursite.com/software-testing/"/>
    <id>http://yoursite.com/software-testing/</id>
    <published>2018-05-05T23:00:00.000Z</published>
    <updated>2018-05-10T16:39:15.633Z</updated>
    
    <content type="html"><![CDATA[<p>软件测试 - 知识点汇总<br>参考<br><a href="http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/index.html" target="_blank" rel="noopener">http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/index.html</a><br>Pezze and Young, Software Testing and Analysis: Process, Principles and Techniques, Wiley, 2007.<br><a id="more"></a></p><h2 id="软件为什么需要测试"><a href="#软件为什么需要测试" class="headerlink" title="软件为什么需要测试?"></a>软件为什么需要测试?</h2><p><strong>1, 软件的漏洞, 错误和失效 Software Faults, Errors &amp; Failures</strong><br>The problem start with Faults,</p><blockquote><p>Fault(BUG): latent error, mistakes in programming.</p></blockquote><p>e.g <code>add(x, y) = x * y</code>.<br>With the Faults in programs, <strong>if and only if</strong> executing <code>add(x, y) = x * y</code>, the fault being activated, and generate an Errors.</p><blockquote><p>Error: An incorrect <strong>internal</strong> state that is the manifestation of some fault</p></blockquote><p>Now we has an effective Error, <strong>if and only if</strong> we use the values from <code>add(x, y) = x * y</code> to contribute to the program function (such as, assign it to some variables), then we get the Failure.</p><blockquote><p>Failure : <strong>External</strong>, observable incorrect behavior with respect to the requirements or other description of the expected behavior.</p></blockquote><p>总结: 软件的漏洞不一定会导致错误, 错误不一定会导致软件失效.</p><p><strong>2, 软件工程需要验证确认</strong></p><blockquote><p>在软件项目管理、软件工程及软件测试中，验证及确认（verification and validation，简称V&amp;V）是指检查软件是否匹配规格及其预期目的的程序。验证及确认也被视为一种软件质量管理，是软件开发过程的一部分，一般归类在软件测试中。</p></blockquote><p>Validation: 是否符合预期的目的，是否满足用户实际需求？</p><p>Verification: meets the specification?</p><p>Verification and Validation （V&amp;V） start at the beginning or even before we decide to build a software product. V&amp;V last far beyond the product delivery as long as the software is in use, to cope with evolution and adaptations to new conditions.</p><p>The distinction between the two terms is largely to do with the role of specifications. Validation is the process of checking whether the specification captures the customer’s needs, while verification is the process of checking that the software meets the specification.<br><img src="/images/VandVtoolbox.jpg" alt="" title="V＆V包含的技术细节。 &quot;modeling&quot; 和 &quot;model checking&quot;指建立和分析软件行为的抽象模型。image from: http://www.easterbrook.ca/steve/2010/11/the-difference-between-verification-and-validation/"></p><p><strong>3, 软件工程的可靠性 Dependability</strong></p><blockquote><p>In software engineering, dependability is the ability to provide services that can defensibly be trusted within a time-period</p></blockquote><p>Assess the readiness of a product.</p><p>Different measures of dependability:<br>• Availability measures the quality of service in terms of running versus down time<br>• Mean time between failures (MTBF) measures the quality of the service in terms of time between failures<br>• Reliability indicates the fraction of all attempted operations that complete successfully</p><h2 id="JUnits"><a href="#JUnits" class="headerlink" title="JUnits"></a>JUnits</h2><p>JUnit Terminology<br>• A test runner is software that runs tests and reports results. Many implementations: standalone GUI, command line, integrated into IDE<br>• A test suite is a collection of test cases.<br>• A test case tests the response of a single method to a particular set of inputs.<br>• A unit test is a test of the smallest element of code you can sensibly test, usually a single class.</p><p>如何使用请参考<a href="/NOTE-CS61B-data-structures-11-testing">Java 测试</a>.</p><p>Test class<br><code>@Before public void init()</code>: Creates a test fixture by creating and initialising objects and values.</p><p><code>@After public void cleanUp()</code>: Releases any system resources used by the test fixture. Java usually does this for free, but files, network connections etc. might not get tidied up automatically.</p><p><code>@Test public void noBadTriangles()</code>, <code>@Test public void scaleneOk()</code>, etc.<br>These methods contain tests for the Triangle constructor and its isScalene() method.</p><p>Test assert<br><code>static void assertTrue(boolean test)</code>,<br><code>static void assertTrue(String message, boolean test)</code>,<br><code>static void assertFalse(boolean test)</code>,<br><code>static void assertFalse(String message, boolean test)</code></p><h2 id="软件测试的核心问题和解决思路"><a href="#软件测试的核心问题和解决思路" class="headerlink" title="软件测试的核心问题和解决思路"></a>软件测试的核心问题和解决思路</h2><p>A key problem in software testing is <strong>selecting and evaluating</strong> test cases.</p><ul><li>Test case: A test case is a set of inputs, execution conditions, and a pass/fail criterion.</li><li><strong>Test case specification</strong> is a requirement to be satisfied by one or more actual test cases.</li><li>Test suite: a set of test cases.</li><li>Adequacy criterion: a predicate that is true (satisfied) or false (not satisfied) of a &lt; program, test suite &gt; pair.</li></ul><p>Adequacy criterion is a set of test obligations, which can be derived from several sources of information, including<br>• specifications (functional and model-based testing)<br>• detailed design and source code (structural testing),<br>• model of system<br>• hypothesized defects (fault-based testing),<br>• security testing.</p><h3 id="Test-Case-Selection-and-Adequacy-Criteria"><a href="#Test-Case-Selection-and-Adequacy-Criteria" class="headerlink" title="Test Case Selection and Adequacy Criteria"></a>Test Case Selection and Adequacy Criteria</h3><p>How do we know when the test suite is enough?<br>It is impossibal to provide adequate test suite for a system to pass. Instead, <strong>design rules to highlight inadequacy of test suites</strong>: if outcome break the rule, then there is bugs, if not, then not sure…</p><p>Test case specification: a requirement to be satisfied by one or more test cases.</p><p>Test obligation: a partial test case specification, requiring some property deemed important to thorough testing. From:<br>• Functional (black box specification Functional (black box, specification based): from software specifications<br>• Structural (white or glass box): from code<br>• Model-based: from model of system, models used in specification or design, or derived from code<br>• Fault-based: from hypothesized faults (common bugs)</p><p>Adequacy criterion: set of test obligations, a predicate that is true (satisfied) or false (not satisfied) of a (program, test suite) pair.</p><p>A test suite satisfies an adequacy criterion if:<br>• all the tests succeed (pass)<br>• every test obligation in the criterion is satisfied by at least one of the test cases in the test suite.</p><h3 id="Satisfiability"><a href="#Satisfiability" class="headerlink" title="Satisfiability"></a>Satisfiability</h3><p>Sometimes no test suite can satisfy a criterion for a given program, e.g. defensive programming style includes “can’t happen” sanity checks.</p><p>Coping with Unsatisfiability:<br>Approach A, exclude any unsatisfiable obligation from the criterion.<br>• Example: modify statement coverage to require execution only of statements that can be executed - But we can’t know for sure which are executable!</p><p>Approach B, measure the extent to which a test suite approaches an adequacy criterion<br>• Example: if a test suite satisfies 85 of 100 obligations we have reached 85% coverage.</p><p>An adequacy criterion is satisfied or not, a coverage measure is the fraction of satisfied obligations</p><h3 id="Subsumption-relation"><a href="#Subsumption-relation" class="headerlink" title="Subsumption relation"></a>Subsumption relation</h3><p>Test adequacy criterion A subsumes test adequacy criterion B iff, for every program P, every test suite satisfying A with respect to P also satisfies B with respect to P.</p><p>e.g. Exercising all program branches (branch coverage) subsumes exercising all program statements</p><h2 id="Functional-Testing"><a href="#Functional-Testing" class="headerlink" title="Functional Testing"></a>Functional Testing</h2><p>Design functional test case: Generate test cases from specifications.</p><p>Specification: A <strong>functional specification</strong> is a description of intended program behavior.</p><p>Not based on the internals of the code but program specifications, functional testing is also called <strong>specification-based</strong> or <strong>black-box testing 黑箱測試</strong>.</p><p>The core of functional test is systematic selection of test cases: <strong>partitioning</strong> the possible behaviors of the program into a finite number of homogeneous classes, where each such class can reasonably be expected to be consistently correct or incorrect. Test each category and boundaries between (experience suggests failures often lie at the boundaries).</p><blockquote><p><strong>Functional test case design</strong> is an indispensable base of a good test suite, complemented but never replaced by <strong>structural and fault-based testing</strong>, because there are classes of faults that only functional testing effectively detects. Omission of a feature, for example, is unlikely to be revealed by techniques that refer only to the code structure.</p></blockquote><h3 id="Partition-Strategies"><a href="#Partition-Strategies" class="headerlink" title="Partition Strategies"></a>Partition Strategies</h3><p>Failures are sparse in the whole input space, and dense in some specific regions, justified based on specification.</p><p><strong>Random</strong> (uniform):<br>• Pick possible inputs uniformly<br>• Avoids designer bias: The test designer can make the same logical mistakes and bad assumptions as the program designer (especially if they are the same person)<br>• But treats all inputs as equally valuable</p><p><strong>Systematic</strong> (non-uniform, Partition Testing Strategies):<br>• Try to select inputs that are especially valuable<br>• Usually by choosing representatives of classes that are apt to fail often or not at all<br>• (Quasi-)Partition: separates the input space into classes whose union is the entire space (classes may overlap), sampling each class in the quasi-partition selects at least one input that leads to a failure, revealing the fault.</p><p>Steps of systematic approaches to form test cases from specifications:<br>1, Decompose the specification. If the specification is large, break it into independently testable features (ITF) to be considered in testing:<br>• An ITF is a functionality that can be tested independently of other functionalities of the software under test. It need not correspond to a unit or subsystem of the software.<br>• ITFs are described by identifying all the inputs that form their execution environments.<br>• ITFs are applied at different granularity levels, from unit testing through integration and system testing. The granularity of an ITF depends on the exposed interface and whichever granularity(unit or system) is being tested.<br>2, Identify Representative Classes of Values or Derive a Model<br>• Representative values of each input<br>• Representative behaviors of a model: simple input/output transformations don’t describe a system. We use models in program specification, in program design, and in test design<br>3, Generate Test Case Specifications with constraints: The test case specifications represented by the <strong>combinations</strong> (cartesian product) of all possible inputs or model behaviors, which must be restricted by ruling out illegal combinations and selecting a practical subset of the legal combinations.</p><p>Given a specification, there may be one or more techniques well suited for deriving functional test case. For example, the presence of several constraints on the input domain may suggest using a partitioning method with constraints, such as the <a href="#category-partition">category-partition method</a>. While unconstrained combinations of values may suggest a <a href="#pairwise-combination-testing">pairwise combinatorial approach</a>. If transitions among a finite set of system states are identifiable in the specification, a finite state machine approach may be indicated.</p><h3 id="Combinatorial-approaches"><a href="#Combinatorial-approaches" class="headerlink" title="Combinatorial approaches"></a>Combinatorial approaches</h3><blockquote><p>Combinatorial approaches to functional testing consist of a manual step of structuring the specification statement into a set of properties or attributes that can be <strong>systematically varied</strong> and an automatizable step of producing combinations of choices.</p></blockquote><p>总体思路：<br>1, Identify <strong>distinct</strong> attributes that can be varied: the data, environment, or configuration<br>2, Systematically generate combinations to be tested</p><p>Rational: test cases should be varied and include possible “corner cases”</p><p><strong>Environment</strong> describes external factors we need to configure in particular ways in order to specify and execute tests to fully exercise the system. Some common options: System memory, Locale.</p><p>There are three main techniques that are successfully used in industrial environments and represent modern approaches to systematically derive test cases from natural language specifications:<br>• category-partition approach to identifying attributes, relevant values, and possible combinations;<br>• Pairwise (n-way) combination test a large number of potential interactions of attributes with a relatively small number of inputs;<br>• provision of catalogs to systematize the manual aspects of combinatorial testing.</p><p>Combinatorial approaches 将test cases的粗暴合成分解成一个个步骤，通过解析和综合那些可以量化和监控(并得到工具部分支持)的活动来逐步拆解问题.</p><p>A combinatorial approach may work well for functional units characterized by a large number of <strong>relatively independent inputs</strong>, but may be less effective for functional units characterized by complex interrelations among inputs.</p><p>Category-partition 和 pairwise partition 都是使用上面的总体思路，差别在于最后如何自动生成 test cases。</p><h4 id="Category-partition"><a href="#Category-partition" class="headerlink" title="Category-partition"></a>Category-partition</h4><p>将穷举枚举作为自动生成combinations的基本方法，同时允许测试设计者添加限制组合数量增长的约束条件。当这些约束能够反映应用域中的真实约束（例如，category-partition中的”error”条目）时，能够非常有效地消除许多冗余组合。</p><ol><li>Decompose the specification into independently testable features<ul><li>for each feature: identify parameters, environment elements</li><li>for each parameter and environment element: identify elementary characteristics (categories)</li></ul></li><li>Identify relevant/representative values: for each category identify  representative (classes of) values<ul><li>normal values</li><li>boundary values<ul><li>select extreme values within a class ((e.g., maximum and minimum legal values)</li><li>select values outside but as close as possible to the class</li><li>select interior (non-extreme) values of the class</li></ul></li><li>special values: 0 and 1, might cause unanticipated behavior alone or in combination with particular values of other parameters.</li><li>error values: values outside the normal domain of the program</li><li>Ignore interactions among values for different categories (considered in the next step)</li></ul></li><li>Introduce constraints: rule out invalid combinations. For single consgtraints, indicates a value class that test designers choose to test only once to reduce the number of test cases.</li></ol><p>优点：Category partition testing gave us systematic approach -Identify characteristics and values (the creative step), generate combinations (the mechanical step).</p><p>缺点：test suite size grows very rapidly with number of categories.</p><p>不适合使用Category partition testing的情况：当缺乏应用领域的实际约束时，测试设计者为了减少组合数量被迫任意添加的约束（例如，”single”条目），此时不能很有效的减少组合数量。</p><h4 id="Pairwise-combination-testing"><a href="#Pairwise-combination-testing" class="headerlink" title="Pairwise combination testing"></a>Pairwise combination testing</h4><p>Most failures are triggered by single values or combinations of a few values.</p><p>为n个测试类选择组合时，除了简单地枚举所有可能的组合外，更实际的组合方案是在集合n中取出k(<code>k&lt;n</code>)项, 一般是二元组或三元组，总的 test cases 要包含所有 features 的两两（或三三）组合。生成测试用例时，先控制某一个变量逐一改变，记录配对了的变量，后续遇到重复的就可以忽略。这样即使没有加constraints也可以大大减少组合数（但我们也可以加constraints）。</p><p>使用低阶组合构建测试用例时，可能会遗漏某些高阶组合的情况。</p><h3 id="Befinits-of-functional-testing"><a href="#Befinits-of-functional-testing" class="headerlink" title="Befinits of functional testing"></a>Befinits of functional testing</h3><p>Functional testing is the base-line technique for designing test cases:<br>• Timely: Often useful in refining specifications and assessing testability before code is written<br>• Effective: finds some classes of fault (e.g.,missing logic) that can elude other approaches<br>• Widely applicable: to any description of program behavior serving as spec,  at any level of granularity from module to system testing.<br>• Economical: typically less expensive to design and execute than structural (code-based) test cases</p><p>Early functional testing design:<br>• Program code is not necessary: Only a description of intended behavior is needed<br>• Often reveals ambiguities and inconsistency in spec<br>• Useful for assessing testability, and improving test schedule and budget by improving spec<br>• Useful explanation of specification, or in the extreme case (as in Extreme Programming), test cases are the spec</p><h2 id="Finite-Models"><a href="#Finite-Models" class="headerlink" title="Finite Models"></a>Finite Models</h2><p>建模主要解决两个工程问题:<br>• 首先，不能等到实际的产品出来后才分析和测试。<br>• 其次，对实际产品进行彻底的测试是不切实际的，无论是否受制于所有可能的状态和输入。</p><p>模型允许我们在开发早期就着手分析，并随着设计的发展重复分析，并允许我们应用比实际情况更广泛的分析方法。更重要的是，这些分析很多都是可以自动化的。</p><p>Model program execution, emphasized control.</p><blockquote><p>A model is a representation that is simpler than the artifact it represents but preserves (or at least approximates) some important attributes of the actual artifact.</p></blockquote><p>A good model is:<br>• compact: A model must be representable and manipulable in a reasonably compact form.<br>• Predictive: well enough to distinguish between “good” and “bad” outcomes of analysis.<br>• Semantically meaningful: interpret analysis results in a way that permits diagnosis of the causes of failure.<br>• Sufficiently general: Models intended for analysis of some important characteristic must be general enough for practical use in the intended domain of application.</p><p>模型的表达：使用有向图描述程序模型。通常我们将它们绘制为”方框和箭头”图，由一组节点N的组成的集合和它们间的关系E（即ordered pairs的集合），edges。节点表示某种类型的实体，例如源代码的步骤，类或区域。边表示实体之间的某种关系。</p><p>模拟程序执行的模型，是该程序状态空间的抽象。通过抽象函数，程序运行状态空间中的状态与程序运行的finite state 模型中的状态相关联。但抽象函数无法完美呈现程序运行的所有细节，将实际的无限可能的状态折叠成有限必然需要省略一些信息，这就引入了不确定性nondeterminism。</p><p>有什么软件模型的基本概念，又有哪些可以应用于测试和分析的模型？</p><h3 id="Controal-flow-graph"><a href="#Controal-flow-graph" class="headerlink" title="Controal flow graph"></a>Controal flow graph</h3><p>程序中的单个步骤或方法的 Control flow 可以用 <strong>过程内流程图 intraprocedural control flow graph (CFG)</strong> 来表示. CFG 模拟通过<strong>单个过程或方法</strong>的可能运行路径, 是一个有向图，nodes 表示源代码的一个个区域，有向边 directed edges 表示程序可以在哪些代码区域间流转.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">collapseNewlines</span><span class="params">(String argStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> last = argStr.charAt(<span class="number">0</span>);</span><br><span class="line">    StringBuffer argBuf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cIdx = <span class="number">0</span> ; cIdx &lt; argStr.length(); cIdx++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = argStr.charAt(cIdx);</span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="string">'\n'</span> || last != <span class="string">'\n'</span>) &#123;</span><br><span class="line">            argBuf.append(ch);</span><br><span class="line">            last = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> argBuf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>左边是上面代码对应的CFG，右边的表格是Linear Code Sequence and Jump (LCSJ)，表示从一个分支到另一个分支的控制流程图的子路径<br><img src="/images/cfg.jpg" alt="" title="Derive from code, not specifications. image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch05.pdf"></p><p>Nodes = regions of source code (basic blocks)<br>• Basic block = maximal program region with a single entry and single exit point<br>• Often statements are grouped in single regions to get a compact model<br>• Sometime single statements are broken into more than one node to model control flow within the statement<br>Directed edges = possibility that program execution proceeds from the end of one region directly to the beginning of another</p><p>为了便于分析，控制流程图通常会通过其他信息进一步加持。例如，后面介绍的数据流模型 data flow models 就是基于加持了有关变量被程序各个语句访问和修改的信息的CFG模型构建的.</p><h3 id="Call-Graphs"><a href="#Call-Graphs" class="headerlink" title="Call Graphs"></a>Call Graphs</h3><p>过程间流程 Interprocedural control flow 也可以表示为有向图。最基本的模型是调用图 call graphs, nodes represent procedures (methods, C functions, etc.) and edges represent the “calls” relation.</p><p>相较于CFG，调用图比有更多设计问题和权衡妥协， 因此基本调用图的表达方式是不固定的，特别是在面向对象的语言中，methods跟对象动态绑定。<br>调用图存在Overapproximation现象，比如尽管方法<code>A.check()</code>永远不会实际调用<code>C.foo()</code>，但是一个典型的调用图会认为这个调用是可能的。</p><p><strong>Context-sensitive call graph</strong>：调用图模型根据过程被调用的具体位置来表示不同行为。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Context c = <span class="keyword">new</span> Context();</span><br><span class="line">        c.foo(<span class="number">3</span>);</span><br><span class="line">        c.bar(<span class="number">17</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] myArray = <span class="keyword">new</span> <span class="keyword">int</span>[ n ];</span><br><span class="line">        depends( myArray, <span class="number">2</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] myArray = <span class="keyword">new</span> <span class="keyword">int</span>[ n ];</span><br><span class="line">        depends( myArray, <span class="number">16</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">depends</span><span class="params">( <span class="keyword">int</span>[] a, <span class="keyword">int</span> n )</span> </span>&#123;</span><br><span class="line">        a[n] = <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/call_graphs_contex.jpg" alt="" title="Contex Insensitive vs. Sensitive Call graphs"></p><p>Context sensitive analyses can be more precise than Context-insensitive analyses when the model includes some additional information that is shared or passed among procedures. But sensitive call graphs size grows exponentially, not fit for large program.</p><h3 id="Finite-state-machines"><a href="#Finite-state-machines" class="headerlink" title="Finite state machines"></a>Finite state machines</h3><p>前面介绍的模型都是都是基于源代码抽象出来的。不过，模型的构建也常常先于或者独立于源代码，有限状态机 finite state machines 就是这种模型。</p><blockquote><p>有限状态机（finite-state machine，FSM）又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</p></blockquote><p>最简单的FSM由一个有限的状态集合和状态间的转移动作构成，可以有向图表示，节点表示状态，edges表示在状态间的转移需要的运算、条件或者事件。因为可能存在无限多的程序状态，所以状态节点的有限集合必须是具体编程状态的抽象。</p><p>Usually we label the edge to indicate a program operation, condition, or event associated with the transition. We may label transitions with both an external event or a condition and with a program operation that can be thought of as a “response” to the event. Such a finite state machine with event/response labels on transitions is called a Mealy machine.</p><blockquote><p>In the theory of computation, a <strong>Mealy machine</strong> is a finite-state machine whose output values are determined both by its current state and the current inputs. (This is in contrast to a <strong>Moore machine</strong>, whose output values are determined solely by its current state.)</p></blockquote><p>An alternative representation of finite state machines, including Mealy machines, is the state transition table:<br><img src="/images/FSM_state_transition_table.png" alt="" title="Could be constructed from features. image from: Pezze and Young, Software Testing and Analysis: Process, Principles and Techniques, Wiley, 2007."><br>There is one row in the transition table for each state node and one column for each event or input. If the FSM is complete and deterministic, there should be exactly one transition in each table entry. Since this table is for a Mealy machine, the transition in each table entry indicates both the next state and the response (e.g., d / emit means “emit and then proceed to state d”).</p><h2 id="Structural-Testing"><a href="#Structural-Testing" class="headerlink" title="Structural Testing"></a>Structural Testing</h2><p>Judging test suite thoroughness based on the structure of the program itself, it is still testing product functionality against its specification, but the measure of thoroughness has changed to <strong>structural criteria</strong>. Also known as “white-box”, “glass-box”, or “codebased” testing.</p><p>Motivation:<br>1, If part of a program is not executed by any test case in the suite, faults in that part cannot be exposed. The <strong>part</strong> is a control flow element or combination, statements (or CFG nodes), branches (or CFG edges), fragments and combinations, conditions paths.<br>2, Complements functional testing, another way to recognize cases that are treated differently<br>3, Executing all control flow elements does not guarantee finding all faults: Execution of a faulty statement may not always result in a failure<br>• The state may not be corrupted when the statement is executed with some data values<br>• Corrupt state may not propagate through execution to eventually lead to failure<br>4, Structural coverage: Increases confidence in thoroughness of testing, removes some obvious inadequacies</p><p>Steps:</p><ol><li>Create functional test suite first, then measure structural coverage to identify see what is missing</li><li>Interpret unexecuted elements<ul><li>may be due to natural differences between specification and implementation</li><li>or may reveal flaws of the software or its development process<ul><li>inadequacy of specifications that do not include cases present in the implementation</li><li>coding practice that radically diverges from the specification</li><li>inadequate functional test suites</li></ul></li></ul></li></ol><p>Coverage measurements are convenient progress indicators, sometimes used as a criterion of completion.</p><h3 id="Control-flow-Adequacy-expression-coverage"><a href="#Control-flow-Adequacy-expression-coverage" class="headerlink" title="Control-flow Adequacy (expression coverage)"></a>Control-flow Adequacy (expression coverage)</h3><p>A structural testing strategy that uses the program’s control flow as a model. Control flow elements include statements, branches, conditions, and paths.</p><p>But a set of correct program executions in which all control flow elements are exercised does not guarantee the absence of faults.</p><p>Test based on control-flow are concerned with expression coverage.</p><h3 id="Statement-testing"><a href="#Statement-testing" class="headerlink" title="Statement testing"></a>Statement testing</h3><p>Adequacy criterion: each statement (or node in the CFG) must be executed at least once. Because a fault in a statement can only be revealed by executing the faulty statement.</p><p>Coverage: <code>#(executed statements) / #(statements)</code></p><p>Minimizing test suite size is seldom the goal, but small test cases make failure diagnosis easier.</p><p>Complete statement coverage may not imply executing all branches in a program.</p><h3 id="Branch-testing"><a href="#Branch-testing" class="headerlink" title="Branch testing"></a>Branch testing</h3><p>Adequacy criterion: each branch (edge in the CFG) must be executed at least once.</p><p>Coverage: <code>#(executed branches) / #(branches)</code><br>Traversing all edges of a graph causes all nodes to be visited: test suites that satisfy the branch adequacy criterion for a program P also satisfy the statement adequacy criterion for the same program</p><p>But “All branches” can still miss conditions.<br>Sample fault: missing operator (negation):<code>digit_high == 1 || digit_low == -1</code>, branch adequacy criterion can be satisfied by varying only part of the condition.</p><h3 id="Condition-testing"><a href="#Condition-testing" class="headerlink" title="Condition testing"></a>Condition testing</h3><p>Basic condition adequacy criterion: each basic condition must be executed at least once.</p><p>Coverage: <code>#(truth values taken by all basic conditions) / 2 * #(basic conditions)</code></p><p>Branch and basic condition are not comparable. Basic condition adequacy criterion can be satisfied without satisfying branch coverage</p><p>Branch and condition adequacy: cover all conditions and all decisions</p><p><strong>Compound condition adequacy</strong>:<br>• Cover all possible evaluations of compound conditions - A compound condition is either an atomic condition or some boolean formula of atomic conditions. For example, in the overall condition “<code>A || (B &amp;&amp; C)</code>“ the set of compound conditions are “A”, “B”, “<code>C&quot;, &quot;B &amp;&amp; C</code>“, “<code>A || (B &amp;&amp; C)</code>“.<br>• Cover all branches of a decision tree.<br>• Number of test cases grows exponentially with the number of basic conditions in a decision ($2^N$).</p><p>练习 - Write tests that provide statement, branch, and basic condition coverage over the following code:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(string A[], <span class="keyword">int</span> N, string what)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((N == <span class="number">1</span>) &amp;&amp; (A[<span class="number">0</span>] == what))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (N &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; N)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[index] == what) <span class="keyword">return</span> index;</span><br><span class="line">            <span class="keyword">else</span> index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先画出 CFG 图，再遍历：<img src="/images/Structural_testin_答案.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Activity.pdf"></p><h3 id="Modified-condition-decision-adequacy-criterion-MC-DC"><a href="#Modified-condition-decision-adequacy-criterion-MC-DC" class="headerlink" title="Modified condition/decision adequacy criterion (MC/DC)"></a>Modified condition/decision adequacy criterion (MC/DC)</h3><p>Motivation: Effectively test <strong>important combinations</strong> of conditions, without exponential blow up in test suite size. (<strong>Important combinations</strong>: Each basic condition shown to independently affect the outcome of each decision)</p><p>假如这些组合表明每一个条件都可以独立影响结果，那么就不要穷尽各种条件组合了，对于那些不影响结果的条件组合，测了也没有意义。</p><p>Requires:<br>• For each basic condition $C_i$, two test cases<br>• 控制变量，只改变 $C_i$：values of all evaluated conditions except $C_i$ are the same<br>• Compound condition as a whole evaluates to <code>True</code> for one and <code>False</code> for the other，结果的改变表明 $C_i$ 可以独立影响结果</p><p><img src="/images/MC_DC.png" alt="" title="每一个条件的下划线组合表明该条件独立地影响结果。 image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch12.pdf."></p><p>MC/DC:<br>• basic condition coverage (C)<br>• branch coverage (DC)<br>• plus one additional condition (M): every condition must independently affect the decision’s output</p><p>It is subsumed by compound conditions and subsumes all other criteria discussed so far - stronger than statement and branch coverage. A good balance of thoroughness and test size (and therefore widely used).</p><h3 id="Path-Testing"><a href="#Path-Testing" class="headerlink" title="Path Testing"></a>Path Testing</h3><p>Sometimes, a fault is revealed only through exercise of some sequence of decisions (i.e., a particular path through the program).</p><p>Path coverage requires that all paths through the CFG are covered. In theory, path coverage is the ultimate coverage metric. But in practice, it is impractical if there is loop involed.</p><p>Adequacy criterion: each path must be executed at least once:<br>Coverage = #(Paths Covered) / #(Total Paths)</p><p>Practical path coverage criteria:<br>• The number of paths in a program with loops is unbounded - the simple criterion is usually impossible to satisfy<br>• For a feasible criterion: Partition infinite set of paths into a finite number of classes<br>• Useful criteria can be obtained by limiting<br>•• the number of traversals of loops<br>•• the length of the paths to be traversed<br>•• the dependencies among selected paths</p><h4 id="Boundary-Interior-Coverage"><a href="#Boundary-Interior-Coverage" class="headerlink" title="Boundary Interior Coverage"></a>Boundary Interior Coverage</h4><p>Groups paths that differ only in the subpath they follow when repeating the body of a loop.<br>• Follow each path in the control flow graph up to the first repeated node<br>• The set of paths from the root of the tree to each leaf is the required set of subpaths for boundary/interior coverage<br><img src="/images/Boundary_interior_adequacy.png" alt="" title="Deriving a tree from a CFG to derive subpaths for boundary/interior testing. Part (i) is the CFG of the C function cgi decode, Part (ii) is a tree derived from part (i) by following each path in the control flow graph up to the first repeated node. image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch12.pdf."><br>把分支拆分为每一条可能的 path.</p><p>Limitations:<br>1, The number of paths through non-loop branches (conditions) can still be exponential ($2^N$).<br>2, Choosing input data to force execution of one particular path may be very difficult, or even impossible if the conditions are not independent.</p><h4 id="Loop-Boundary-Coverage"><a href="#Loop-Boundary-Coverage" class="headerlink" title="Loop Boundary Coverage"></a>Loop Boundary Coverage</h4><p>Since coverage of non-looping paths is expensive, we can consider a variant of the boundary/interior criterion that treats loop boundaries similarly but is less stringent with respect to other differences among paths.</p><p>Criterion: A test suite satisfies the loop boundary adequacy criterion iff for every loop:<br>• In at least one test case, the loop body is iterated zero times<br>• In at least one test case, the loop body is iterated once<br>• In at least one test case, the loop body is iterated more than once</p><p>For simple loops, write tests that:</p><ul><li>Skip the loop entirely.</li><li>Take exactly one pass through the loop.</li><li>Take two or more passes through the loop.</li><li>(optional) Choose an upper bound N, and:<ul><li>M passes, where 2 &lt; M &lt; N</li><li>(N-1), N, and (N+1) passes</li></ul></li></ul><p>For Nested Loops:</p><ul><li>For each level, you should execute similar strategies to simple loops.</li><li>In addition:<ul><li>Test innermost loop first with outer loops executed minimum number of times.</li><li>Move one loops out, keep the inner loop at “typical” iteration numbers, and test this layer as you did the previous layer.</li><li>Continue until the outermost loop tested.</li></ul></li></ul><p>For Concatenated Loops, one loop executes. The next line of code starts a new loop:</p><ul><li>These are generally independent(Most of the time…)</li><li>If not, follow a similar strategy to nested loops.<ul><li>Start with bottom loop, hold higher loops at minimal iteration numbers.</li><li>Work up towards the top, holding lower loops at “typical” iteration numbers.</li></ul></li></ul><h4 id="Linear-Code-Sequences-and-Jumps"><a href="#Linear-Code-Sequences-and-Jumps" class="headerlink" title="Linear Code Sequences and Jumps"></a>Linear Code Sequences and Jumps</h4><p>There are additional path-oriented coverage criteria that do not explicitly consider loops. Among these are criteria that consider paths up to a fixed length. The most common such criteria are based on Linear Code Sequence and Jump (LCSAJ) - sequential subpath in the CFG starting and ending in a branch.</p><p>A single LCSAJ is a set of statements that come one after another (meaning no jumps) followed by a single jump. A LCSAJ starts at either the beginning of the function or at a point that can be jumped to. The <strong>LCSAJ coverage</strong> is what fraction of all LCSAJs in a unit are followed by your test suite.</p><p>We can require coverage of all sequences of LCSAJs of length N.<br>Stronger criteria can be defined by requiring N consecutive LCSAJs to be covered - $TER_{N+2}$:<br>1, $TER_1$ is equivalent to statement coverage.<br>2, $TER_2$ is equivalent to branch coverage<br>3, $TER_3$ is LCSAJ coverage<br>4, $TER_4$ is how many pairs of LCSAJ covered<br>…</p><h4 id="Cyclomatic-adequacy-Complexity-coverage"><a href="#Cyclomatic-adequacy-Complexity-coverage" class="headerlink" title="Cyclomatic adequacy (Complexity coverage)"></a>Cyclomatic adequacy (Complexity coverage)</h4><p>There are many options for the set of basis subpaths. When testing, count the number of independent paths that have already been covered, and add any new subpaths covered by the new test.</p><p>You can identify allpaths with a set of independent subpaths of size = the <strong>cyclomatic complexity</strong>. Cyclomatic coverage counts the number of independent paths that have been exercised, relative to cyclomatic complexity.</p><p>• A path is representable as a bit vector, where each component of the vector represents an edge<br>• “Dependence” is ordinary linear dependence between (bit) vectors</p><p>If e = #(edges), n = #(nodes), c = #(connected components) of a graph, it is $e - n + c$ for an arbitrary graph, $e - n + 2$ for a CFG.</p><p>Cyclomatic Complexity could be used to guess “how much testing is enough”.<br>○ Upper bound on number of tests for branch coverage.<br>○ Lower bound on number of tests for path coverage.</p><p>And Used to refactor code.<br>○ Components with a complexity &gt; some threshold should be split into smaller modules.<br>○ Based on the belief that more complex code is more fault-prone.</p><h3 id="Procedure-call-coverage"><a href="#Procedure-call-coverage" class="headerlink" title="Procedure call coverage"></a>Procedure call coverage</h3><p>The criteria considered to this point measure coverage of control flow within individual procedures - not well suited to integration or system testing, where connections between procedures(calls and returns) should be covered.</p><p>Choose a coverage granularity commensurate with the granularity of testing - if unit testing has been effective, then faults that<br>remain to be found in integration testing will be primarily interface faults, and testing effort should focus on interfaces between units rather than their internal details.</p><p><strong>Procedure Entry and Exit Testing</strong> - A single procedure may have several entry and exit points.<br>• In languages with goto statements, labels allow multiple entry points.<br>• Multiple returns mean multiple exit points.</p><p><strong>Call coverage</strong>: The same entry point may be called from many points. Call coverage requires that a test suite executes all possible method calls.</p><h3 id="Satisfying-structural-criteria"><a href="#Satisfying-structural-criteria" class="headerlink" title="Satisfying structural criteria"></a>Satisfying structural criteria</h3><p><img src="/images/subsumption_relation.png" alt="" title="Subsumption relation. image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch12.pdf"><br>The criterion requires execution of</p><ul><li><strong>statements</strong> that cannot be executed as a result of:<ul><li>defensive programming</li><li>code reuse (reusing code that is more general than strictly required for the application)</li></ul></li><li><strong>conditions</strong> that cannot be satisfied as a result of interdependent conditions</li><li><strong>paths</strong> that cannot be executed as a result of interdependent decisions</li></ul><p>Rather than requiring full adequacy, the “degree of adequacy” of a test suite is estimated by coverage measures.</p><h2 id="Dependence-and-Data-Flow-Models"><a href="#Dependence-and-Data-Flow-Models" class="headerlink" title="Dependence and Data Flow Models"></a>Dependence and Data Flow Models</h2><p>前面介绍的 Finite models (Control flow graph, call graph, finite state machines) 只是捕捉程序各部分之间依赖关系的其中一个方面。它们明确地表现<strong>控制</strong>流程，但不重视程序变量间的信息传递. <strong>Data flow models</strong> provide a complementary view, emphasizing and making explicit relations involving <strong>transmission of information</strong>.</p><blockquote><p>Models of data flow and dependence in software were originally developed in the field of compiler construction, where they were (and still are) used to detect opportunities for optimization.</p></blockquote><h3 id="Definition-Use-Pairs-Def-Use-Pairs"><a href="#Definition-Use-Pairs-Def-Use-Pairs" class="headerlink" title="Definition-Use Pairs (Def-Use Pairs)"></a>Definition-Use Pairs (Def-Use Pairs)</h3><blockquote><p>The most fundamental class of data flow model associates the point in a program where a value is produced (called a “definition”) with the points at which the value may be accessed (called a “use”).</p></blockquote><p><strong>Definitions</strong> - Variable declaration (often the special value “uninitialized”), Variable initialization, Assignment, Values received by a parameter.<br><strong>Use</strong> - Expressions, Conditional statements, Parameter passing, Returns.<br><img src="/images/Def_Use_path.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch06.pdf"></p><p>A <strong>Definition-Use pair</strong> is formed if and only if there is a <strong>definition-clear path</strong> between the Definition and the Use. A definition-clear path is a path along the CFG path from a definition to a use of the same variable without another definition of the variable in between.</p><p><code>&lt;D,U&gt;</code> pairs coverage: #(pairs covered)/ #(total number of pairs)<br>If instead another definition is present on the path, then the latter definition kills the former.</p><p>Definition-use pairs record direct data dependence, which can be represented in the form of a graph - <strong>(Direct) Data Dependence Graph</strong>, with a directed edge for each definition-use pair.</p><p>The notion of dominators in a rooted, directed graph can be used to make this intuitive notion of “controlling decision” precise. Node M dominates node N if every path from the root of the graph to N passes through M.</p><h3 id="Analyses-Reaching-definition"><a href="#Analyses-Reaching-definition" class="headerlink" title="Analyses: Reaching definition"></a>Analyses: Reaching definition</h3><p>Definition-use pairs can be defined in terms of paths in the program control flow graph.<br>• There is an association $(d,u)$ between a definition of variable $v$ at $d$ and a use of variable $v$ at $u$ if and only if there is at least one control flow path from $d$ to $u$ with no intervening definition of $v$.<br>• Definition $v_d$ <strong>reaches</strong> $u$ ($v_d$ is a <strong>reaching definition</strong> at $u$).<br>• If a control flow path passes through another definition $e$ of the same variable $v$, we say that $v_e$ kills $v_d$ at that point.</p><p>Practical algorithms do not search every individual path. Instead, they <strong>summarize the reaching definitions</strong> at a node over all the paths reaching that node.</p><p>An algorithm for <strong>computing reaching definitions</strong> is based on the way reaching definitions at one node are related to reaching definitions at an adjacent node.</p><p>Suppose we are calculating the reaching definitions of node n, and there is an edge $(p,n)$ from an immediate predecessor node $p$.<br>We observe:<br>• If the predecessor node $p$ can assign a value to variable $v$, then the definition $v_p$ reaches $n$. We say the definition $v_p$ is generated at $p$.<br>• If a definition $v_d$ of variable $v$ reaches a predecessor node $p$, and if $v$ is not redefined at that node, then the definition is propagated on from $p$ to $n$.</p><p>These observations can be stated in the form of an equation describing sets of reaching definitions.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Euclid's algorithm */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GCD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;              <span class="comment">// A: def x, y, tmp</span></span><br><span class="line">        <span class="keyword">while</span> (y != <span class="number">0</span>) &#123;      <span class="comment">// B: use y</span></span><br><span class="line">            tmp = x % y;      <span class="comment">// C: def tmp; use x, y</span></span><br><span class="line">            x = y;            <span class="comment">// D: def x; use y</span></span><br><span class="line">            y = tmp;          <span class="comment">// E: def y; use tmp</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;             <span class="comment">// F: use x</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/data_dependence_graph.png" alt="" title="Nodes: as in the control flow graph (CFG); Each edge represents a direct data dependence, labelled with the variable name. image from: Pezze and Young, Software Testing and Analysis: Process, Principles and Techniques, Wiley, 2007."></p><p>Reaching definitions at node E are those at node D, except that D adds a definition of x and replaces (kills) an earlier definition of x:<br>$$<br>\begin{equation}<br>\begin{split}<br>    Reach(E) &amp;= ReachOut(D) \\<br>    ReachOut(D) &amp;= (Reach(D) \backslash {x_A}) \cup {x_D}<br>\end{split}<br>\end{equation}<br>$$<br>Equations at the head of the while loop - node B, where values may be transmitted both from the beginning of the procedure - node A and through the end of the body of the loop - node E. The beginning of the procedure (node A) is treated as an initial definition of parameters and local variables:<br>$$<br>\begin{equation}<br>\begin{split}<br>    Reach(B) &amp;= ReachOut(A) \cup ReachOut(E) \\<br>    ReachOut(A) &amp;= gen(A) = {x_A, y_A, tmp_A } \\<br>    ReachOut(E) &amp;= (Reach(E) \backslash {y_A}) \cup {y_D}<br>\end{split}<br>\end{equation}<br>$$</p><p>(If a local variable is declared but not initialized, it is treated as a definition to the special value “<strong>uninitialized</strong>.”)</p><p>General equations for Reach analysis:<br>$$\begin{equation} \begin{split}<br>Reach(n) &amp;= \mathop{\cup} \limits_{m \in pred(n)} ReachOut(m) \\<br>ReachOut(n) &amp;=(Reach(n) \backslash kill(n)) \cup gen(n) \\<br>\end{split} \end{equation}$$<br>$gen(n) = v_n$, $v$ is defined or modified at $n$;<br>$kill(n) = v_x$, $v$ is defined or modified at $x, x \ne n$.</p><p>Reaching definitions calculation: first initializing the reaching definitions at each node in the control flow graph to the empty set, and then applying these equations repeatedly until the results stabilize.</p><h3 id="Analyses-Live-and-Avail"><a href="#Analyses-Live-and-Avail" class="headerlink" title="Analyses: Live and Avail"></a>Analyses: Live and Avail</h3><p><strong>Available expressions</strong> is another classical data flow analysis, used in compiler construction to determine <strong>when</strong> the value of a subexpression can be saved and reused rather than recomputed.</p><blockquote><p>An expression is available at a point if, for all paths through the control flow graph from procedure entry to that point, the expression has been computed and not subsequently modified.</p></blockquote><p>An expression is generated (becomes available) where it is computed and is killed (ceases to be available) when the value of any part of it changes (e.g., when a new value is assigned to a variable in the expression).</p><p>The expressions propagation to a node from its predecessors is described by a pair of set equations:<br>$$\begin{equation} \begin{split}<br>Avail(n) &amp;= \mathop{\cap} \limits_{m \in pred(n)} AvailOut(m) \\<br>AvailOut(n) &amp;=(Avail(n) \backslash kill(n)) \cup gen(n) \\<br>\end{split} \end{equation}$$<br>$gen(n)$, available, computed at $n$;<br>$kill(n)$, has variables assigned at $n$.</p><p>Reaching definitions combines propagated sets using set union, since a definition can reach a use along any execution path. Available expressions combines propagated sets using set intersection, since an expression is considered available at a node only if it reaches that node along all possible execution paths.</p><p>Reaching definitions is a <strong>forward, any-path analysis</strong>; Available expressions is a <strong>forward, all-paths analysis</strong>.</p><p><strong>Live variables</strong> is a <strong>backward, any-path analysis</strong> that determines whether the value held in a variable may be subsequently used. Backward analyses are useful for determining what happens after an event of interest.</p><p>A variable is live at a point in the control flow graph if, on some execution path, its current value may be used before it is changed, i.e. there is any possible execution path on which it is used.</p><p>$$\begin{equation} \begin{split}<br>Live(n) &amp;= \mathop{\cup} \limits_{m \in succ(n)} LiveOut(m) \\<br>LiveOut(n) &amp;=(Live(n) \backslash kill(n)) \cup gen(n) \<br>\end{split} \end{equation}$$<br>$gen(n)$, $v$ is used at $n$;<br>$kill(n)$, $v$ is modified at $n$.</p><p>One application of live variables analysis is to recognize useless definitions, that is, assigning a value that can never be used.</p><h3 id="Iterative-Solution-of-Dataflow-Equations"><a href="#Iterative-Solution-of-Dataflow-Equations" class="headerlink" title="Iterative Solution of Dataflow Equations"></a>Iterative Solution of Dataflow Equations</h3><p>Initialize values (first estimate of answer)<br>• For “any path” problems, first guess is “nothing”(empty set) at each node<br>• For “all paths” problems, first guess is “everything” (set of all possible values = union of all “gen” sets)</p><p>Repeat until nothing changes<br>• Pick some node and recalculate (new estimate)</p><h3 id="From-Execution-to-Conservative-Flow-Analysis"><a href="#From-Execution-to-Conservative-Flow-Analysis" class="headerlink" title="From Execution to Conservative Flow Analysis"></a>From Execution to Conservative Flow Analysis</h3><p>We can use the same data flow algorithms to approximate other dynamic properties<br>• Gen set will be “facts that become true here”<br>• Kill set will be “facts that are no longer true here”<br>• Flow equations will describe propagation</p><p>Example: Taintedness (in web form processing)<br>• “Taint”: a user-supplied value (e.g., from web form) that has not been validated<br>• Gen: we get this value from an untrusted source here<br>• Kill: we validated to make sure the value is proper</p><h3 id="Data-flow-analysis-with-arrays-and-pointers"><a href="#Data-flow-analysis-with-arrays-and-pointers" class="headerlink" title="Data flow analysis with arrays and pointers"></a>Data flow analysis with arrays and pointers</h3><p>The models and flow analyses described in the preceding section have been limited to simple scalar variables in individual procedures.</p><p>Arrays and pointers (dynamic references and the potential for aliasing) introduce uncertainty: Do different expressions access the same storage?<br>• a[i] same as a[k] when i = k<br>• a[i] same as b[i] when a = b (aliasing)</p><p>The uncertainty is accomodated depending on the kind of analysis<br>• Any-path: gen sets should include all potential aliases and kill set should include only what is definitely modified<br>• All path: vice versa</p><h3 id="Scope-of-Data-Flow-Analysis"><a href="#Scope-of-Data-Flow-Analysis" class="headerlink" title="Scope of Data Flow Analysis"></a>Scope of Data Flow Analysis</h3><p><strong>过程内 Intraprocedural</strong>: Within a single method or procedure, as described so far.</p><p><strong>过程之间 Interprocedural</strong>: Across several methods (and classes) or procedures</p><p>Cost/Precision trade-offs for <strong>interprocedural</strong> analysis are critical, and difficult: context sensitivity, flow-sensitivity.</p><p>Many <strong>interprocedural</strong> flow analyses are flow-insensitive<br>• $O(n^3)$ would not be acceptable for all the statements in a program. Though $O(n^3)$ on each individual procedure might be ok<br>• Often flow-insensitive analysis is good enough… considering type checking as an example</p><p>Reach, Avail, etc were flow-sensitive sensitive, <strong>intraprocedural</strong> analyses.<br>• They considered ordering and control flow decisions<br>• Within a single procedure or method, this is (fairly) cheap - $O(n^3)$ for $n$ CFG nodes.</p><h3 id="Summary-of-Data-flow-models"><a href="#Summary-of-Data-flow-models" class="headerlink" title="Summary of Data flow models"></a>Summary of Data flow models</h3><ul><li>Data flow models detect patterns on CFGs:<ul><li>Nodes initiating the pattern</li><li>Nodes terminating it</li><li>Nodes that may interrupt it</li></ul></li><li>Often, but not always, about flow of information (dependence)</li><li>Pros:<ul><li>Can be impy g lemented by efficient iterative algorithms</li><li>Widely applicable (not just for classic “data flow” properties)</li></ul></li><li>Limitations:<ul><li>Unable to distinguish feasible from infeasible paths</li><li>Analyses spanning whole programs (e.g., alias analysis) must trade off precision against computational cost</li></ul></li></ul><h2 id="Data-Flow-Testing"><a href="#Data-Flow-Testing" class="headerlink" title="Data Flow Testing"></a>Data Flow Testing</h2><p>In structural testing,<br>• Node and edge coverage don’t test interactions<br>• Path-based criteria require impractical number of test cases: And only a few paths uncover additional faults, anyway<br>• Need to distinguish “important” paths</p><p>Data flow testing attempts to distinguish “important” paths: Interactions between statements - Intermediate between simple statement and branch coverage and more expensive path-based structural testing.</p><p>Intuition: Statements interact through data flow<br>• Value computed in one statement used in another Value computed in one statement, used in another<br>• Bad value computation revealed only when it is used</p><p>Adequacy criteria:<br>• All DU pairs: Each DU pair is exercised by at least one test case<br>• All DU paths: Each simple (non looping) DU path is exercised by at least one test case<br>• All definitions: For each definition, there is at least one test case which exercises a DU pair containing it - Every computed value is used somewhere</p><p>Limits: Aliases, infeasible paths - Worst case is bad (undecidable properties, exponential blowup of paths), so 务实的 pragmatic compromises are required</p><h3 id="Data-flow-coverage-with-complex-structures"><a href="#Data-flow-coverage-with-complex-structures" class="headerlink" title="Data flow coverage with complex structures"></a>Data flow coverage with complex structures</h3><p>Arrays and pointers<br>• Under-estimation of aliases may fail to include some DU pairs<br>• Over-estimation, may introduce unfeasible test obligations</p><p>For testing, it may be preferrable to accept under-estimation of alias set rather than over-estimation or expensive analysis<br>• 有争议的 Controversial: In other applications (e.g., compilers), a conservative over-estimation of aliases is usually required<br>• Alias analysis may rely on external guidance or other global<br>analysis to calculate good estimates<br>• Undisciplined use of dynamic storage, pointer arithmetic, etc.<br>may make the whole analysis infeasible</p><h2 id="Mutation-testing"><a href="#Mutation-testing" class="headerlink" title="Mutation testing"></a>Mutation testing</h2><p>Fault-based Testing, directed towards “typical” faults that could occur in a program.</p><ol><li>Take a program and test suite generated for that program (using other test techniques)</li><li>Create a number of similar programs (<strong>mutants</strong>), each differing from the original in one small way, i.e., each possessing a fault</li><li>The original test data are then run through the mutants</li><li>Then mutants either:<ul><li>To be dead: test data detect all differences in mutants, the test set is adequate.</li><li>Remains live if:<ul><li>it is equivalent to the original program (functionally identical although syntactically different - called an <strong>equivalent mutant</strong>) or,</li><li>the test set is inadequate to kill the mutant. The test data need to be augmented (by adding one or more new test cases) to kill the live mutant.</li></ul></li></ul></li></ol><p>Numbers of mutants tend to be large (the number of mutation operators is large as they are supposed to capture all possible syntactic variations in a program), hence random sampling, selective mutation operators (Offutt).</p><p>Coverage - mutation score: #(killed mutants) / #(all non-equivalent mutants) (or random sample).</p><p>Benifits:<br>• It provides the tester with a clear target (mutants to kill)<br>• It does force the programmer to think of the test data that will expose certain kinds of faults<br>• Probably most useful at unit testing level</p><p>Mutation operators could be built on<br>• source code (body),<br>• module interfaces (aimed at integration testing),<br>• specifications: Petri-nets, state machines, (aimed at system testing)</p><p>Tools: MuClipse</p><h2 id="Model-based-testing"><a href="#Model-based-testing" class="headerlink" title="Model based testing"></a>Model based testing</h2><p>Models used in specification or design have structure<br>• Useful information for selecting representative classes of behavior; behaviors that are treated differently with respect to the model should be tried by a thorough test suite<br>• In combinatorial testing, it is difficult to capture that structure clearly and correctly in constraints</p><p>Devise test cases to check actual behavior against behavior specified by the model - “Coverage” similar to structural testing, but applied to specification and design models.</p><p>Deriving test cases from finite state machines: From an informal specification, to a finite state machine, to a test suite</p><p>“Covering” finite state machines<br>• State coverage: Every state in the model should be visited by at least one test case<br>• Transition coverage<br>    •• Every transition between states should be traversed by at least one test case.<br>    •• A transition can be thought of as a (precondition, postcondition) pair.</p><p>Models are useful abstractions<br>• In specification and design, they help us think and communicate about complex artifacts by emphasizing key features and suppressing details<br>• Models convey structure and help us focus on one thing at a time</p><p>We can use them in systematic testing<br>• If a model divides behavior into classes, we probably want to exercise each of those classes!<br>• Common model-based testing techniques are based on state machines, decision structures, and grammars, but we can apply the same approach to other models.</p><h2 id="Testing-Object-Oriented-Software"><a href="#Testing-Object-Oriented-Software" class="headerlink" title="Testing Object Oriented Software"></a>Testing Object Oriented Software</h2><p>Typical OO software <strong>characteristics</strong> that impact testing<br>• State dependent behavior<br>• Encapsulation<br>• Inheritance<br>• 多态性 Polymorphism and dynamic binding<br>• Abstract and generic classes<br>• Exception handling</p><p><strong>Procedural software</strong>, unit = single program, function, or procedure, more often: a unit of work that may correspond to one or more intertwined functions or programs.</p><p><strong>Object oriented software</strong>:<br>• unit = class or (small) cluster of strongly related classes (e.g., sets of Java classes that correspond to exceptions)<br>• unit testing = 类内测试 intra-class testing<br>• integration testing = 类之间测试 inter-class testing (cluster of classes)<br>• dealing with single methods separately is usually too expensive (complex scaffolding), so methods are usually tested in the context of the class they belong to.</p><p>Basic approach is <strong>orthogonal</strong>: Techniques for each major issue (e.g., exception handling, generics, inheritance ) can be applied incrementally and independently. <img src="/images/orthogonal_approach.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch14-15.pdf."></p><h3 id="Intraclass-State-Machine-Testing"><a href="#Intraclass-State-Machine-Testing" class="headerlink" title="Intraclass State Machine Testing"></a>Intraclass State Machine Testing</h3><p>Basic idea:<br>• The state of an object is modified by operations<br>• Methods can be modeled as state transitions<br>• Test cases are sequences of method calls that traverse the state machine model</p><p>State machine model can be derived from specification (functional testing), code (structural testing), or both.</p><p>Testing with State Diagrams:<br>• A statechart (called a “state diagram” in UML) may be produced as part of a specification or design - May also be implied by a set of message sequence charts (interaction diagrams), or other modeling formalisms.<br>• Two options:<br>1, Convert (“flatten”) into standard finite-state machine, then derive test cases<br>2, Use state diagram model directly</p><h3 id="Intraclass-data-flow-testing"><a href="#Intraclass-data-flow-testing" class="headerlink" title="Intraclass data flow testing"></a>Intraclass data flow testing</h3><p>Exercise sequences of methods<br>• From setting or modifying a field value<br>• To using that field value</p><p>The intraclass control flow graph - control flow through sequences of method calls:<br>• Control flow for each method<br>• node for class<br>• edges: from node class to the start nodes of the methods; from the end nodes of the methods to node class.</p><h3 id="Interclass-Testing"><a href="#Interclass-Testing" class="headerlink" title="Interclass Testing"></a>Interclass Testing</h3><p>The first level of integration testing for object-oriented software - Focus on interactions between classes</p><p>Bottom-up integration according to <strong>“depends”</strong> relation - A depends on B - Build and test B, then A</p><p>Start from <strong>use/include</strong> hierarchy - Implementation-level parallel to logical “depends” relation<br>• Class A makes method calls on class B<br>• Class A objects include references to class B methods - but only if reference means “is part of”<br><img src="https://en.wikipedia.org/wiki/File:BankAccount1.svg" alt="" title="A class with three compartments"></p><blockquote><p>In software engineering, a class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system’s <strong>classes, their attributes, operations (or methods)</strong>, and the relationships among objects.</p></blockquote><blockquote><p>Dependency is a weaker form of bond that indicates that one class depends on another because it uses it at some point in time. One class depends on another if the independent class is a parameter variable or local variable of a method of the dependent class.</p></blockquote><p>Interactions in Interclass Tests:</p><ul><li>Proceed bottom-up</li><li>Consider all combinations of interactions<ul><li>example: a test case for class <code>Order</code> includes a call to a method of class <code>Model</code>, and the called method calls a method of class <code>Slot</code>, exercise all possible relevant states of the different classes.</li><li>problem: combinatorial explosion of cases</li><li>so select a subset of interactions:<ul><li>arbitrary or random selection</li><li>plus all significant interaction scenarios that have been previously identified in design and analysis: sequence + collaboration diagrams</li></ul></li></ul></li></ul><p>Using Structural Information:<br>• Start with functional testing: the specification (formal or informal) is the first source of information<br>• Then add information from the code (structural testing)</p><h3 id="Interclass-structural-testing"><a href="#Interclass-structural-testing" class="headerlink" title="Interclass structural testing"></a>Interclass structural testing</h3><p>Working “bottom up” in dependence hierarchy<br>• Dependence is not the same as class hierarchy; not always the same as call or inclusion relation.<br>• May match bottom-up build order</p><p>Starting from leaf classes, then classes that use leaf classes,…</p><p>Summarize effect of each method: Changing or using object state, or both - Treating a whole object as a variable (not just primitive types)</p><h3 id="Polymorphism-and-dynamic-binding"><a href="#Polymorphism-and-dynamic-binding" class="headerlink" title="Polymorphism and dynamic binding"></a>Polymorphism and dynamic binding</h3><p>One variable potentially bound to methods of different (sub-)classes.</p><p>The combinatorial approach: identify a set of combinations that cover all pairwise combinations of dynamic bindings.</p><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>When testing a subclass, We would like to re-test only what has not been thoroughly tested in the parent class. But we should test any method whose behavior may have changed.</p><p>Reusing Tests with the Testing History Approach:</p><ul><li>Track test suites and test executions<ul><li>determine which new tests are needed</li><li>determine which old tests must be re-executed</li></ul></li><li>New and changed behavior …<ul><li>new methods must be tested</li><li>redefined methods must be tested, but we can partially reuse test suites defined for the ancestor</li><li>other inherited methods do not have to be retested</li></ul></li></ul><p>Abstract methods (and classes) - Design test cases when abstract method is introduced (even if it can t be executed yet)</p><p>Behavior changes<br>• Should we consider a method “redefined” if another new or redefined method changes its behavior?<br>• The standard “testing history” approach does not do this<br>• It might be reasonable combination of data flow (structural) OO testing with the (functional) testing history approach</p><h3 id="Testing-exception-handling"><a href="#Testing-exception-handling" class="headerlink" title="Testing exception handling"></a>Testing exception handling</h3><p>Exceptions create implicit control flows and may be handled by different handlers.</p><p>Impractical to treat exceptions like normal flow<br>• too many flows: every array subscript reference, every memory, allocation, every cast, …<br>• multiplied by matching them to every handler that could appear immediately above them on the call stack.<br>• many actually impossible</p><p>So we separate testing exceptions, and ignore program error exceptions (test to prevent them, not to handle them)</p><p>What we do test: Each exception handler, and each explicit throw or re-throw of an exception.</p><h2 id="Integration-Testing"><a href="#Integration-Testing" class="headerlink" title="Integration Testing"></a>Integration Testing</h2><p>Unit (module) testing is a foundation, unit level has maximum controllability and visibility.</p><p>Integration testing may serve as a process check<br>• If module faults are revealed in integration testing, they signal inadequate unit testing<br>• If integration faults occur in interfaces between correctly implemented modules, the errors can be traced to module breakdown and interface specifications.<br><img src="/images/module_integration_system_test.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch21.pdf"><br>Integration test plan drives and is driven by the project “build plan”</p><p>Structural orientation: Modules constructed, integrated and tested based on a hierarchical project structure - Top-down, Bottom-up, Sandwich, Backbone</p><p>Functional orientation: Modules integrated according to application characteristics or features - Threads, Critical module.</p><blockquote><p>A “thread” is a portion of several modules that together provide a user-visible program feature.</p></blockquote><h2 id="Component-based-software-testing"><a href="#Component-based-software-testing" class="headerlink" title="Component-based software testing"></a>Component-based software testing</h2><p>Working Definition of <strong>Component</strong><br>• Reusable unit of deployment and composition<br>• Characterized by an interface or contract<br>• Often larger grain than objects or packages - A complete database system may be a component</p><p><strong>Framework</strong><br>• Skeleton or micro-architecture of an application<br>• May be packaged and reused as a component, with “挂钩 hooks” or “插槽 slots” in the interface contract</p><p><strong>Design patterns</strong><br>• Logical design fragments<br>• Frameworks often implement patterns, but patterns are not frameworks. Frameworks are concrete, patterns are abstract</p><p><strong>Component-based system</strong><br>• A system composed primarily by assembling components, often “Commercial off-the-shelf” (COTS) components<br>• Usually includes application-specific “glue code”</p><p><strong>Component Interface Contracts</strong><br>• Application programming interface (API) is distinct from implementation<br>• Interface includes everything that must be known to use the component: More than just method signatures, exceptions, etc; May include non-functional characteristics like performance, capacity, security; May include dependence on other components.</p><p>Testing a Component: Producer View<br>• Thorough unit and subsystem testing<br>• Thorough acceptance testing: Includes stress and capacity testing</p><p>Testing a Component: User View<br>• Major question: Is the component suitable for this application?<br>• Reducing risk: Trial integration early</p><h2 id="System-Acceptance-and-Regression-Testing"><a href="#System-Acceptance-and-Regression-Testing" class="headerlink" title="System, Acceptance, and Regression Testing"></a>System, Acceptance, and Regression Testing</h2><p><img src="/images/System_Acceptance_and_Regression.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/system-acceptance.pdf."></p><h2 id="System-Testing"><a href="#System-Testing" class="headerlink" title="System Testing"></a>System Testing</h2><p>Characteristics:<br>• Comprehensive (the whole system, the whole spec)<br>• Based on specification of observable behavior: Verification against a requirements specification, not validation, and not opinions<br>• Independent of design and implementation</p><p>Independence: Avoid repeating software design errors in system test design.</p><p>Maximizing independence:<br>• Independent V&amp;V: System (and acceptance) test performed by a different organization.<br>• Independence without changing staff: Develop system test cases early</p><p>System tests are often used to measure progress. As project progresses, the system passes more and more system tests. Features exposed at top level as they are developed.</p><p>System testing is the only opportunity to verify <strong>Global Properties</strong> - Performance, latency, reliability, … Especially to find unanticipated effects, e.g., an unexpected performance bottleneck.</p><p><strong>Context-Dependent Properties</strong> is beyond system-global: Some properties depend on the system context and use, Example:<br>• Performance properties depend on environment and configuration<br>• Privacy depends both on system and how it is used<br>• Security depends on threat profiles</p><h3 id="Stress-Testing"><a href="#Stress-Testing" class="headerlink" title="Stress Testing"></a>Stress Testing</h3><p>When a property (e.g., performance or real-time response) is parameterized by use - requests per second, size of database,… Extensive stress testing is required - varying parameters within the envelope, near the bounds, and beyond.</p><p>Often requires extensive simulation of the execution environment, and requires more resources (human and machine) than typical test cases - Separate from regular feature tests, Run less often, with more manual control.</p><p>Capacity, Security, Performance, Compliance, Documentation Testing.</p><h2 id="Acceptance-testing"><a href="#Acceptance-testing" class="headerlink" title="Acceptance testing"></a>Acceptance testing</h2><p>Estimating dependability, measuring quality, not searching for faults. Requires valid <strong>statistical samples</strong> from <strong>operational profile</strong>(model), and a clear, precise definition of what is being measured.</p><p>Quantitative dependability goals are statistical:<br>• Reliability: Survival Probability - when function is critical during the mission time.<br>• Availability: The fraction of time a system meets its specification - Good when continuous service is important but it can be delayed or denied<br>• Failsafe: System fails to a known safe state<br>• Dependability: Generalisation - System does the right thing at right time</p><p>Usability, Reliability, Availability/Reparability Testing</p><h3 id="System-Reliability"><a href="#System-Reliability" class="headerlink" title="System Reliability"></a>System Reliability</h3><p>The reliability $R_F(t)$ of a system is the <strong>probability</strong> that no fault of the class $F$ occurs (i.e. system survives) during time $t \sim (t_{init}, t_{failure})$.</p><p>Failure Probability $Q_F(t) = 1 -R_F(t)$.</p><p>When the lifetime of a system is exponentially distributed, the reliability of the system is: $R(t) = e^{-\lambda t}$ where the parameter $\lambda$ is called the failure rate.</p><p>MTTF: Mean Time To (first) Failure, or Expected Life.<br>$ MTTF = E(t_f) = \int_0^\infty R(t)dt = \frac{1}{\lambda}$</p><p><strong>Serial System Reliability</strong>: Serially Connected Components. Assuming the failure rates of components are statistically independent, The overall system reliability:<br>$$R_{ser}(t) = \prod_{i=1}^n R_i(t) = e^{-t(\lambda_{ser})} = e^{-t(\sum_{i=1}^n \lambda_i)}$$<br>$R_i(t) = e^{-\lambda_i t}$ is reliability of a single component $i$.</p><p><strong>Parallel System Reliability</strong>: Parallel Connected Components.<br>$$R_{par}(t) = 1 - Q_{par}(t) = 1 - \prod_{i=1}^n Q_i(t) = 1 - \prod_{i=1}^n (1 - e^{-\lambda_i t}) = 1 - \prod_{i=1}^n (1 - R_i(t)) $$</p><p>For example:<br>· if one is to build a serial system with 100 components each of which had a reliability of 0.999, the overall system reliability would be $0.999^{100} = 0.905$.<br>· Consider 4 identical modules are connected in parallel, System will operate correctly provided at least one module is operational. If the reliability of each module is 0.95, the overall system reliability is $1-(1-0.95)^4 = 0.99999375$.</p><p>Statistical testing is necessary for critical systems (safety critical, infrastructure, …), but difficult or impossible when operational profile is unavailable or just a guess, or when reliability requirement is very high.</p><h3 id="Process-based-Measures"><a href="#Process-based-Measures" class="headerlink" title="Process-based Measures"></a>Process-based Measures</h3><p>Based on <strong>similarity with prior projects</strong>, less rigorous than statistical testing.</p><p>System testing process - Expected history of bugs found and resolved:<br>• Alpha testing: Real users, controlled environment<br>• Beta testing: Real users, real (uncontrolled) environment<br>• May statistically sample users rather than uses<br>• Expected history of bug reports</p><h2 id="Regression-Testing"><a href="#Regression-Testing" class="headerlink" title="Regression Testing"></a>Regression Testing</h2><p>Ideally, software should improve over time. But changes can both<br>• Improve software, adding features and fixing bugs<br>• Break software, introducing new bugs - <strong>regressions</strong></p><p>Tests must be re-run after any changes.</p><p>Make use of different techniques for selecting a subset of all tests to reduce the time and cost for regression testing.</p><h3 id="Regression-Test-Selection"><a href="#Regression-Test-Selection" class="headerlink" title="Regression Test Selection"></a>Regression Test Selection</h3><p>From the entire test suite, only select subset of test cases whose execution is relevant to changes.</p><p><strong>Code-based Regression Test Selection</strong>: Only execute test cases that execute changed or new <strong>code</strong>.</p><p><strong>Control-flow and Data-flow Regression Test Selection</strong>: Re-run test cases only if they include changed <strong>elements</strong> – elements may be modified control flow nodes and edges, or definition-use (DU) pairs in data flow. To automate selection:<br>• Tools record changed elements touched by each test case - stored in database of regression test cases<br>• Tools note changes in program<br>• Check test-case database for overlap</p><p><strong>Specification-based Regression Test Selection</strong>:<br>• Specification-based prioritization: <strong>Execute all test cases</strong>, but start with those that related to changed and added <strong>features</strong>.</p><h3 id="Test-Set-Minimization"><a href="#Test-Set-Minimization" class="headerlink" title="Test Set Minimization"></a>Test Set Minimization</h3><p>Identify test cases that are redundant and remove them from the test suite to reduce its size.<br>• Maximize coverage with minimum number of test cases.<br>• Stop after a pre-defined number of iterations<br>• Obtain an approximate solution by using a greedy heuristic</p><h3 id="Test-Set-Prioritisation"><a href="#Test-Set-Prioritisation" class="headerlink" title="Test Set Prioritisation"></a>Test Set Prioritisation</h3><p>• Sort test cases in order of increasing cost per additional coverage<br>• Select the first test case<br>• Repeat the above two steps until k test cases are selected or max cost is reached (whichever is first).<br><img src="/images/Cost_per_additional_coverage.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/RegTesting.pdf."></p><p><strong>Prioritized Rotating Selection</strong>: Execute some sooner than others, eventually execute all test cases. Possible priority schemes:<br>• Round robin: Priority to least-recently-run test cases<br>• Track record: Priority to test cases that have detected faults before - They probably execute code with a high fault density<br>• Structural: Priority for executing elements that have not been recently executed - Can be coarse-grained: Features, methods, files.</p><h2 id="Test-Driven-Development-TDD"><a href="#Test-Driven-Development-TDD" class="headerlink" title="Test-Driven Development (TDD)"></a>Test-Driven Development (TDD)</h2><p>Test-Driven Development (or test driven design) is a methodology.</p><p>• Short development iterations.<br>• Based on requirement and pre-written test cases.<br>• Produces code necessary to pass that iteration’s test.<br>• Refactor both code and tests.<br>• The goal is to produce working clean code that fulfills requirements.</p><p>Principle of TDD - Kent Beck defines:<br>• Never write a single line of code unless you have a failing automated test.<br>• Eliminate duplication</p><p>TDD uses Black-box Unit test：<br>1， 明确功能需求。<br>2， 为功能需求编写 test。<br>3， 运行测试，<font color="red">按理应该无法通过测试</font>（因为还没写功能程序）。<br>4， 编写实现该功能的代码，<font color="green">通过测试</font>。<br>5， 可选：重构代码（和 test cases），使其更快，更整洁等等。<br>6， 可选：循环此步骤</p><p><img src="http://www.pathfindersolns.com/wp-content/uploads/2012/05/red-green-refactorFINAL2.png" alt="source from http://ryantablada.com/post/red-green-refactor---a-tdd-fairytale " title="image from: http://ryantablada.com/post/red-green-refactor---a-tdd-fairytale"></p><h2 id="Automating-Test-Execution"><a href="#Automating-Test-Execution" class="headerlink" title="Automating Test Execution"></a>Automating Test Execution</h2><p>Designing test cases and test suites is creative, but executing test cases should be automatic.</p><p>Example Tool Chain for Test Case Generation &amp; Execution:<br>Combine …<br>• A combinatorial test case generation (genpairs.py) to create test data<br>• DDSteps to convert from spreadsheet data to JUnit test cases<br>• JUnit to execute concrete test cases</p><h3 id="Scaffolding"><a href="#Scaffolding" class="headerlink" title="Scaffolding"></a>Scaffolding</h3><p>Code to support development and testing.<br>• Test driver: A “main” program for running a test<br>• Test stubs: Substitute for called functions/methods/objects.</p><blockquote><p><strong>Stub</strong> is an object that holds predefined data and uses it to answer calls during tests. It is used when we cannot or don’t want to involve objects that would answer with real data or have undesirable side effects. 代指那些包含了预定义好的数据并且在测试时返回给调用者的对象。Stub 常被用于我们不希望返回真实数据或者造成其他副作用的场景。</p></blockquote><p>• Test harness: Substitutes for other parts of the deployed environment</p><p>• <strong>Comparison-based oracle</strong>: need predicted output for each input. Fine for a small number of hand-generated test cases, e.g. hand-written JUnit test cases.</p><p>• <strong>Self-Checking Code as Oracle</strong>: oracle written as self-checks, possible to judge correctness without predicting results. Advantages and limits: Usable with large, automatically<br>generated test suites, but often only a partial check.</p><p>• <strong>Capture and Replay</strong>: If human interaction is required, capture the manually run test case, replay it automatically. With a comparison-based test oracle, behavior same as previously accepted behavior.</p><h2 id="Security-Testing"><a href="#Security-Testing" class="headerlink" title="Security Testing"></a>Security Testing</h2><p>“Regular” testing aims to ensure that the program meets customer requirements in terms of features and functionality. Tests “normal” use cases - Test with regards to common expected usage patterns.</p><p>Security testing aims to ensure that program fulfills security requirements. Often non-functional. More interested in misuse cases.</p><p>Two common approaches:<br>• Test for known vulnerability types<br>• Attempt directed or random search of program state space to uncover the “weird corner cases”</p><h3 id="Penetration-testing"><a href="#Penetration-testing" class="headerlink" title="Penetration testing"></a>Penetration testing</h3><p>• Manually try to “break” software<br>• Typically involves looking for known common problems.</p><h3 id="Fuzz-testing"><a href="#Fuzz-testing" class="headerlink" title="Fuzz testing"></a>Fuzz testing</h3><p>Send semi-valid input to a program and observe its behavior.<br>• <strong>Black-box testing</strong> - System Under Test (SUT) treated as a “black-box”<br>• The only feedback is the output and/or externally observable<br>behavior of SUT.</p><p><strong>Input generation</strong><br>• <strong>Mutation based fuzzing</strong>: Start with a valid seed input, and “mutate” it. Can typically only find the “low-hanging fruit” - shallow bugs that are easy to find.<br>• <strong>Generation based fuzzing</strong>: Use a specification of the input format (e.g. a grammar) to automatically generate semi-valid inputs - Very long strings, empty strings, Strings with format specifiers, “extreme” format strings, Very large or small values, values close to max or min for data type, Negative values. Almost invariably gives better coverage, but requires much more manual effort.</p><p><strong>The Dispatcher</strong>: running the SUT on each input generated by fuzzer module.</p><p><strong>The Assessor</strong>: automatically assess observed SUT behavior to determine if a fault was triggered.</p><h3 id="Concolic-testing"><a href="#Concolic-testing" class="headerlink" title="Concolic testing"></a>Concolic testing</h3><p>Concolic execution workflow:<br>1, Execute the program for real on some input, and record path taken.<br>2, Encode path as query to SMT solver and negate one branch condition<br>3, Ask the solver to find new satisfying input that will give a different path.</p><p><strong>White-box testing</strong> method.<br>• Input generated from control-structure of code to systematically explore different paths of the program.<br>• Generational search (“whitebox fuzzing”): Performs concolic testing, but prioritizes paths based on how much they improve coverage.</p><p><strong>Greybox fuzzing</strong><br>▪ Coverage-guided semi-random input generation.<br>▪ High speed sometimes beats e.g. concolic testing, but shares some limitations with mutation-based fuzzing (e.g. magic constants, checksums).</p><h2 id="Software-Process-Models-Software-Development"><a href="#Software-Process-Models-Software-Development" class="headerlink" title="Software Process Models - Software Development"></a>Software Process Models - Software Development</h2><p><strong>Waterfall model</strong>: Sequential, no feedback<br>1, Requirements<br>2, Design<br>3, Implementation<br>4, Testing<br>5, Release and maintenance</p><p><strong>V-model</strong>: modified version of the waterfall model<br><img src="/images/V_model.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/02_dev_process.pdf."><br>• Tests are created at the point the activity they validate is being carried out. So, for example, the acceptance test is created when the systems analysis is carried out.<br>• Failure to meet the test requires a further <strong>iteration</strong> beginning with the activity that has failed the validation</p><p><strong>Boehm’s Spiral Model</strong>: focuse on controlling project risk and attempting formally to address project risk throughout the lifecycle.<br><img src="/images/Boehm_Spiral_Model.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/02_dev_process.pdf."><br>• V&amp;V activity is spread through the lifecycle with more explicit validation of the preliminary specification and the early stages of design. The goal here is to subject the early stages of design to V&amp;V activity.<br>• At the early stages there may be no code available so we are working with models of the system and environment and verifying that the model exhibits the required behaviours.</p><p><strong>Extreme Programming (XP)</strong>: one of [Agile Processes]<br><img src="/images/Extreme_Programming.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/02_dev_process.pdf."><br>• Advocates working directly with code almost all the time.<br>• The 12 principles of XP summarise the approach.</p><blockquote><p>1, Test-driven development; 2, The planning game; 3, On-site customer; 4, Pair programming; 5, Continuous integration; 6, Refactoring; 7, Small releases; 8, Simple design; 9, System metaphor; 10, Collective code ownership; 11, Coding standards; 12, 40-hour work week;</p></blockquote><p>• Development is test-driven.<br>• Tests play a central role in refactoring activity.<br>• “Agile” development mantra: Embrace Change.</p><p>Facebook’s Process Model</p><blockquote><p>Perpetual development - a continuous development model. In this model, software will never be considered a finished product. Instead features are continuously added and adapted and shipped to users. Fast iteration is considered to support rapid innovation.</p></blockquote><h2 id="Planning-and-Monitoring-the-Process"><a href="#Planning-and-Monitoring-the-Process" class="headerlink" title="Planning and Monitoring the Process"></a>Planning and Monitoring the Process</h2><p>Monitoring: Judging progress against the plan.</p><p><strong>Quality process</strong>: Set of <strong>activities and responsibilities</strong>. Follows the overall software process in which it is embedded.<br>• Example: waterfall software process ––&gt; “V model”: unit testing starts with implementation and finishes before integration<br>• Example: XP and agile methods ––&gt; emphasis on unit testing and rapid iteration for acceptance testing by customers.</p><h3 id="Strategies-vs-Plans"><a href="#Strategies-vs-Plans" class="headerlink" title="Strategies vs. Plans"></a>Strategies vs. Plans</h3><p><img src="/images/Strategies_vs_Plans.png" alt="" title="Strategies vs. Plans. image from: http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/Ch20.pdf."><br>Test and Analysis Strategy:<br>• Lessons of past experience: an organizational asset built and refined over time<br>• Body of explicit knowledge: amenable to improvement, reduces vulnerability to organizational change (e.g., loss of key individuals)</p><p>Elements of a Strategy:<br>• Common quality requirements that apply to all or most products - unambiguous definition and measures<br>• Set of documents normally produced during the quality process - contents and relationships<br>• Activities prescribed by the overall process - standard tools and practices<br>• Guidelines for project staffing and assignment of roles and responsibilities</p><p>Main Elements of a Plan:<br>• Items and features to be verified - Scope and target of the plan<br>• Activities and resources - Constraints imposed by resources on activities<br>• Approaches to be followed - Methods and tools<br>• Criteria for evaluating results</p><h3 id="Schedule-Risk"><a href="#Schedule-Risk" class="headerlink" title="Schedule Risk"></a>Schedule Risk</h3><p>• Critical path = chain of activities that must be completed in sequence and that have maximum overall duration<br>• Critical dependence = task on a critical path scheduled immediately after some other task on the critical path</p><h3 id="Risk-Planning"><a href="#Risk-Planning" class="headerlink" title="Risk Planning"></a>Risk Planning</h3><p>• Generic management risk: personnel, technology, schedule<br>• Quality risk: development, execution, requirements</p><h3 id="Contingency-Plan"><a href="#Contingency-Plan" class="headerlink" title="Contingency Plan"></a>Contingency Plan</h3><p>• Derives from risk analysis<br>• Defines actions in response to bad news - Plan B at the ready</p><h3 id="Process-Monitoring"><a href="#Process-Monitoring" class="headerlink" title="Process Monitoring"></a>Process Monitoring</h3><p>• Identify deviations from the quality plan as early as possible and take corrective action</p><h3 id="Process-Improvement"><a href="#Process-Improvement" class="headerlink" title="Process Improvement"></a>Process Improvement</h3><p>Orthogonal Defect Classification (ODC)<br>• Accurate classification schema: for very large projects, to distill an unmanageable amount of detailed information<br>• Two main steps<br>1, Fault classification: when faults are detected, when faults are fixed.<br>2, Fault analysis</p><p>Root Cause Analysis (RCA)<br>• Technique for identifying and eliminating process faults<br>• Four main steps<br>1, What are the faults?<br>2, When did faults occur? When, and when were they found?<br>3, Why did faults occur?<br>4, How could faults be prevented?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件测试 - 知识点汇总&lt;br&gt;参考&lt;br&gt;&lt;a href=&quot;http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.inf.ed.ac.uk/teaching/courses/st/2017-18/index.html&lt;/a&gt;&lt;br&gt;Pezze and Young, Software Testing and Analysis: Process, Principles and Techniques, Wiley, 2007.&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Natural Language Understanding - Informatics - University of Edinburgh 爱丁堡</title>
    <link href="http://yoursite.com/natural-language-understanding/"/>
    <id>http://yoursite.com/natural-language-understanding/</id>
    <published>2018-04-30T23:00:00.000Z</published>
    <updated>2018-05-10T17:04:29.591Z</updated>
    
    <content type="html"><![CDATA[<p>自然语言理解（爱丁堡大学）知识点汇总</p><p>References:<br><a href="http://www.inf.ed.ac.uk/teaching/courses/nlu/" target="_blank" rel="noopener">Natural language understanding</a><br><a href="http://web.stanford.edu/class/cs224n/syllabus.html" target="_blank" rel="noopener">CS224n: Natural Language Processing with Deep Learning</a><br><a href="https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html" target="_blank" rel="noopener">Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning</a></p><a id="more"></a><h2 id="循环神经网络-RNNs"><a href="#循环神经网络-RNNs" class="headerlink" title="循环神经网络 RNNs"></a>循环神经网络 RNNs</h2><p><img src="http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png" alt="" title="A recurrent neural network and the unfolding in time of the computation involved in its forward computation. Source: http://colah.github.io"></p><p><img src="http://d3kbpzbmcynnmx.cloudfront.net/wp-content/uploads/2015/09/rnn.jpg" alt="" title="Source: Nature"></p><p>For a sequence of input data (sequence of words, or speech) and sequence of output problem (many to many):<br>· feed input $x_{t}$ into the RNN: feeding one word (represented as vector) at a time, e.g one word in a sentence from left to right, $x_1$ corresponds to the second word of a sentence.</p><p>· $s_t$ is the hidden state at time step t. It is calculated based on the previous hidden state and the input at the current step:$s_t = f(Ux_t + Ws_{t-1})$. Function f is the activation.</p><p>· o(t) is the output at step t. For example, if we wanted to predict the next word in a sentence it would be a vector of probabilities across our vocabulary. $o_t = softmax(Vs_t)$.</p><p>RNN shares the same parameters ($U, V, W$ above) across all steps.</p><p>In addition to the above normal many to many structure RNNs, there are other non-sequence input or output: Many to one, e.g. when predicting the sentiment of a sentence we may only care about the final output, not the sentiment after each word. One to many: Music generation.<br><img src="http://karpathy.github.io/assets/rnn/diags.jpeg" alt="" title="source from http://karpathy.github.io/2015/05/21/rnn-effectiveness/"></p><p>除了应用于语言模型, RNNs 还可以应用于<br>· tagging, e.g. part-of-speech tagging, named entity recognition (many to many RNNs)<br>· sentence classification, e.g. sentiment classification (many to one RNNs)<br>· generate text, e.g. speech recognition, machine translation, summarization</p><h3 id="RNNs-Backpropagation"><a href="#RNNs-Backpropagation" class="headerlink" title="RNNs Backpropagation"></a>RNNs Backpropagation</h3><p>Backpropagation Through Time (BPTT): Because the parameters are shared by all time steps in the network, the gradient at each output depends not only on the calculations of the current time step, but also the previous time steps.</p><p>RNNs trained with BPTT have difficulties learning long-term dependencies (e.g. dependencies between steps that are far apart) due to what is called the vanishing/exploding gradient problem.</p><h3 id="梯度消失与爆炸"><a href="#梯度消失与爆炸" class="headerlink" title="梯度消失与爆炸"></a>梯度消失与爆炸</h3><p>The Vanishing/Exploding Gradient problem。</p><p>RNNs shares the same matrix (w, u, etc.) at each time step during forward prop and backprop. 求导数时, 根据链式法则, loss对各参数的导数会转换为loss对输出y的导数, 乘以y对隐含层的导数, 乘以隐含层相对隐含层之间的导数, 再乘以隐含层对参数的导数.<img src="/images/vanish_gradient.png" alt=""></p><p>不同隐含层（举例如$h_t$和$h_k$）之间如果相隔太远, $h_t$对$h_k$的导数就变成多个jacobian矩阵的相乘， 对各个jacobian范数（norms）进行分析后，发现$h_t$对$h_k$的导数值在训练过程中会很快变得很极端（非常小或者非常大）。</p><p>Gradient作为传导误差以帮助系统纠正参数的关键角色，如果本身变得接近于<code>0</code>或者<code>nan</code>，那么我们就无法判断t和t+n的数据的依赖性（是没有依赖？还是因为vanish of gradient？还是因为参数设置错误？）。梯度衰减会直接降低模型学习长距离依赖关系的能力，给定一个时间序列，例如文本序列，循环神经网络较难捕捉两个时刻距离较大的文本元素（字或词）之间的依赖关系。</p><p>在使用RNN学习language model的时候，非常容易出现梯度爆炸，解决办法是使用 gradient clipping 梯度裁剪，就是通过把梯度映射到另一个大小的空间，以限制梯度范数的最大值<a href="https://arxiv.org/abs/1211.5063" target="_blank" rel="noopener">On the difficulty of training Recurrent Neural Networks</a>。</p><p>虽然梯度裁剪可以应对梯度爆炸，但无法解决梯度衰减的问题。一个缓解梯度衰减的方案是使用更好的参数初始化方案和激活函数（ReLUs）<a href="https://arxiv.org/abs/1504.00941" target="_blank" rel="noopener">A Simple Way to Initialize Recurrent Networks of Rectified Linear Units</a>.</p><p>不过更主流的解决梯度衰减的方案是使用更复杂的rnn隐含单元: Gated Recurrent Units (GRU) introduced by <a href="https://arxiv.org/abs/1406.1078" target="_blank" rel="noopener">Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation</a> and LSTMs.</p><h3 id="Long-Short-Term-Memory"><a href="#Long-Short-Term-Memory" class="headerlink" title="Long Short-Term Memory"></a>Long Short-Term Memory</h3><p>Outside of the vanilla RNNs work flow, LSTMs use gated <strong>cells</strong> as memory to chose what error to be remembered. The cells take as input the previous state $s_{t-1}$ and current input $x_t$. Thus help to solve the long-term dependencies.</p><p>Whether the gated cell let information flow through (open) or not (closed) depends on its inner sigmoid activation layer with a pointwise multiplication operation. A sigmoid function values between 0 and 1, it could be used to describe how much information is allowed to through the cell.</p><p>Take a most basic sequence problem as example - predict next word: the cell state might include the gender of the present subject, so that the correct pronouns can be used. When we see a new subject, we want to forget the gender of the old subject.</p><p>LSTM的细胞的直观理解，就是细胞可以完整地保存信息，而新的输入可以诱发细胞对旧信息的遗忘，细胞自行决定记忆哪些新信息。</p><p>LSTM 用遗忘门来决定从 cell state 中丢弃哪些信息。<br>Forget gate: Control how much information of pervious state $h_{t-1}$ should be forgetten in the current internal cell. Learned by a sigmoid layer called the “forget gate layer” <img src="http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-f.png" alt="" title="image from: http://colah.github.io/posts/2015-08-Understanding-LSTMs/"></p><p>用输入门 Input gate 来决定有多少新信息是值得储存的（记忆）。<br>Control how much new information is going to be remembered by internal state cell in current step t.<br>1, an input gate (a sigmoid hidden layer) decides which values we’ll update.<br>2, a hidden(tanh/relu) layer creates a vector of new candidate values $\hat{C}_t$, that could be added to the state. <img src="http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-i.png" alt="" title="image from: http://colah.github.io/posts/2015-08-Understanding-LSTMs/"></p><p>下一步就可以更新旧的 cell sate $C_{t-1}$.<br>Input and forget gates together allow the network to control what information is stored and overwritten at each step. Combine the forget and remember information together to update the previous cell state.<br><img src="http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-C.png" alt="" title="image from: http://colah.github.io/posts/2015-08-Understanding-LSTMs/"></p><p>最后，用一个输出门 Output gate 来决定要输出的内容。<br>1, Run a sigmoid layer to decide what parts of the cell state we’re going to output.<br>2, put the cell state through tanh pointwise operation (to push the values to be between −1 and 1) and multiply it by the output of the output gate, so that we only output the parts decided by the output gate.<br><img src="http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-o.png" alt="" title="image from: http://colah.github.io/posts/2015-08-Understanding-LSTMs/"></p><p>总的来说, LSTM有输入门、遗忘门和输出门。这三个门形式上，都是关于旧隐含状态和新输入向量的 Sigmoid 隐含神经网络层, 只是各自有各自的参数矩阵.</p><h3 id="Gated-Recurring-Unit"><a href="#Gated-Recurring-Unit" class="headerlink" title="Gated Recurring Unit"></a>Gated Recurring Unit</h3><p>GRU combines the forget and remember gates into one single gate. This combination leads to a simpler LSTMs model. This combined gate is called update gate. GRU first computes the update gate $z_t$ (another layer) based on current input word vector and hidden state. Then there is a reset gate r similarly but with different weights. The new memory content $\hat{h}_t$; Final memory $h_t$ at time step combines current and previous time steps:<br><img src="http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-var-GRU.png" alt="" title="image from: http://colah.github.io/posts/2015-08-Understanding-LSTMs/"></p><h4 id="GRU-intuition"><a href="#GRU-intuition" class="headerlink" title="GRU intuition"></a>GRU intuition</h4><ul><li>重置门赋予了模型丢弃与未来无关的信息的能力。若重置门接近于0，则忽略之前的记忆，仅储存新加入的信息.</li><li>更新门控制过去的状态对现在的影响程度（即决定更新多少），如果接近于1，则 h<sub>t</sub>=z<sub>t</sub>*h<sub>t-1</sub>, 等同于把过去的信息完整复制到未来，相应地缓解梯度衰减。</li><li>短距离依赖的单元，过去的信息仅保留很短的时间，重置门一般很活跃，也就是数值在0和1之间频繁变动。</li><li>长距离依赖的单元，重置门较稳定（保留过去的记忆较长时间），而更新门较活跃。</li></ul><h3 id="不同RNNs变种的比较"><a href="#不同RNNs变种的比较" class="headerlink" title="不同RNNs变种的比较"></a>不同RNNs变种的比较</h3><p>Vanilla RNNs Execution:</p><ol><li>Read the whole register h</li><li>Update the whole register</li></ol><p>GRU Execution:</p><ol><li>Select a readable subset</li><li>Read the subset</li><li>Select a writable subset</li><li>Update the subset</li></ol><p><img src="/images/gru.vs.lstm.png" alt="" title="image from: http://web.stanford.edu/class/cs224n"></p><h3 id="门控循环神经网络的训练"><a href="#门控循环神经网络的训练" class="headerlink" title="门控循环神经网络的训练"></a>门控循环神经网络的训练</h3><ol><li>把参数矩阵初始化为正交</li><li>把遗忘门的bias初始化为1，默认不遗忘</li><li>别忘了梯度裁剪</li><li>注意dropout在RNNs中的应用不同于DNN和CNN</li></ol><h3 id="Bidirectional-RNNs"><a href="#Bidirectional-RNNs" class="headerlink" title="Bidirectional RNNs"></a>Bidirectional RNNs</h3><p>Bidirectional RNNs are based on the idea that the output at time t may not only depend on the previous elements in the sequence, but also future elements. They are just two RNNs stacked on top of each other. The output is then computed based on the hidden state of both RNNs.<br><img src="/images/bidirectional_rnn.png" alt="" title="image from: http://web.stanford.edu/class/cs224n"></p><h2 id="Meaning-representations"><a href="#Meaning-representations" class="headerlink" title="Meaning representations"></a>Meaning representations</h2><p>意思的表达有很多方法。一种有效的表示单词的含义的方法是 distributional semantic.</p><blockquote><p>Semantics (from Ancient Greek: σημαντικός sēmantikos, “significant”) is the linguistic and philosophical study of meaning, in language, programming languages, formal logics, and semiotics.</p></blockquote><blockquote><p>语义学 Semantics 在语言学中的研究目的在于找出语义表达的规律性、内在解释、不同语言在语义表达方面的个性以及共性；与计算机科学相关的语义学研究在于机器对自然语言的理解。</p></blockquote><p>Tradition solution of usable meaning in a computer: Use e.g. WordNet, a resource containing lists of synonym sets and hypernyms.</p><p>To convert natural language into values that computer understands, represent words as discrete symbols: Words can be represented by one-hot vectors, Vector dimension is the vocabulary. But there is no natural notion of similarity for one-hot vectors!</p><p>So learn to encode similarity in the vectors themselves.</p><p>The core idea is representing words by their context, building a <strong>dense</strong> vector for each word, chosen so that it is similar to vectors of words that appear in similar contexts.</p><p><code>Distributional models of meaning = vector-­space models of meaning = vector semantics</code>.<br><code>word vectors = word embeddings = word representations</code>.</p><h3 id="Four-kinds-of-vector-models"><a href="#Four-kinds-of-vector-models" class="headerlink" title="Four kinds of vector models"></a>Four kinds of vector models</h3><p>Sparse vector representations:<br>1, Mutual-­information weighted word co-­occurrence matrices</p><p>Dense vector representations:<br>2, Singular value decomposition (SVD): A special case of this is called LSA - Latent Semantic Analysis<br>3, Neural­‐network­‐inspired models (skip­‐grams, CBOW)<br>4, Brown clusters</p><p>Prediction-­based models learn embeddings as part of the process of word prediction. Train a neural network to predict neighboring words. The advantages:<br>· Fast, easy to train (much faster than SVD)<br>· Available online in the word2vec package<br>· Including sets of pretrained embeddings</p><h3 id="Word-representation-and-Word2vec"><a href="#Word-representation-and-Word2vec" class="headerlink" title="Word representation and Word2vec"></a>Word representation and Word2vec</h3><p>Word2vec is a framework for learning word vectors representation.<br>Idea:<br>1, We have a large corpus of text<br>2, Every word in a fixed vocabulary is represented by a vector<br>3, Go through each position t in the text, which has a center word c and context (“outside”) words o<br>4, Use the similarity of the word vectors for c and o to calculate the probability of o given c (or vice versa)<br>5, Keep adjusting the word vectors to maximize this probability</p><p>在上面第四点, 如果是给定中心词，计算上下文词, 那么就是 <strong>Skip-grams model</strong>, 比如 Given word w<sub>t</sub>, in a context window of 2C words, predict 4 context words [w<sub>t-2</sub>, w<sub>t-1</sub>, w<sub>t+1</sub>, w<sub>t+2</sub>]<br><img src="/images/word2vec_window.png" alt="" title="Example windows and process for computing P(w&lt;sub&gt;t+j&lt;/sub&gt; | w&lt;sub&gt;t&lt;/sub&gt;), image from: http://web.stanford.edu/class/cs224n"><br>Skip-grams 给予模型跳词能力，比如 “I hit the tennis ball” 有三个trigrams: “I hit the”, “hit the tennis”, “the tennis ball”. 但是，这个句子也同样包含一个同样重要但是N-Gram无法提取的trigram:”hit the ball”. 而使用 skip-grams 允许我们跳过 “tennis” 生成这个trigram.</p><p>反之，给定 bag-of-words context, predict target word, 那就是 <strong>Continuous Bag of Words, CBOW model</strong>.</p><p>缺点：因为output size 等于 vocabulary，而 softmax 分母中需要求和每一个词的 output size × hidden units 的内积， 计算会非常昂贵。解决办法是使用负采样 <a href="#negative-sampling">negative sampling</a>。</p><p>Word2vec的本质是遍历语料库的每一个词$w_i$，捕捉$w_i$与其上下文位置目标词的同时出现的概率。</p><h4 id="目标函数-Obejective-funtion-cost-or-loss-function-J-θ"><a href="#目标函数-Obejective-funtion-cost-or-loss-function-J-θ" class="headerlink" title="目标函数 Obejective funtion (cost or loss function) J(θ):"></a>目标函数 Obejective funtion (cost or loss function) J(θ):</h4><p>For each position $t = 1, … , T$, predict context words within a window of fixed size m, given center word, use chain rule to multiply all the probability to get the likelihood $L(θ)$:<br><img src="/images/word2vec_likelihood.png" alt="" title="Function for L(θ), image from: http://web.stanford.edu/class/cs224n"><br>The θ is the vectors representations, which is the only parameters we needs to optimize(其实还有其他hyperparameters，这里暂时忽略).</p><p>The loss function is the (average) negative log likelihood:<br><img src="/images/word2vec_costfunction.png" alt="" title="image from: http://web.stanford.edu/class/cs224n"></p><p>Minimizing objective function ⟺ Maximizing predictive accuracy.</p><p>The problem is how to calculate $P(w_{t+j} \mid w_t; θ)$:</p><p>每个词由两个向量表示（Easier optimization. Average both at the end）：<br>$v_w$ when w is a center word, $u_w$ when w is a context word.</p><p>Then for a center word c and a “outside” word o:<br><img src="/images/word2vec_conprobability.png" alt="" title="image from: http://web.stanford.edu/class/cs224n"><br>The numerator contains dot product, compares similarity of o and c, larger dot product = larger probability. The denominator works as a normalization over entire vocabulary.</p><h4 id="高频词二次采样-subsampling"><a href="#高频词二次采样-subsampling" class="headerlink" title="高频词二次采样 subsampling"></a>高频词二次采样 subsampling</h4><p>二次采样是指当决定是否选取一个词作为样本时，它被选择的概率反比于它出现的概率，这样不仅可以降低无意义但高频的词(“the”, “a”等)的重要性，也可以加快采样速度。$$P(w_i) = (\sqrt{\frac{z(w_i)}{0.001}} + 1) \cdot \frac{0.001}{z(w_i)}$$ $z(w_i)$ 是词$w_i$在语料库中的占比，如果”peanut”在10亿语料库中出现了1,000次, 那么z(“peanut”) = 1e-6.<br><img src="/images/sub-sample.png" alt="" title="sub sample of P(wi)"></p><h4 id="Negative-sampling"><a href="#Negative-sampling" class="headerlink" title="Negative sampling"></a>Negative sampling</h4><p>负采样是指每个训练样本仅更新模型权重的一小部分：only the output that represents the positive class(1) + other few randomly selected classes(0) are evaluated.<br><a href="https://arxiv.org/pdf/1310.4546.pdf" target="_blank" rel="noopener">该论文指出</a></p><blockquote><p>负采样5-20个单词适用于较小的数据集，对于大型数据集只需要2-5个单词。</p></blockquote><p>修改目标函数，选择k个负样本（即除了概率最高的那个目标词之外的其他词）：<img src="/images/negative-sample.png" alt="" title="image from: http://web.stanford.edu/class/cs224n"></p><p>这样可以最大化真正的外部词出现的概率，最小化随机负采样的词概率。</p><p>负面样本的选择是基于 unigram 分布 $f(w_i)$: 一个词作为负面样本被选择的概率与其出现的频率有关，更频繁的词更可能被选作负面样本。<br>$$P(w_i) = \frac{  {f(w_i)}^{3/4}  }{\sum_{j=0}^{n}\left(  {f(w_j)}^{3/4} \right) }$$<br>负采样的优点是：<br>· Training speed is independent of the vocabulary size<br>· Allowing parallelism.<br>· 模型的表现更好。因为负采样契合NLP的稀疏性质，大部分情况下，虽然语料库很大，但是每一个词只跟很小部分词由关联，大部分词之间是毫无关联的，从无关联的两个词之间也别指望能学到什么有用的信息，不如直接忽略。</p><h4 id="与传统的NLP方法比较"><a href="#与传统的NLP方法比较" class="headerlink" title="与传统的NLP方法比较"></a>与传统的NLP方法比较</h4><p>在word2vec出现之前，NLP使用经典且直观的共生矩阵（co-occurrence matrix）来统计词语两两同时出现的频率，参考<a href="/NOTE-ANLP-01-distributional-semantic-models">ANLP - Distributional semantic models</a>。缺点也明显，词汇量的增加导致矩阵增大，需要大量内存，随之而来的分类模型出现稀疏性问题，模型不稳定。虽然可以使用SVD来降维，但是一个<code>n×m</code>矩阵的计算成本是O(mn<sup>2</sup>)浮点数（当<code>n&lt;m</code>），还是非常大的。而且很难并入新词或新文档。<br><img src="/images/count_based_vs_direct_prediction.png" alt="" title="Count based vs direct prediction, image from: http://web.stanford.edu/class/cs224n"></p><p>目前融合了两种方法的优点的Glove是最常用的。</p><h4 id="TODO-Glove"><a href="#TODO-Glove" class="headerlink" title="TODO(Glove)"></a>TODO(Glove)</h4><h3 id="Morphological-Recursive-Neural-Network-morphoRNN"><a href="#Morphological-Recursive-Neural-Network-morphoRNN" class="headerlink" title="Morphological Recursive Neural Network (morphoRNN)"></a>Morphological Recursive Neural Network (morphoRNN)</h3><p>Limitation of word2vec:<br>• Closed vocabulary assumption<br>• Cannot exploit functional relationships in learning:</p><blockquote><p>如英语的dog、dogs和dog-catcher有相当的关系，英语使用者能够利用他们的背景知识来判断此关系，对他们来说，dog和dogs的关系就如同cat和cats，dog和dog-catcher就如同dish和dishwasher</p></blockquote><p>To walk closer to open vocabulary, use compositional representations based on morphemes. Instead of word embedding, embed morphemes - the smallest meaningful unit of language.  Compute representation recursively from morphemes, word embedding 由 morphemes embedding 拼接而来.<img src="/images/Morphological_Recursive_Neural_Network.png" alt="" title="Morphological Recursive Neural Network. A vector representation for the word &quot;unfortunately&quot; is constructed from morphemic vectors: un&lt;sub&gt;pre&lt;/sub&gt;, fortunate&lt;sub&gt;stm&lt;/sub&gt;, ly&lt;sub&gt;suf&lt;/sub&gt;. Dotted nodes are computed on-the-fly and not in the lexicon. image from: http://www.aclweb.org/anthology/W13-3512"></p><p>与基础版的morphoRNN结构相同，Context-insensitive Morphological RNN model (cimRNN) 考察 morphoRNN 在不参考任何上下文信息情况下， 仅仅用 morphemic representation 构造词向量的能力。训练时，给每个词xi定义损失函数s(xi)为新构造的词向量p<sub>c</sub>(xi)和参考词向量p<sub>r</sub>(xi)之间的欧几里得距离平方<br><img src="/images/cimRNN_cost.png" alt=""></p><p>该cimRNN模型没有机会改进可能被估计不足的罕见词的表达.</p><p>Context-sensitive Morphological RNN (csmRNN) 在学习语素组成时同时参考语境信息，在训练过程中，神经网络顶层的更新将一直反向传播直至底层的语素层。<br><img src="/images/Context_sensitive_morphological_RNN.png" alt="" title="Context-sensitive morphological RNN has two layers: (a) the morphological RNN, which constructs representations for words from their morphemes and (b) the word-based neural language which optimizes scores for relevant ngrams. image from: http://www.aclweb.org/anthology/W13-3512"></p><h3 id="Compositional-character-representations"><a href="#Compositional-character-representations" class="headerlink" title="Compositional character representations"></a>Compositional character representations</h3><p>在自然语言处理中使用 word 作为基本单位的问题在于词汇量太大了，所以几乎所有主流模型都会省略很多词，比如Bengio的RNNs语言模型就把所有出现频率<code>&lt;3</code>的单词统一标记为一个特殊词。但这样的操作也只是把词汇量降到了16,383。又比如word2vec模型只考虑出现频率最高的30,000个词。</p><p>所以寻找其他有限集合的语言单位成为替代选择，比如字母 character（更确切地说是 unicode code points），比如前面提到的 Morphemes，还有其他比如 Character n-grams，Morphological analysis等，这些可以统称为 subwords units。</p><p>然后再通过 subwords 来重构 word representation，进而构建整个文本的meaning representation.</p><p>构建 word representation 最简单的方法就是把 subwords vectors 相加、平均或者拼接等，但更好的是使用非线性的方法，比如 Bidirectional LSTMs, Convolutional NNs 等。<br><img src="/images/char_rep.png" alt="" title="Compose character representations into word representations with LSTMs. Illustration of the word lookup tables (top) and the lexical Composition Model (bottom). Square boxes represent vectors of neuron activations. Shaded boxes indicate that a non-linearity. image from: Finding function in form: compositional character models for open vocabulary word representation, Ling et al. 2015"></p><h4 id="哪种方式构建-subword-representations-比较好？"><a href="#哪种方式构建-subword-representations-比较好？" class="headerlink" title="哪种方式构建 subword representations 比较好？"></a>哪种方式构建 subword representations 比较好？</h4><p>在 word representation 的重构中，涉及了几个变量:<br>1, Subword Unit<br><img src="/images/Subword_Unit.png" alt="" title="The last row is part of an oracle: the true morphology, a human annotator."></p><p>2, Composition Function<br>• Linear Vector operation<br>• Bi-LSTMs<br>• Convolutional NNs</p><p>3, Language Typology</p><table><thead><tr><th>Type</th><th>example</th><th>Morphology</th><th>analysis</th></tr></thead><tbody><tr><td>Fusional (English)</td><td>“reads”</td><td>read-s</td><td>read-3SG.SG</td></tr><tr><td>Agglutinative (Turkish)</td><td>“If I read …”</td><td>oku-r-sa-m</td><td>read-AOR.COND.1SG</td></tr><tr><td>Root&amp;Pattern (Arabic)</td><td>“he wrote”</td><td>k(a)t(a)b(a)</td><td>write-PST.3SG.M</td></tr><tr><td>Reduplication (Indonesian)</td><td>“children”</td><td>anak~anak</td><td>child-PL</td></tr></tbody></table><p><img src="/images/sum_biLSTMs_char_trigrams.png" alt="" title="Summary of perplexity: use biLSTMs over character trigrams. In general, the results are better than vanilla word representation"></p><p>除了语言模型外, 其他NLP任务如SQuAd问答数据集上的很多优秀模型，也会加入character embedding.</p><p>但目前 Character-level models 并不具有触及实际 morphology 的模型预测能力。</p><h3 id="Multi-word-language-representations"><a href="#Multi-word-language-representations" class="headerlink" title="Multi-word language representations"></a>Multi-word language representations</h3><p><strong>Neural bag-of-words models</strong>:<br>· Simply average (or just sum) word vectors,<br>· Can improve effectiveness by putting output through 1+ fully connected layers (DANs)<br>· Recurrent neural networks(LSTM/GRU): cannot capture phrases without prefix context, and empirically, representations capture too much of last words in final vector – focus is LM next word prediction<br>· Convolutional Neural Network: compute vectors for every h-word phrase, often for several values of h. Example: “the country of my birth” computes vectors for: the country, country of, of my, my birth, the country of, country of my, of my birth, the country of my, country of my birth. Not very linguistic, but you get everything!</p><p><strong>Data-dependent composition</strong>:<br>Recursion is natural for describing language, Phrases correspond to semantic units of language.</p><p>How to map longer phrases into the same vector space?<br>利用复合性原理 principle of compositionality:</p><blockquote><p>在数学、语义学和语言哲学中，复合性原理是指，一个复杂表达式的意义是由其各组成部分的意义以及用以结合它们的规则来决定的。</p></blockquote><p>Recursive neural nets, a tree structure.<br>For Structure Prediction:<br>Inputs: two candidate children’s representations<br>Outputs:<br>1, The semantic representation if the two nodes are merged.<br>2, Score of how plausible the new node would be.</p><h2 id="神经网络语言模型"><a href="#神经网络语言模型" class="headerlink" title="神经网络语言模型"></a>神经网络语言模型</h2><p>如何构建一个神经网络语言模型?<br>语言模型的目的是输入一串字符, 输出下一个字符的概率分布, 可以使用 fixed-window neural Language Model, 类似于N-Gram, 仅考虑前(n-1)个窗口长度序列, “<del>as  the  proctor  started  the clock</del> the students opened their _“ 得到定长的输入序列, 而 Feedforward neural networks 的输入就是要求固定长度的向量.<br><img src="/images/fixed_window_nn_lm.png" alt="" title="一个固定长度的神经网络语言模型 image from: http://web.stanford.edu/class/cs224n"></p><p>用前馈神经网络做语言模型的优点（相对于N-Gram）就是没有了稀疏性问题，而且模型的大小也控制在 <code>O(n)</code>（N-Gram是<code>O(exp(n))</code>）</p><p>固定长度的前馈神经网络的固有缺陷就是它要求输入和输出都是固定长度的, 仅考虑前的(n-1)长度的序列, 很多时候会丢失NLP中的长距离依赖信息, 跟N-Gram的有一样的缺陷。而且实际的应用中语句的长度是不固定的，最好有一个神经网络可以接受任意长度的输入序列, 输出任意长度的序列。循环神经网络 (Recurrent neural networks, aka RNNs) 就可以解决这个问题.</p><h2 id="循环神经网络语言模型"><a href="#循环神经网络语言模型" class="headerlink" title="循环神经网络语言模型"></a>循环神经网络语言模型</h2><p>不同于前馈神经网络使用输入序列的每一个词单独训练一行(或一列, 取决于矩阵的设计)参数矩阵, RNNs的设计核心是用输入序列的每一个词, 反复地训练同一个参数, 即”共享参数”.<br><img src="/images/rnn_lm.png" alt="" title="RNNs神经网络语言模型 image from: http://web.stanford.edu/class/cs224n"></p><p>因为参数共享:<br>1, 模型大小不会随着输入序列长度增加而增加。<br>2, 每一步的计算，理论上都使用到了之前的历史信息，所以理论上可以更好的捕捉长距离依赖（但实际上表现并不好，看后面的<a href="#梯度消失与爆炸">梯度消失与爆炸</a>）.<br>3, 模型有更好的泛化能力</p><p>使用基于Softmax的RNNs语言模型等同于解决矩阵分解问题, 参考<a href="https://openreview.net/forum?id=HkwZSG-CZ" target="_blank" rel="noopener">Breaking the Softmax Bottleneck: A High-Rank RNN Language Model</a>。</p><p>循环神经网络语言模型使用损失函数评估模型表现: 损失函数 loss function on step t is usual 交叉熵 cross-entropy between predicted probability distribution and the true next word.</p><p>传统的统计语言模型使用困惑度(perplexity)来评估模型表现，但其实降低困惑度等价于减小损失函数.</p><h2 id="神经网络语言模型的学习能力"><a href="#神经网络语言模型的学习能力" class="headerlink" title="神经网络语言模型的学习能力"></a>神经网络语言模型的学习能力</h2><p>Character models are good at reduplication (no oracle, though), works well on language with reduplication patterns like Indonesian, Malay. Character NLMs learn word boundaries, memorize POS tags.</p><p>What do NLMs learn about morphology?<br>1, Character-level NLMs work across typologies, but especially well for agglutinative morphology.<br>2, predictive accuracy is not as good as model with explicit knowledge of morphology (or POS).<br>3, They actually learn orthographic similarity of affixes, and forget meaning of root morphemes accordong to qualitative analyses.<br>4, More generally, they appear to <strong>memorize frequent subpatterns</strong></p><p>总的来说，神经网络处理自然语言的能力并不特殊，表现的性能，跟神经网络本身的长处相匹配，如泛化、模式匹配、端到端应用的能力等。</p><h2 id="Dependency-parsing"><a href="#Dependency-parsing" class="headerlink" title="Dependency parsing"></a>Dependency parsing</h2><p>语言学里有两种角度看待语法结构 - Constituency and Dependency：</p><ul><li>Constituency: phrase structure grammar, 从句子成分构造的角度看，capture the configurational patterns of sentences，即把句子的语法理解为词组成分的递归嵌套. 可以用 context-free grammars (CFGs) 来表达语法规则，就是语法树。</li><li>Dependency syntax: 主要是从语义的角度来看，显示哪些单词依赖于（一般指修改或作为参数其参数）哪些单词。特别用于区分动词的主格（subject position or with nominative inflection）宾格（object position or with accusative inflection）. Dependencies can be identified even in non-configurational languages.</li></ul><p>A sentence dependency structure explains the <strong>dependency relation</strong> between its words: represented as a graph with the words as its nodes, linked by directed, labeled edges, with the following properties:<br>• connected: every node is related to <strong>at least one other node</strong>, and (through transitivity) to ROOT;<br>• single headed: every node (except ROOT) has exactly <strong>one incoming edge</strong> (from its head);<br>• acyclic: the graph cannot contain cycles of directed edges.<br><img src="/images/dependency_relation.png" alt="" title="A dependency relation consists of: a head (H); a dependent (D); a label identifying the relation between H and D. image from: Joakim Nivre, Dependency Grammar and Dependency Parsing."></p><p>Dependency trees 有两种，如果dependency graph中有edges交叉则是<strong>non-projective</strong>, 反之则是 <strong>projective</strong>。更确切的定义是：A dependency tree is <strong>projective</strong> wrt. a particular linear order of its nodes if, for all edges <code>h → d</code> and nodes w, w occurs between h and d in linear order only if w is dominated by h.</p><p>A non-projective dependency grammar is not context-free.<br><img src="/images/non_projective.jpg" alt="" title="上图是 non-projective，下图是 projective. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l07.pdf"></p><p>Motivation for Dependency parsing:<br>• context-free parsing algorithms base their decisions on adjacency;<br>• in a dependency structure, a dependent need not be adjacent to its head (even if the structure is projective);<br>• we need new parsing algorithms to deal with non-adjacency (and with non-projectivity if present).</p><p>Evaluation: accuracy (# correct dependencies with or ignore label)).</p><h3 id="Graph-based-dependency-parsing"><a href="#Graph-based-dependency-parsing" class="headerlink" title="Graph-based dependency parsing"></a>Graph-based dependency parsing</h3><p>Based on <strong>maximum spanning trees (MST parser)</strong>, views syntactic structure as a set of constraints</p><p>Intuition as tagging problem: since each word has exactly one parent, the possible tags are the other words in the sentence (or a dummy node called root). If we <strong>edge factorize</strong> the score of a tree so that it is simply the product of its edge scores, then we can simply select the best incoming edge for each word.</p><p>The tartget function is to find the highest scoring dependency tree in the space of all possible trees for a sentence. The score of dependency tree y for sentence x is:<br>$$s(x,y) = \sum_{(i,j)\in y} s(i,j)$$<br>$x = x_1…x_n, y$ is a set of dependency edges, with $(i, j) ∈ y$ if there is an edge from $x_i$ to $x_j$.</p><p>Scoring edges with a neural network<br><img src="/images/dependency_nn_edge_scores.jpg" alt="" title="Get a&lt;sub&gt;i&lt;/sub&gt; by concatenating the hidden states of a forward and backward RNN at position i. image from: Zhang and Lapata (2016)"><br>The function g(a<sub>j</sub>, a<sub>i</sub>) computes an <strong>association score</strong> telling us how much word wi prefers word wj as its head. Association scores are a useful way to select from a dynamic group of candidates, 跟注意力机制的similarity score 异曲同工，方程的形式也很相似。</p><p>Parsing 算法：</p><ul><li>start with a <strong>totally connected graph</strong> G, i.e., assume a directed edge between every pair of words;</li><li>find the maximum spanning tree (MST) of G, i.e., the directed tree with the highest overall score that includes all nodes of G;</li><li>this is possible in O(n<sup>2</sup>) time using the <strong>Chu-Liu-Edmonds algorithm</strong>; it finds a MST which is not guaranteed to be projective;<br>  1, Each node j in the graph greedily selects the incoming edge with the highest score s(i,j)<br>  2, If result were a tree, it would have to be the maximum spanning tree; If not, there must be a cycle.<br>  3, Break the cycle by replacing a single incoming edge to one of the nodes in the cycle. To choose the node, decide recursively by identifying the cycle and contract it into a single node and recalculate scores of incoming and outgoing edges. Now call CLE recursively on the contracted graph. MST on the contracted graph is equivalent to MST on the original graph. 这里是指先识别出循环体<code>saw ⇄ john</code>②，然后在这个循环体范围内，使用CLE找出 root 进出这个循环体的最大概率路线<code>(root → saw → john = 40) &gt; (root → john → saw = 29)</code>③；<br>  4, Greedily collect incoming edges to all nodes, find out to be a tree and thus the MST of the graph. 把循环体以及其包含的nodes合并为一个node wjs，并且已经有了进出wjs的最大概率路径，这样就可以在整个图上继续运行CLE算法找出最大概率路线<code>(root → wjs → mary = 70) &gt; (root → mary → wjs = 40)</code>④.<br><img src="/images/break_the_cycle.jpg" alt="" title="Graph-based dependency parsing procedure. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l07.pdf"></li></ul><p>Chu-Liu-Edmonds (CLE) Algorithm:</p><blockquote><p>In graph theory, Edmonds’ algorithm or Chu–Liu/Edmonds’ algorithm is an algorithm for finding a spanning arborescence of minimum weight (sometimes called an optimum branching). It is the directed analog of the minimum spanning tree problem</p></blockquote><h3 id="Transition-based-dependency-parsing"><a href="#Transition-based-dependency-parsing" class="headerlink" title="Transition-based dependency parsing"></a>Transition-based dependency parsing</h3><p>An extension of shift-reduce parsing (MALT parser), views syntactic structure as the actions of an automaton:<br>• for a given parse state, the transition system defines a set of actions T which the parser can take;<br>• if more than one action is applicable, a machine learning classifier is used to decide which action to take;<br>• just like in the MST model, this requires a mechanism to compute scores over a set of (possibly dynamic) candidates.<br><img src="/images/Transition_based_Dependency_Parsing.png" alt="" title="Configuration c = (s, b, A) with stack s, buffer b, set of dependency arcs A; c is terminal if buffer is empty, stack contains only ROOT, and parse tree is given by Ac image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l07.pdf"><br>if si is the ith top element on stack, and bi the ith element on buffer, then we have the following transitions:<br>• <code>LEFT-ARC(l)</code>: adds arc <code>s1 → s2</code> with label <code>l</code> and removes s2 from stack (|s| ≥ 2);<br>• <code>RIGHT-ARC(l)</code>: adds arc <code>s2 → s1</code> with label <code>l</code> and removes s1 from stack (|s| ≥ 2);<br>• <code>SHIFT</code>: moves b1 from buffer to stack; recondition: |b| ≥ 1.<br>总的来说就是：父节点保留在stack中; 从始至终 root 一直都是父节点；从 buffer 中把候选词一个一个 push 到stack中，根据 classifier 预测的结果，分辨出哪个候选词是子节点，并把子节点 pop 出 stack；直到清空 buffer，stack 中只剩下 root。</p><h3 id="Comparing-MST-and-transition-based-parsers"><a href="#Comparing-MST-and-transition-based-parsers" class="headerlink" title="Comparing MST and transition-based parsers:"></a>Comparing MST and transition-based parsers:</h3><p>Both require dynamic classifiers, and these can be implemented using neural networks, conditioned on bidirectional RNN encodings of the sentence.</p><p>The MST parser selects the globally optimal tree, given a set of edges with scores;<br>• it can naturally handle projective and non-projective trees;</p><p>A transition-based parser makes a sequence of local decisions about the best parse action;<br>• it can be extended to projective dependency trees by changing the transition set;</p><p>Accuracies are similar, but transition-based is faster;</p><h2 id="Recurrent-neural-network-grammars-RNNGs"><a href="#Recurrent-neural-network-grammars-RNNGs" class="headerlink" title="Recurrent neural network grammars (RNNGs)"></a>Recurrent neural network grammars (RNNGs)</h2><p>Widespread phenomenon: <strong>Polarity items</strong> can only appear in certain contexts, e.g. “anybody”.</p><blockquote><p>In linguistics, a <strong>polarity item</strong> is a lexical item that can appear only in environments associated with a particular grammatical polarity – affirmative or negative. A polarity item that appears in affirmative (positive) contexts is called a positive polarity item (PPI), and one that appears in negative contexts is a negative polarity item (NPI).</p></blockquote><blockquote><p>The environment in which a polarity item is permitted to appear is called a “<strong>licensing context</strong>“.</p></blockquote><p>The lecture that I gave did not appeal to anybody;<br><del>The lecture that I gave appealed to anybody.</del></p><p>也许”anybody”出现的条件是前面出现过”not”，那么应该可以使用 RNNs 模型来解码这点信息。然而:<br><del>The lecture that I did not give appealed to anybody.</del></p><p>这说明 Language is hierarchical: The <strong>licensing context</strong> depends on recursive structure (syntax)。不能简单根据”not”是否出现来判断，而是需要看”not”修饰的成分，也就是说要考虑语法的合理。这就给文本生成任务（或者说构建语言模型）带来挑战。</p><p><a href="https://arxiv.org/pdf/1602.07776.pdf" target="_blank" rel="noopener">Recurrent neural network grammars (Dyer et al. 2016)</a>提出了一种具有明确短语结构的语言模型 RNNGs。</p><blockquote><p> RNNGs operate via a recursive syntactic process reminiscent of probabilistic context-free grammar generation, but decisions are parameterized using RNNs that condition on the entire syntactic derivation history, greatly relaxing context-free independence assumptions.</p></blockquote><p>就是在使用 RNNs 构建语言模型，除了考虑历史词信息, 还会生成历史的语法结构, 并以此为参考预测语法结构和词语,以保证生成的语言符合语法结构。这里的语法是针对 phrase structure (constituency) grammars，所以 RNNGs 也是一种 <strong>constituency parsing</strong>：</p><ul><li>Generate symbols sequentially using an RNN</li><li>Add some “control symbols” to rewrite the history periodically<ul><li>Periodically “compress” a sequence into a single “constituent”</li><li>Augment RNN with an operation to compress recent history into a single vector (-&gt; “reduce”)</li><li>RNN predicts next symbol based on the history of compressed elements and non-compressed terminals (“shift” or “generate”)</li><li>RNN must also predict “control symbols” that decide how big constituents are</li></ul></li></ul><p>首先注意到，如果有序地去遍历语法树，得出的就是一个序列：<br><img src="/images/tree_traversals.gif" alt="" title="(Ordered) tree traversals are sequences. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></p><p>What information can we use to predict the next action, and how can we encode it with an RNN?</p><p>Use an RNN for each of:</p><ul><li>Previous terminal symbols</li><li>Previous actions</li><li>Current stack contents<br><img src="/images/tree_traversals_table.gif" alt="" title="Actions prediction. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"><br>最后得出的 stack 就是完整的语法树（以序列的形式）。</li></ul><h3 id="Syntactic-Composition"><a href="#Syntactic-Composition" class="headerlink" title="Syntactic Composition"></a>Syntactic Composition</h3><p>人们通过较小元素的语义组合来解释较大文本单元的含义 - 实体，描述性词语，事实，论据，故事.<br>When compressing “The hungry cat” into a single composite symbol, use Bi-LSTM to encode <code>(NP The hungry cat)</code>.<br><img src="/images/NP_The_hungry_cat.png" alt="" title="Representation of (NP The hungry cat). image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></p><p>基于此可以递归地解码更复杂的短语，比如<code>(NP The (ADJP very hungry) cat)</code>, 只需要把原来的<code>hungry</code>替换为<code>(ADJP very hungry)</code>即可。</p><p>这种递归地堆栈符号的构建行为映射了符号对应的树结构<br><img src="/images/Stack_symbols_composed_recursively.png" alt="" title="Stack encodes top-down syntactic recency, rather than left-to-right string recency. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></p><p>除此了使用 Bi-LSTM 解码，还可以使用 Attention：Replace composition with one that computes attention over objects in the composed sequence, using embedding of NT for similarity.</p><h3 id="Implement-RNNGs"><a href="#Implement-RNNGs" class="headerlink" title="Implement RNNGs"></a>Implement RNNGs</h3><p>Stack RNNs</p><ul><li>Augment a sequential RNN with a <strong>stack pointer</strong></li><li>Two constant-time operations<ul><li><label style="color:#1565C0"><strong>push</strong></label> - read input, add to top of stack, connect to current location of the stack pointer</li><li><label style="color:#C62828"><strong>pop</strong></label> - move stack pointer to its parent</li></ul></li><li>A <strong>summary</strong> of stack contents is obtained by accessing the output of the RNN at location of the stack pointer<br><img src="/images/stack_LSTM_over_time.gif" alt="" title="The evolution of the stack LSTM over time mirrors tree structure. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></li></ul><p>Training RNNs:</p><ul><li>Each word is conditioned on history represented by a trio of RNNs</li><li>backpropagate through these three RNNs, and recursively through the phrase structure <code>S → NP VP</code>.<br><img src="/images/RNNGs_history_informationn.png" alt="" title="RNNs compute probability conditions on histroy. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></li></ul><p>完整的RNNGs模型，用 softmax 计算下一个 action 的概率分布：<br><img src="/images/RNNGs_model.png" alt="" title="Complete RNNGs model. x is sentence, y is tree; $A_G$ is allowable actions at this step;  $a(x,y)$ is sequence of actions, ; $r_α$ is action embedding, $u_t$ is history embedding; $o_t$ is output (buffer), $s_t$ is stack, $h_t$ is action history, the three are concatenated together. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></p><h3 id="Parameter-Estimation"><a href="#Parameter-Estimation" class="headerlink" title="Parameter Estimation"></a>Parameter Estimation</h3><p>RNNGs jointly model sequences of words together with a “tree structure”.</p><p>Any parse tree can be converted to a sequence of actions (depth first traversal) and vice versa (subject to wellformedness constraints).</p><h3 id="Inference-problems-of-RNNGs"><a href="#Inference-problems-of-RNNGs" class="headerlink" title="Inference problems of RNNGs"></a>Inference problems of RNNGs</h3><p>An RNNG is a joint distribution p(x,y) over strings (x) and parse trees (y), i.e. it jointly predicts the word, and the parse context together. So the model will still generate the syntactic information and the next word but we can discard the additional outputs if all we want is the language model.</p><p>Two inference questions:<br>• What is $p(x)$ for a given x? - language modeling<br>• What is $argmax_yp(y | x)$ for a given x? - parsing</p><p>The model predicts the next action (NT() GEN() or REDUCE in generative mode, NT() SHIFT or REDUCE in discriminative mode). The set of actions completely determines the string and tree structure, so we can get their joint probability by multiplying over the probabilities of all actions.</p><p>In discriminative mode, the input is a string of words, and the model cannot generate words, but instead “consumes” the words in the input buffer. The model can be used as a parser (find the maximum prob. tree, i.e., $argmax_yP(y \mid x)$).</p><p>In generative mode, there is a respective GEN() action for every word, so the word is predicted with the action. To be a language model (find the maximum prob. sentence/assign probabilities to a sentence, i.e., $p(x)$), we must marginalize over trees to get the probability of the sentence. This is intractable so is approximated with importance sampling by sampling from a discriminatively trained model.</p><h3 id="importance-sampling"><a href="#importance-sampling" class="headerlink" title="importance sampling"></a>importance sampling</h3><p>Assume we”ve got a conditional distribution $q(y | x)$<br>s.t. (i) $p(x, y) &gt; 0 \Rightarrow q(y | x) &gt; 0$<br>(ii) $y \sim q(y | x)$ is tractable and<br>(iii) $q(y | x)$ is tractable</p><p>The importance weights $w(x,y) = \frac{p(x, y)}{q(y | x)}$</p><p><img src="/images/Importance_Sampling.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l08.pdf"></p><h3 id="从句子到语法树的seq2seq模型"><a href="#从句子到语法树的seq2seq模型" class="headerlink" title="从句子到语法树的seq2seq模型"></a>从句子到语法树的seq2seq模型</h3><p>其实从句子到语法的映射类似于一个seq2seq模型。而直接的把语法树以字符序列的形式表达，使用简单的 RNNs 直接构建句子到语法序列的 seq2seq 模型效果也不错，比如：<br>input:     The hungry cat meows .<br>output:    S( NP( _ _ _ ) VP( _ ) _ )<br>Vanilla RNNs 在模式匹配和计数方面非常出色，经验证明，训练有素的 seq2seq 模型通常会输出格式良好的字符串，见<a href="https://arxiv.org/abs/1412.7449" target="_blank" rel="noopener">这篇文章 section 3.2</a></p><p>但潜在的问题是，seq2seq 模型并不要求输出是有正确括号字符（数量对齐，位置正确）。另外，理论上单个RNN也只能记忆括号结构一定的有限深度，因为 RNNs 只有固定的有限数量的隐藏单元。例如，它将为这些输出分配非零概率：<br>S( NP( _ _ ) VP ( _ ) _ )<br>S( NP( _ _ _ ) VP ( _ ) _ ) ) )</p><p>理想情况下，模型应该给任何不完整的输出分配零概率。使用 RNNGs 是因为它本身能够履行这些限制， 保证生成完整正确的语法树。</p><p>从中可以看出，seq2seq模型可以用于快速原型和 baseline 搭建，但如果遇到要求输出遵守某些约束条件的问题，则需要直接执行这些约束条件。</p><h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><p>Parsing is a fundamental task in NLP. But what is parsing actually good for?</p><p>Parsing breaks up sentences into meaningful parts or finds meaningful relationships, which can then feed into downstream semantic tasks:<br>• semantic role labeling (figure out who did what do whom);<br>• semantic parsing (turn a sentence into a logical form);<br>• word sense disambiguation (figure out what the words in a sentence mean);<br>• compositional semantics (compute the meaning of a sentence based on the meaning of its parts).</p><h2 id="Semantic-role-labeling-SRL"><a href="#Semantic-role-labeling-SRL" class="headerlink" title="Semantic role labeling (SRL)"></a>Semantic role labeling (SRL)</h2><p>虽然可以使用 Distributional semantics 表达含义，只是 Distributional semantics 比较擅长处理相似度，且无法很明确地处理复合性 Compositionality。</p><blockquote><p>在数学、语义学和语言哲学中，复合性原理是指，一个复杂表达式的意义是由其各组成部分的意义以及用以结合它们的规则来决定的。</p></blockquote><p>为了能够处理复合性和推理，我们需要象征性和结构化的意义表示。</p><p>虽然语言是无穷无尽的，句子是无限的集合，而人脑的能力却是有限的，但人们总能够理解一个句子的含义（假如人们熟知表达句子的语言）. 因此, 对于 semantics, 语义肯定是有限的集合, 这样才能确定句子的确切意义.</p><blockquote><p>In generative grammar, a central principle of formal semantics is that the relation between syntax and semantics is <strong>compositional</strong>.</p></blockquote><blockquote><p>The principle of compositionality (Fregean Principle): The meaning of a complex expression is determined by the meanings of its parts and the way they are syntactically combined.</p></blockquote><p>Semantic role labeling means identifying the arguments (<strong>frame elements</strong>) that participate in a prototypical situation (frame) and labeling them with their roles;</p><p>SRL task is typically broken down into a sequence of sub-tasks:</p><ol><li>parse the training corpus;</li><li>match <strong>frame elements</strong> to constituents;</li><li>extract features from the parse tree;</li><li>train a probabilistic model on the features.</li></ol><p>所谓 frame elements 是针对 Frame Semantics 而言的。</p><p>SRL provides a shallow semantic analysis that can benefit various NLP applications; no parsing needed, no handcrafted features.</p><h3 id="Frame-Semantics"><a href="#Frame-Semantics" class="headerlink" title="Frame Semantics"></a>Frame Semantics</h3><p>表达词义，除了 Firth, J.R. (1957) 的 “a word is characterized by the company it keeps”（也即是 Distributional semantics）之外, 还有 Charles J. Fillmore 的 Frame Semantics.</p><blockquote><p>The basic idea is that one cannot understand the meaning of a single word without access to all the essential knowledge that relates to that word.</p></blockquote><blockquote><p>A semantic frame is a collection of facts that specify “characteristic features, attributes, and functions of a denotatum, and its characteristic interactions with things necessarily or typically associated with it.”</p></blockquote><blockquote><p>A semantic frame can also be defined as a coherent structure of related concepts that are related such that without knowledge of all of them, one does not have complete knowledge of any one; they are in that sense types of gestalt.</p></blockquote><h3 id="Proposition-Bank"><a href="#Proposition-Bank" class="headerlink" title="Proposition Bank"></a>Proposition Bank</h3><p>完整的句子表达了命题 propositions, 也即一个主张. 比如”John smokes”这个句子的命题如果是真的,那么”John”在这里一定是某个”smokes”的人, 也就是必须是<code>NP</code>.</p><blockquote><p>在现代哲学、逻辑学、语言学中，命题是指一个判断（陈述）的语义（实际表达的概念），这个概念是可以被定义并观察的现象。命题不是指判断（陈述）本身。当相异判断（陈述）具有相同语义的时候，他们表达相同的命题。例如，雪是白的（汉语）和Snow is white（英语）是相异的判断（陈述），但它们表达的命题是相同的。在同一种语言中，两个相异判断（陈述）也可能表达相同命题。例如，刚才的命题也可以说成冰的小结晶是白的，不过，之所以是相同命题，取决于冰的小结晶可视为雪的有效定义。</p></blockquote><p>PropBank is a version of the Penn Treebank annotated with semantic roles. More coarse-grained than Frame Semantics:<br><img src="/images/PropBank.png" alt="" title="Proposition Bank, Arg2–Arg4 are often verb specific. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l09.pdf"></p><h3 id="End-to-end-SRL-system"><a href="#End-to-end-SRL-system" class="headerlink" title="End-to-end SRL system"></a>End-to-end SRL system</h3><p>基本的结构单元是Bi-LSTM，用法是：<br>· a standard LSTM layer processes the input in forward direction;<br>· the output of this LSTM layer is the input to another LSTM layer, but in reverse direction;<br>这些Bi-LSTM单元可以叠加起来构造更深层的神经网络.</p><p>The input (processed word by word) features are:<br>• argument and predicate: the argument is the word being processed, the predicate is the word it depends on;<br>• predicate context (ctx-p): the words around the predicate; also used to distinguish multiple instances of the same predicate;<br>• region mark (m<sub>r</sub>): indicates if the argument is in the predicate context region or not;<br>• if a sequence has n<sub>p</sub> predicates it is processed n<sub>p</sub> times.</p><p>Output: semantic role label for the predicate/argument pair using IOB tags (inside, outside, beginning).<br><img src="/images/end_to_end_SRL.png" alt="" title="End to end SRL model. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l09.pdf"></p><p>Training:<br>• Word embeddings are used as input, not raw words;<br>• the embeddings for arguments, predicate, and ctx-p, as well as m<sub>r</sub> are <strong>concatenated</strong> and used as input for the Bi-LSTM;<br>• the output is passed through a conditional random field (CRF); allows to model dependencies between output labels;<br>• Viterbi decoding is used to compute the best output sequence</p><p>Model learns “syntax”(Maybe): it associates argument and predicate words using the forget gate:</p><h2 id="Semantic-Parsing"><a href="#Semantic-Parsing" class="headerlink" title="Semantic Parsing"></a>Semantic Parsing</h2><p>Semantic Parsing 指语义分析，把文本解析为任意的逻辑形式(一种 meaning representation)，比如 first-order logic(FOL).<br><code>Sam likes Casey</code> - <code>likes(Sam, Casey)</code>;<br><code>Anna&#39;s dog Mr. PeanutButter misses her</code> - <code>misses(MrPB, Anna) ∧ dog(MrPB)</code>;<br><code>Kim likes everyone</code> - <code>∀x.likes(x, Kim)</code>.<br>Predicate-argument structure is a good match for FOL, as well as structures with argument-like elements (e.g. NPs).<br>Determiners, quantifiers (e.g. “everyone”, “anyone”), and negation can be expressed in FOL.</p><p>However, much of natural language is unverifiable, ambiguous, non-canonical. That makes it hard to represent the wide-coverage meaning of arbitrary NL. Closed domains are easier, and can sometimes be harvested automatically, e.g. GEOQUERY dataset.</p><p>This leads to a proliferation of domain-specific MRs.<br>· Pairs of NL sentences with structured MR can be collected, e.g. IFTTT dataset (Quirk et al. 2015).<br>· WikiTableQuestions<br>· Google’s knowledge graph</p><p>Viewing MR as a string, semantic parsing is just conditional language modeling. Trainable alternative to compositional approaches: encoder-decoder neural models. The encoder and decoder can be mixed and matched: RNN, top-down tree RNN.<br><img src="/images/meaning_representation_model.png" alt="" title="Meaning representation model using standard sequence models. Since logical forms are treelike, can use treeLSTM decoder. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l10.pdf"></p><p>Works well on small, closed domains if we have training data, but there are many unsolved phenomena/ problems in semantics.</p><h3 id="Abstract-meaning-representation-AMR"><a href="#Abstract-meaning-representation-AMR" class="headerlink" title="Abstract meaning representation (AMR)"></a>Abstract meaning representation (AMR)</h3><p>• The edges (ARG0 and ARG1) are <label style="color:#C62828">relations</label><br>• Each node in the graph has a <label style="color:#BA68C8">variable</label><br>• They are labeled with <label style="color:#1565C0">concepts</label><br>• <label style="color:#BA68C8">d</label> / <label style="color:#1565C0">dog</label> means “<label style="color:#BA68C8">d</label> is an instance of <label style="color:#1565C0">dog</label>“<br><code>The dog is eating a bone</code><br>(<label style="color:#BA68C8">e</label> / <label style="color:#1565C0">eat-01</label><br>&nbsp;&nbsp;&nbsp;&nbsp;:<label style="color:#C62828">ARG0</label> (<label style="color:#BA68C8">d</label> / <label style="color:#1565C0">dog</label>)<br>&nbsp;&nbsp;&nbsp;&nbsp;:<label style="color:#C62828">ARG1</label> (<label style="color:#BA68C8">b</label> / <label style="color:#1565C0">bone</label>))</p><p><code>The dog wants to eat the bone</code><br>(want-01<br>&nbsp;&nbsp;&nbsp;&nbsp;:ARG0 (d / dog)<br>&nbsp;&nbsp;&nbsp;&nbsp;:ARG1 (e / eat-01<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:ARG0 d<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:ARG1 (b / bone)))</p><p><strong>Coreference</strong><br>Charles just graduated, and now Bob wants Anna to give <strong>him</strong> a job.<br>Q: who does <strong>him</strong> refer to?</p><p><strong>Metonymy</strong><br><strong>Westminster</strong> decided to distribute funds throughout England, Wales, Northern Island, and Scotland<br>decided(Parliament, …)</p><p><strong>Implicature</strong><br>That cake looks delicious - I would like a piece of that cake.</p><p>Even more phenomena…<br>• Abbreviations (e.g. National Health Service=NHS)<br>• Nicknames (JLaw=Jennifer Lawrence)<br>• Metaphor (crime is a virus infecting the city)<br>• Time expressions and change of state<br>• Many others</p><h2 id="TODO-指代消解-Coreference-Resolution"><a href="#TODO-指代消解-Coreference-Resolution" class="headerlink" title="TODO(指代消解 Coreference Resolution)"></a>TODO(指代消解 Coreference Resolution)</h2><h2 id="Unsupervised-Part-of-Speech-Tagging"><a href="#Unsupervised-Part-of-Speech-Tagging" class="headerlink" title="Unsupervised Part-of-Speech Tagging"></a>Unsupervised Part-of-Speech Tagging</h2><p>Parts-of-speech(POS), word classes, or syntactic categories, 一般指八个词性：noun, verb, adjective, adverb, pronoun, preposition, conjunction, interjection, 有时候是 numeral, article or determiner.<br>1, noun 名詞 ( n. )<br>2, pronoun 代名詞 ( pron. )<br>3, verb 動詞 ( v. )<br>4, adjective 形容詞 ( adj. )<br>5, adverb 副詞 ( adv. )<br>6, preposition 介系詞 ( prep. )<br>7, conjunction 連接詞 ( conj. )<br>8, interjection 感歎詞 ( int. )</p><p>Tagging is a task that take a sentence, assign each word a label indicating its syntactic category (part of speech).</p><p>One common standard label is Penn Treebank PoS tagset.</p><blockquote><p>DT - Determiner 定语<br>IN - Preposition or subord. conjunction<br>NN - Noun, singular or mass<br>NNS - Noun, plural<br>NNP - Proper noun, singular<br>RB - Adverb<br>TO - to<br>VB - Verb, base form<br>VBZ - Verb, 3rd person singular present</p></blockquote><p>In supervised POS tagging, the input is the text and a set of allowed POS labels. The training data contains input and output examples. The output is a guess, for each word in the test data, which POS label it should have.</p><p>A common approach is to use an HMM. To train it, choose parameters θ that maximize $P(x,y \mid θ)$, the probability of the training data given the parameters. This is <strong>maximum likelihood estimation</strong> and it was covered in <a href="">ANLP</a>. You can use the model to predict y for each x in the test data by solving $P(y \mid x,θ)$ using the <strong>Viterbi algorithm</strong>.</p><p>A consequence of supervised training with MLE is that the model will only learn <strong>non-zero probability</strong> for tag-word pairs that actually appear in the data. Hence, if “the” is only ever tagged with DT in the training data, then the model will learn that the probability of producing “the” from any other tag is zero. This means that many word tokens will be (empirically) unambiguous, which is one of the things that makes supervised POS tagging easy.</p><p>RNNs 虽然也可以处理序列模型, 但是神经网络需要目标函数, 没有目标无法计算损失, 就无法调整参数, 也就是”监督学习”.</p><p>Current PoS taggers are highly accurate (97% accuracy on Penn Treebank). But they require manually labelled training data, which for many major language is not available. Hence motivated for unsupervised PoS tagging.</p><p>In unsupervised POS tagging, the input is the text and <strong>the number of clusters</strong>. The training data contains only input examples. The output is a guess, for each word in the text, which cluster the word belongs to. For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Number of clusters: 50</span><br><span class="line">Input x: The hungry cat meows</span><br><span class="line">Output y: 23 45 7 18</span><br></pre></td></tr></table></figure></p><p>What we hope is that the cluster labels will correlate with true POS labels; that is, that tokens labeled 23 will tend to be determiners, that clusters label 45 will tend to be adjectives, and so on.</p><p>这个时候可以使用隐马尔科夫模型, 这个”隐”就是针对没有目标可以参考这种情况.</p><h3 id="Hidden-Markov-Models"><a href="#Hidden-Markov-Models" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h3><p>The unsupervised tagging models here are based on Hidden Markov Models (HMMs).<br><img src="/images/HMM.png" alt="" title="Hidden Markov Models (HMMs). image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l11.pdf"><br>To train it, choose parameters θ that maximize $P(x \mid θ)$, the probability of the training data given the parameters.</p><p>The parameters θ = (τ, ω) define:<br>• τ : the probability distribution over tag-tag transitions;<br>• ω: the probability distribution over word-tag outputs.<br>The parameters are sets of multinomial distributions:<br>• $ω = ω^{(1)} . . . ω^{(T)}$: the output distributions for each tag;<br>• $τ = τ^{(1)} . . . τ^{(T)}$: the transition distributions for each tag;<br>• $ω^{(t)} = ω_1^{(t)}. . . ω_W^{(t)}$: the output distribution from tag $t$;<br>• $τ^{(t)} = τ_1^{(t)}. . . τ_T^{(t)}$: the transition distribution from tag $t$.</p><p>Another way to write the model, often used in statistics and machine learning:</p><p>$w_i | t_i = t ∼ Multinomial(ω^{(t)})$</p><p>So as tag, given that $t_{i−1} = t$, the value of $t_i$ is drawn from a multinomial distribution with parameters $τ^{(t)}$.</p><p>How to estimate ω and τ without supervision. This is still maximum likelihood estimation, but notice that it’s more difficult because the tags y are unobserved, so you must marginalize them out.</p><p>For <strong>estimation</strong> (i.e., training the model, determining its parameters), we need a procedure to set θ based on data. Rely on Bayes Rule:<br>\begin{equation}\begin{split}<br>    P(θ|w)&amp;=\frac{P(w|θ)P(θ)}{P(w)}\\<br>    &amp;∝P(w|θ)P(θ)\\<br>\end{split}\end{equation}<br>Choose the θ that maximize the likelihood $P(w|θ)$. Basically, we ignore the prior. In most cases, this is equivalent to assuming a uniform prior.</p><p>To do this, you can use <strong>expectation maximization</strong> (EM), a variant of MLE that can cope with unobserved data, which was also covered in <a href="">ANLP</a>. For examples, forward-backward algorithm for HMMs, inside-outside algorithm for PCFGs, k-means clustering.</p><p>For <strong>inference</strong> (i.e., decoding, applying the model at test time), we need to know θ and then we can compute $P(t, w)$:<br><img src="/images/Inference_for_HMMs.png" alt="" title="Inference for HMMs. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l11.pdf"></p><p>E-step: use current estimate of θ to compute expected counts of hidden events ($n(t,t^{\prime})$, $n(t,w)$).<br>M-step: recompute θ using expected counts.</p><p>You can then use the trained model to predict y for each x in the test data by solving $P(y \mid x,θ)$ using the Viterbi algorithm.</p><p>But EM often fails, even very small amounts of training data have been show to work better than EM. One consequence of unsupervised training with EM is that every word can be assigned to any cluster label. This makes things really difficult, because it means every word is ambiguous. The basic assumptions of EM (that any tag-word or tag-tag distribution is equally likely) make this even more difficult.</p><p>Instead, use Bayesian HMM with Gibbs sampling.</p><h3 id="Bayesian-HMM"><a href="#Bayesian-HMM" class="headerlink" title="Bayesian HMM"></a>Bayesian HMM</h3><p>When training HMM model, we are not actually interested in the value of θ, we could simply integrate it out. This approach is called <strong>Bayesian integration</strong>. Integrating over θ gives us an average over all possible parameters values.</p><p>The Bayesian HMM is simply an alternative way to solve the unsupervised POS tagging problem. The input and output is the same. But instead of learning θ, we directly solve $P(y \mid x)$. Note that we don’t need to learn θ (though we could) - in this setting, we integrate it out, after first supplying some information about the tag-tag and word-tag distributions encoded in θ. Specifically, we tell the model that a sparse distribution is much more likely than a uniform distribution. We do this by defining a distribution $P(θ)$, and this gives us a new model,  $P(y,x \mid θ)×P(θ)$. By integrating out θ we can solve the unsupervised tagging problem directly.</p><p>Example: we want to predict a spinner result will be “a” or not?<br>• Parameter θ indicates spinner result: $P(θ = a) = .45$, $P(θ = b) = .35$, $P(θ = c) = .2$;<br>• define t = 1: result is “a”, t = 0: result is not “a”;<br>• make a prediction about one random variable (t) based on the value of another random variable (θ).</p><p><strong>Maximum likelihood approach</strong>: choose most probable θ, $\hat{θ} = a$, and $P(t = 1|\hat{θ}) = 1$, so we predict $t = 1$.</p><p><strong>Bayesian approach</strong>:<br>average over θ,<br>$P(t = 1) = \sum_θ P(t = 1|θ)P(θ) = 1(.45) + 0(.35) + 0(0.2) = .45$, predict t = 0.</p><p>Advantages of Bayesian integration:<br>• accounts for uncertainty as to the exact value of θ;<br>• models the shape of the distribution over θ;<br>• increases robustness: there may be a range of good values of θ;<br>• we can use priors favoring sparse solutions (more on this later).</p><p>Dirichlet distribution<br>Choosing the right prior can make integration easier. A $K$-dimensional Dirichlet with parameters $α = α_1 . . . α_K$ is defined as:</p><p>$$ P(θ) = \frac{1}{Z} \prod_{j=1}^K θ_j^{α_j−1} $$</p><p>We usually only use symmetric Dirichlets, where $α_1 . . . α_K$ are all equal to β. We write Dirichlet(β) to mean $Dirichlet(β, . . . , β)$.</p><p><img src="/images/Dirichlet_Distribution.png" alt="" title="A 2-dimensional symmetric Dirichlet(β) prior over θ = (θ1, θ2), β &gt; 1: prefer uniform distributions, β = 1: no preference, β &lt; 1: prefer sparse (skewed) distributions. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l11.pdf"><br>注意到这是一个二维的概率密度图. $β&gt;1$意味着更喜欢均值分布, 此时$θ$大概率落在$0.5$附近,因为$θ_1+θ_2=1$, 所以此时$θ_1, θ_2$概率均等. 如果$β=1$, $θ_1$的任何取值是等概率的, 等于说任何$θ_1,θ_2$的组合概率都是均等的.</p><p>To Bayesianize the HMM, we augment with it with symmetric Dirichlet priors:<br><img src="/images/Bayesianizing_the_HMM.png" alt="" title="image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l11.pdf"></p><p>To simplify things, use a bigram version of the Bayesian HMM; If we integrate out the parameters θ = (τ, ω), we get:<br><img src="/images/BHMM_Dirichlet_Distribution_.png" alt="" title="With T possible tags and Wt possible words with tag t. image from: http://www.inf.ed.ac.uk/teaching/courses/nlu/assets/slides/2018/l11.pdf"></p><p>Use these distributions to find $P(t|w)$ using an estimation method called <strong>Gibbs sampling</strong>.</p><p>Results: Integrating over parameters is useful in itself, even with uninformative priors $(α = β = 1)$;</p><p>总结：<br>· Bayesian HMM improves performance by averaging out uncertainty;<br>· allows us to use priors that favor sparse solutions as they occur in language data.<br>· Using a tag dictionary is also really helpful. We still have no labeled training data, but if we only allow each word to be tagged with one of the labels that appears in the dictionary, then most word-tag pairs will have probability zero. So this is a very different way of supplying information to the unsupervised model that is very effective.</p><h2 id="Bias-in-NLP"><a href="#Bias-in-NLP" class="headerlink" title="Bias in NLP"></a>Bias in NLP</h2><h3 id="The-social-impact-of-NLP"><a href="#The-social-impact-of-NLP" class="headerlink" title="The social impact of NLP"></a>The social impact of NLP</h3><p>Outcome of an NLP experiment can have a direct effect on people’s lives, e.g.</p><ol><li><a href="https://www.youtube.com/watch?v=p8phGxzUC_Y" target="_blank" rel="noopener">频繁出现亚马逊 Alexa 突然发出诡异笑声，给多名用户造成困惑和恐慌</a>, 因为人们谈话中偶然包含 trigger 词：”Alexa, laugh” 而发出 - 亚马逊的<a href="https://www.nytimes.com/2018/03/08/business/alexa-laugh-amazon-echo.html" target="_blank" rel="noopener">解决方案是把 trigger 改为更难触发的 “Alexa, can you laugh”</a></li><li>Chatbot 对于人们敏感问题的不恰当回答, 比如 “Should I kill myself?” - “Yes.”，这些回答对患有心理障碍的人群或者青少年儿童带来非常大的危害。</li><li><a href="https://www.theverge.com/2016/3/24/11297050/tay-microsoft-chatbot-racist" target="_blank" rel="noopener">Microsoft 的 AI chatbot 上线仅一天, 就通过 twitter 和人交谈并学会涉及种族, 性别歧视等的话语</a>, 典型的 “garbage in, garbage out” 现象.</li><li>其他涉及数据隐私等问题</li></ol><p><strong>语言的特性，导致NLP涉及的社会伦理问题非常多, 而且影响非常大</strong>：<br>· 语言传递着信息、偏见，是政治性的、权力的工具, 同时比其他技术带有更明显的拟人化、人格化倾向，这可能给个人生活带来不便或危害，给整个社会带来舆论影响。<br>· Any dataset carries demographic bias: latent information about the demographics of the people that produced it. That excludes people from other demographics.</p><p><strong>同时人类本身的认知容易加深偏见</strong>:<br>The <strong>availability heuristic</strong>: the more knowledge people have about a specific topic, the more important they think it must be. <strong>Topic overexposure</strong> creates biases that can lead to discrimination and reinforcement of existing biases. E.g. NLP focused on English may be self-reinforcing.</p><p><strong>NLP 实验本身容易加深偏见</strong>：<br>• Advanced grammar analysis can improve search and educational NLP, but also reinforce prescriptive linguistic norms.<br>• Stylometric analysis can help discover provenance of historical documents, but also unmask anonymous political dissenters.</p><p><strong>NLP 技术可能被不恰当地使用</strong>：<br>• Text classification and IR can help identify information of interest, but also aid censors.<br>• NLP can be used to discriminate fake reviews and news, and also to generate them.</p><h3 id="Word-embeddings-contain-human-like-biases"><a href="#Word-embeddings-contain-human-like-biases" class="headerlink" title="Word embeddings contain human-like biases"></a>Word embeddings contain human-like biases</h3><p>word2vec learns semantic/ syntactic relationships, also keep company with unsavoury stereotypes and biases?<br>• Man:Woman - King:Queen<br>• Man:Doctor - Woman:Nurse<br>• Man:Computer Programmer - Woman:Homemaker</p><p>Measure bias using implicit association tests:<br>1, Compute similarity of group1 and stereotype1 word embeddings. Cosine similarity is use to measure association (in place of reaction time).<br>2, Compute similarity of group1 and stereotype 2 word embeddings.<br>3, Null hypothesis: if group1 is not more strongly associated to one of the stereotypes, there will be no difference in the means.<br>4, Effect size measured using Cohen’s d.<br>5, Repeat for group 2.</p><p>Experiments<br>• Uses GloVe trained on Common Crawl—a large-scale crawl of the web.<br>• Removed low frequency names.<br>• Removed names that were least “name-like” (e.g. Will) algorithmically.<br>• Each concept is represented using a small set of words, designed for previous experiments in the psychology literature.</p><p>Result:<br>· flowers associate with pleasant, insects associate with unpleasant. $p &lt; 10^{−7}$<br>· Men’s names associate with career, women’s names associate with family. $p &lt; 10^{−3}$<br>· European American names associate with pleasant, African American names associate with unpleasant. $p &lt; 10^{−8}$</p><p>这些结果的确真实地反映人类社会的现状。但大部分性别方面的偏见其实是反映了目前的社会分工，无所谓高低贵贱；人种的偏见倒是反映了历史问题对现在的影响，这种偏见是不符合道德的。人对于其他生物的偏见，虽然是没必要的，但人类的确倾向于喜爱行为”可爱”，外形”美好”的生物，比如大熊猫就是比鳄鱼受欢迎。</p><p>偏见的存在不一定合理。哪些偏见是不合理的，才是人们更应该去思考和讨论的地方。</p><h3 id="Debiasing-word-embeddings"><a href="#Debiasing-word-embeddings" class="headerlink" title="Debiasing word embeddings"></a>Debiasing word embeddings</h3><p><a href="https://arxiv.org/abs/1607.06520" target="_blank" rel="noopener">Bolukbasi. et. al., 2016. Man is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings</a>提供了一个思路:</p><ol><li>确认偏见的方向</li><li>中和抵消偏见: 对于非定性的词（如”医生”），通过投射来消除偏见</li><li>等价：让<code>father - mother</code>和<code>boy - girl</code>等距，让定性词间的距离只有性别的距离；或者让<code>doctor - woman</code>和<code>doctor - man</code>等距，消除非定性词的性别偏见。</li></ol><p>什么词需要抵消偏见: 训练一个线性分类器来确定词是非定性还是非定性的, 结果当然是大部分英语词都是非定性的.</p><p>If analogies reveal a gender dimension, use analogies on specific seed pairs to find it.<br><img src="/images/Gender_subspace.png" alt="" title="Selected words projected along two axes: x is a projection onto the difference between the embeddings of the words he and she, and y is a direction learned in the embedding that captures gender neutrality, with gender neutral words above the line and gender specific words below the line. In this figure, the words above the horizontal line would all be collapsed to the vertical line. image from: Bolukbasi. et. al., 2016. Man is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings"><br>y 轴下面的词属于定性词, 不需要中性化, 而y轴之上的词则需要进行中性化处理.</p><p>不同的偏见, 需要不同的 seed words; 一种偏见, 可以有多种 seed words 选择: 除了用”She-He”作为性别偏见的基准, 还有其他选择.</p><h2 id="编码器—解码器-Sequence-to-sequence-和注意力机制"><a href="#编码器—解码器-Sequence-to-sequence-和注意力机制" class="headerlink" title="编码器—解码器 Sequence-to-sequence 和注意力机制"></a>编码器—解码器 Sequence-to-sequence 和注意力机制</h2><p>当输入输出都是不定长序列时, 比如机器翻译这种任务，需要使用 Sequence-to-sequence（seq2seq）或者 encoder-decoder 神经网络结构。这种结构可以通过一种方法叫注意力机制来显著提高性能。</p><h3 id="编码器—解码器-Sequence-to-sequence（seq2seq）"><a href="#编码器—解码器-Sequence-to-sequence（seq2seq）" class="headerlink" title="编码器—解码器 Sequence-to-sequence（seq2seq）"></a>编码器—解码器 Sequence-to-sequence（seq2seq）</h3><p>编码器：所谓编码，就是把不定长的输入序列输入RNN，以得出某种定长的编码信息。<br>解码器：所谓解码，就是把编码器编码后的信息（一般取编码器的RNN最终时刻的隐含层变量）输入到解码器的RNN中，每个t时刻的输出既取决于之前时刻（t-1）的输出又取决于编码信息。等同于一个以解码信息作为条件概率生成目标语言句子的语言模型。</p><p>所以 seq2seq 本质是一个条件概率语言模型：语言模型是指解码器每次会预测下一个出现的单词，条件概率是指预测是基于编码后的源句子。</p><h3 id="注意力"><a href="#注意力" class="headerlink" title="注意力"></a>注意力</h3><p>在传统的seq2seq模型中，解码器各个时刻都使用相同的编码信息，这就要求解码器把源输入序列的所有信息都解码并整合到最后时刻的隐含状态中，这个是很大的信息瓶颈。而人们知道，在实际任务中，比如机器翻译，目标句子的不同单词，一般只对应源句子的某一部分而已。如果能够让解码器在解码时，在不同时刻专注于源输入序列的不同部分，那么就可以突破这个瓶颈。</p><ol><li>对于解码器的每一时间步的隐含状态s<sub>t</sub>，可以衡量其与编码器的所有时间步隐含状态h<sub>0</sub>……e<sub>t</sub>的相似性(或score评分) <code>e = α(s, h)</code>，简单的评分方式是元素间相乘, <code>e = s*h</code>（<a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="noopener">Bahanau的论文</a>提供了更复杂的形式), 也可以参考<a href="https://nlp.stanford.edu/pubs/emnlp15_attn.pdf" target="_blank" rel="noopener">论文Effective Approaches to Attention-based Neural Machine Translation</a>探讨的集中评分方式, 这篇论文提供了一种 Bilinear 形式的相似性评分法, 就是在s和h之间以点乘的形式插入一个交互矩阵 interaction matrix.</li><li>对得出的评分求加权平均<code>a = softmax(e)</code>, 得出的权值分布也称注意力权重</li><li>通过注意力权重把编码器隐含状态加权求和，得到注意力输出 <code>A = Σah</code></li><li>最后把注意力输出和对应时间步的解码器隐含状态s<sub>t</sub>拼接在一起 [A;s<sub>t</sub>]，作为解码器rnn的隐含层.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自然语言理解（爱丁堡大学）知识点汇总&lt;/p&gt;
&lt;p&gt;References:&lt;br&gt;&lt;a href=&quot;http://www.inf.ed.ac.uk/teaching/courses/nlu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Natural language understanding&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://web.stanford.edu/class/cs224n/syllabus.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CS224n: Natural Language Processing with Deep Learning&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人工智能" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>自然语言处理快速入门 | 02 N-Gram 语言模型 - ANLP UoE 爱丁堡</title>
    <link href="http://yoursite.com/NOTE-ANLP-02-n-gram-model/"/>
    <id>http://yoursite.com/NOTE-ANLP-02-n-gram-model/</id>
    <published>2018-04-01T23:00:00.000Z</published>
    <updated>2018-05-08T09:03:09.223Z</updated>
    
    <content type="html"><![CDATA[<p>生成模型在语言模型中的应用包括 N-Gram语言模型，朴素贝叶斯分类器，隐马尔可夫模型。</p><blockquote><p>在概率统计理论中, 生成模型是指能够生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。</p><p>生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。</p></blockquote><a id="more"></a><h2 id="N-Gram-语言模型"><a href="#N-Gram-语言模型" class="headerlink" title="N-Gram 语言模型"></a>N-Gram 语言模型</h2><p>如何训练一个语言模型? 在神经网络大热之前, 人们普遍使用<code>N-Gram</code>语言模型。就是收集不同n-gram频率的统计数据，并用它们预测下一个单词，概率模型基于前面提到的马尔可夫简化假设：若使用<code>N</code>-Gram 来预测下一个单词，出现概率仅取决于前面的<code>(N-1)</code>个单词.</p><p>一个<code>N-Gram</code>就是n个连续的单词</p><ul><li><code>Uni</code>gram: “the”, “students”, “opened”, ”their”</li><li><code>Bi</code>gram: “the students”, “students opened”, “opened their”</li><li><code>tri</code>grams: “the students opened”, “students opened their”</li><li><code>4-</code>grams: “the students opened their”</li></ul><p>通过计数来估计统计概率：<code>P(wi| prefixes) = count(prefixes, wi)/count(prefixes) = count(“the students”)/count(“the students opened”)</code></p><p>在实际中，使用 log 转换来避免数值下溢，并且log 转换可以把乘法转换为加法, 计算更快.</p><p>N-Gram模型的缺点很明显：</p><ul><li>无法很好地解决NLP中的长距离依赖现象</li><li>N-gram只是在测试语料库与训练语料库比较相似时表现才比较好。</li><li>稀疏问题1：大多数高阶N-Gram几乎不会出现，我们不能简单地把这些定义为0概率的，因为语言是千变万化的，有些词组虽然少见但不代表不存在</li><li>稀疏问题2：少部分低阶n-gram在测试集中出现了但是在训练集中没有。比如需要预测 “students opened their _”, 但是训练集中没出现过“students opened their”。</li><li>一般而言，N越高，模型表现越好，但是更大的N使稀疏问题变得更糟。通常人们不会取大于5的N。</li><li>需要存储所有可能的N-Gram，所以模型的大小是 <code>O(exp(n))</code>,需要大量的内存.</li></ul><p>针对数据稀疏问题, 可以使用各种平滑处理.</p><h3 id="Add-alpha-smoothing"><a href="#Add-alpha-smoothing" class="headerlink" title="Add alpha smoothing"></a>Add alpha smoothing</h3><ul><li>Assign equal probability to all unseen events.</li><li>Applied in text classification, or domains where zeros probability is not common.</li></ul><h3 id="Backoff-smoothing"><a href="#Backoff-smoothing" class="headerlink" title="Backoff smoothing"></a>Backoff smoothing</h3><ul><li>Use information from lower order N-grams (shorter histories)</li><li>Back off to a lower-order N-gram if we have zero evidence for a higher-order interpolation N-gram.</li><li>Discount: In order for a backoff model to give a correct probability distribution, we have to discount the higher-order N-grams to save some probability mass for the lower order N-grams.</li></ul><p>对于像网络数据这种非常大的N-gram，使用stupid backoff.</p><h3 id="Interpolation-smoothing"><a href="#Interpolation-smoothing" class="headerlink" title="Interpolation smoothing"></a>Interpolation smoothing</h3><ul><li>Interpolation: mix the probability estimates from all the N-gram estimators, weighing and combining the trigram, bigram, and unigram counts</li><li>Simple interpolation: <code>P(w3|w1,w2)=1P(w3|w1,w2)+λ2P(w3|w2)+λ3P(w3)</code>, Σλ=1.</li><li>λ could be trianed/conditioned on training set/contest, choose λ that maximie the probability of held-out data</li></ul><h3 id="Kneser-Ney-smoothing"><a href="#Kneser-Ney-smoothing" class="headerlink" title="Kneser-Ney smoothing"></a>Kneser-Ney smoothing</h3><p>这是目前表现最好的平滑方案.</p><ul><li>Combine absolute discounting and interpolation: Extending interpolatation with an absolute discounting 0.75 for high order grams.</li><li>Use a better estimate for probabilities of lower-order unigrams, the continuation probability, P_continuatin(w) is how likely is w to appear as a novel continutaion.<ul><li>For each word w, count the number of bigram types it completes. Or count the number of word types seen to precede w.</li><li>Every bigram type was a novel continuation the first time it was seen.</li><li>normalized by the total number of word bigram types.</li></ul></li><li>To lower the probability of some fix bigram like “San Franscio”</li><li>For bigram, <code>Pkn(wi|wi-1)=max(count(wi-1,wi)-d, 0)/c(wi-1) +λ(wi-1)P_continuatin(wi), λ(wi-1) = d{w:count(wi-1,w)&gt;0}/c(wi-1)</code>, where {w:count(wi-1,w)&gt;0} is the number of word types that can follow wi-1, also is the # of word types we discounted, also is the # of times we applied normalized discount.</li><li>For general N-gram, <img src="/images/kneser-ney.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成模型在语言模型中的应用包括 N-Gram语言模型，朴素贝叶斯分类器，隐马尔可夫模型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在概率统计理论中, 生成模型是指能够生成观测数据的模型，尤其是在给定某些隐含参数的条件下。它给观测值和标注数据序列指定一个联合概率分布。&lt;/p&gt;
&lt;p&gt;生成模型的定义与判别模型相对应：生成模型是所有变量的全概率模型，而判别模型是在给定观测变量值前提下目标变量条件概率模型。因此生成模型能够用于模拟（即生成）模型中任意变量的分布情况，而判别模型只能根据观测变量得到目标变量的采样。判别模型不对观测变量的分布建模，因此它不能够表达观测变量与目标变量之间更复杂的关系。因此，生成模型更适用于无监督的任务，如分类和聚类。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人工智能" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="自然语言处理" scheme="http://yoursite.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理快速入门 | 01 概率模型 - 语言模型 - ANLP UoE 爱丁堡</title>
    <link href="http://yoursite.com/NOTE-ANLP-01-probability-model/"/>
    <id>http://yoursite.com/NOTE-ANLP-01-probability-model/</id>
    <published>2018-03-31T23:00:00.000Z</published>
    <updated>2018-05-08T09:03:03.117Z</updated>
    
    <content type="html"><![CDATA[<p>爱丁堡大学的自然语言处理入门课程笔记。</p><p>References:<br><a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/" target="_blank" rel="noopener">Accelerated natural language processing</a><br><a href="https://www.inf.ed.ac.uk/teaching/courses/anlp/review/review_ay17.html" target="_blank" rel="noopener">ANLP revision guide</a><br><a href="https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html" target="_blank" rel="noopener">Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning</a><br><a id="more"></a></p><h2 id="概率模型-Probability-model"><a href="#概率模型-Probability-model" class="headerlink" title="概率模型 Probability model"></a>概率模型 Probability model</h2><p>概率模型是随机现象的数学表示，由样本空间，样本空间内的事件以及与每个事件相关的概率定义。目标是模拟给一个事件发生的概率</p><h3 id="估算概率-Probability-estimation"><a href="#估算概率-Probability-estimation" class="headerlink" title="估算概率 Probability estimation"></a>估算概率 Probability estimation</h3><p>相关频率/最大似然估计<br>Relative frequency / maximum likelihood estimation p(X) = Count(x)/N</p><h3 id="平滑处理-Smoothing"><a href="#平滑处理-Smoothing" class="headerlink" title="平滑处理 Smoothing"></a>平滑处理 Smoothing</h3><p>一般用于处理0概率的问题，比如在训练集中看不到, 但出现在测试集中的词。</p><h4 id="加一（Laplace）平滑"><a href="#加一（Laplace）平滑" class="headerlink" title="加一（Laplace）平滑"></a>加一（Laplace）平滑</h4><p>最简单的平滑法，为所有事件（不管有没出现过）的频次加一，这样保证了没有0概率事件出现。<br>这种平滑效果很差，因为齐夫定律<code>Zipf&#39;s law</code>的关系:</p><blockquote><p>在自然语言的语料库里，一个单词出现的频率与它在频率表里的排名成反比。</p></blockquote><p>会有很多长尾单词很少甚至几乎没有出现过, 所以在总数为1的概率池子了, 为了给这些长尾单词分配至少频次1的概率, 需要从真正出现的单词(所谓真实发生的事件)中分走很多概率.</p><p>更多高级的平滑方案参考<a href="/NOTE-ANLP-02-n-gram-model">N-gram</a>部分。</p><h4 id="语言模型-Language-modeling"><a href="#语言模型-Language-modeling" class="headerlink" title="语言模型 Language modeling"></a>语言模型 Language modeling</h4><p>语言模型: 一种用于计算连续的单词（就是句子）或者任何其他序列数据（比如语音）出现的概率的模型，最基本的应用是基于某种语言模型，预测下一个单词出现的概率 <code>P(w|w1, w2, w3...)</code>。</p><p>语言模型本身即是一种概率模型(或者说人们选择用概率模型来描述为语言建模). 因为近现代的自然语言处理主要集中在信息沟通传输方面(比如密码,语音识别, 机器翻译, 校正等), 而香农的信息传输模型使用条件概率来描述鉴定噪音中的真实信息.</p><p>如何表达: 一个句子发生的概率就是里面各个单词的概率的乘积。依赖于概率的链式法则, 一个位置的单词的概率，条件于该位置之前的句子部分的概率。所以通过链式法则得出的语言模型概率是冗长的条件概率乘积。</p><p>但我们可以通过马尔可夫性质 Markov property 把语言模型简化，一个位置单词出现的条件概率可以通过某种近似来逼近: 仅考虑离它最近的（若干）单词，得到<code>P(the| water is so transparent that) ≈ P(the| that)</code>.</p><p><a href="/NOTE-ANLP-01-evaluation#evaluation-concepts-and-methods">Evaluation</a>：一般通过困惑度（Perplexity）来衡量语言模型的好坏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爱丁堡大学的自然语言处理入门课程笔记。&lt;/p&gt;
&lt;p&gt;References:&lt;br&gt;&lt;a href=&quot;http://www.inf.ed.ac.uk/teaching/courses/anlp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accelerated natural language processing&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.inf.ed.ac.uk/teaching/courses/anlp/review/review_ay17.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ANLP revision guide&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人工智能" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="自然语言处理" scheme="http://yoursite.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Java | 对象 哈希 重写 @Override equals() hashcode()</title>
    <link href="http://yoursite.com/NOTE-Java-miscellaneous-hashcode-equals/"/>
    <id>http://yoursite.com/NOTE-Java-miscellaneous-hashcode-equals/</id>
    <published>2018-02-27T00:00:00.000Z</published>
    <updated>2018-03-26T19:10:31.801Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍：</p><ol><li>Hashcode（哈希码）与 equals（判断相等）的关系</li><li>Hashcode 方法的底层实现原理</li><li>开发中需要掌握的原则和方法</li></ol><h3 id="HashSet-HashMap-HashTable"><a href="#HashSet-HashMap-HashTable" class="headerlink" title="HashSet, HashMap, HashTable"></a>HashSet, HashMap, HashTable</h3><p>HashSet底层是调用HashMap. HashMap 使用hashCode和equals来进行对象比较。<br><a id="more"></a><br>拿HashSet和add()举例(其余的数据结构,和 remove, contains等方法类似):假设HashSet里面已经有了obj1, 那么当调用HashSet.add(obj2)时:</p><ol><li>if (obj1 == obj2), 那么没有必要调用 hashCode(), 已经有了这个对象, 没必要添加了</li><li>else, if hashCode 不同，那么可以直接添加了, 没必要进一步调用 obj1.equals(obj2) 来判断对象是否相等</li><li>else hashCode 相同，那么需要进一步调用obj1.equals(obj2)</li></ol><p>下面这段代码虽然 HashSet 只存了 a 对象，但当检查是否包含 b 对象时，返回true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">String a = <span class="string">"hello"</span>;</span><br><span class="line">String b = <span class="string">"hello"</span>;</span><br><span class="line">wordSet.add(a);</span><br><span class="line"><span class="keyword">return</span> wordSet.contains(b); <span class="comment">// return true</span></span><br></pre></td></tr></table></figure></p><p>根据<a href="https://docs.oracle.com/javase/6/docs/api/java/util/Set.html#add%28E%29" target="_blank" rel="noopener">Javadoc for Set</a>.</p><blockquote><p>adds the specified element e to this set if the set contains no element e2 such that (e==null ? e2==null : e.equals(e2)).</p></blockquote><p>根据<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-" target="_blank" rel="noopener">Javadoc for String.equals</a></p><blockquote><p>Compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object.</p></blockquote><p>Java的set是使用它包含的元素（对象）的 <code>equals()</code>来比较 b 和 a 的。这里 String 类的<code>equals()</code>method 是比较字符串值是否相等(准确的说，是先检查是不是引用同一个对象，再看是不是同一个类，再比较值)，而不是引用的对象是否一样，故<code>b.equals(a)</code>是 true。</p><p>同样的，remove 和 add 也会先进行类似检查。</p><p>问题是，为何 hashCode 不同，就没有进一步调用 equals()的必要呢？因为有一个前提是代码遵守The hashCode contract。</p><h3 id="Hashcode-and-equals"><a href="#Hashcode-and-equals" class="headerlink" title="Hashcode and equals"></a>Hashcode and equals</h3><p>在Java中，每个对象都有一个hashCode，它有时容易被人遗忘或误用。有以下三点需要注意，避免掉入常见的陷阱。</p><h4 id="The-hashCode-contract"><a href="#The-hashCode-contract" class="headerlink" title="The hashCode contract"></a>The hashCode contract</h4><p>根据 The hashCode contract:</p><blockquote><p>Objects that are equal must have the same hash code within a running process.</p></blockquote><p>除了字面意思，也有其他隐含的意思: 不相等的对象的hashcode也可能一样; 具有相同 hash code 的对象不一定相等.</p><blockquote><p>You must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable. — Effective Java, by Joshua Bloch</p></blockquote><p>根据这个contract，可以延伸出以下实践原则：</p><p><strong>一、 每当你 override equals 时，也要 override hashCode</strong><br>假如你需要使用不一样的equals判断标准，那么就需要重写equals。但假如仅仅重写equals，而不重写hashcode()，就可能会违背 The hashCode contract。</p><p>为什么？因为 hashCode method 需要同时适配真正使用到的 equals method 的判断标准。通过重写equals，我们重新声明了一种判断对象是否相等的标准，但原始的 hashCode method还是会将所有对象视为不同的对象。所以如果没有不重写hashcode，那么根据@Override equals 判断为相同的对象将拥有不同的hashcode（可能）。这样，即使已经有了这个object，在HashMap上调用 contains() 也会返回false。</p><p>例子：在Java的创建街道street这个类，在判断两条街道是否相同时，我们有自定义的规则 - 只要是在同一个城市，有同样的街道名，那么两个street就相等，即使他们是存放在不同内存位置的两个对象（Java 的 Object 原生的equals是根据引用的对象内存地址来比较判断的）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Street</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Street))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        Street rhs = (Street) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EqualsBuilder().</span><br><span class="line">            <span class="comment">// if deriving: appendSuper(super.equals(obj)).</span></span><br><span class="line">            append(name, rhs.name).</span><br><span class="line">            append(age, rhs.city).</span><br><span class="line">            isEquals();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">17</span>, <span class="number">31</span>). <span class="comment">// two randomly chosen prime numbers</span></span><br><span class="line">            <span class="comment">// if deriving: appendSuper(super.hashCode()).</span></span><br><span class="line">            append(name).</span><br><span class="line">            append(city).</span><br><span class="line">            toHashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果没有重写hashCode()， 那么两个名字和所在城市一样的，但引用不同地址的street就会按照默认的 hashcode() 返回不一样的code，但是根据重写的equals(), 他们是一样的, 这样就违背了 hashCode contract。</p><p>为了安全起见，让Eclipse IDE 生成 equals 和 hashCode 函数：<code>Source &gt; Generate hashCode() and equals()...</code><br><img src="https://eclipsesource.com/wp-content/uploads/2012/09/generate-hashcode-equals.png" alt=""></p><p>为了提醒自己, 还可以配置Eclipse以检测是否有违反此规则的情况，并为仅重写了equals但没重写hashCode的情况显示错误：<code>Preferences &gt; Java &gt; Compiler &gt; Errors/Warnings, then use the quick filter to search for “hashcode”</code><br><img src="https://eclipsesource.com/wp-content/uploads/2012/09/hashcode-error-config.png" alt=""></p><h3 id="HashCode-collisions"><a href="#HashCode-collisions" class="headerlink" title="HashCode collisions"></a>HashCode collisions</h3><p>HashCode collisions 指两个不同的对象具有相同的hashcode这种情况, 这不是什么严重的问题. 只是会导致更多的搜索步骤，太多collisions就可能会降低系统性能</p><p>但是，如果将HashCode错误地用作对象的唯一句柄，例如将其用作Map中的key，那么有时会得到错误的对象。虽然collisions一般很少见，但却是不可避免的。例如，字符串“Aa”和“BB”产生相同的hashCode：2112. 因此衍生出第二个原则</p><p><strong>二、永远不要把hashcode当做key来使用</strong></p><p>Java中有4,294,967,296个（2<sup>32</sup>)可能的int值）。既然拥有40亿个插槽，collisions似乎几乎不可能对吧？</p><p>但事实上，也不是那么不可能。试想，一个房间里有23名随机人员。你如何估计里面有两个人生日一样的概率？很低？因为一年有365天？事实上，概率约为50％！这种现象被称为<a href="http://en.wikipedia.org/wiki/Birthday_paradox" target="_blank" rel="noopener">生日问题(悖论)</a>。</p><blockquote><p>如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。</p></blockquote><p>问题的本质是”23人之中两两之间存在生日相同的概率””,而不是”其他22人与其中一个人的生日相同的概率”.</p><p>类比到hashcode里，这意味着有77,163个不同的对象，collisions概率是50%（假设有一个理想的hashCode函数，将对象均匀分布在所有可用的buckets中）。</p><h3 id="HashCodes-会变"><a href="#HashCodes-会变" class="headerlink" title="HashCodes 会变"></a>HashCodes 会变</h3><p>HashCode 不保证在不同的执行过程中总能返回相同的code。根据JavaDoc：Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. <strong>This integer need not remain consistent from one execution of an application to another execution</strong> of the same application.</p><p>这种情况并不常见，实际上，库中的某些类甚至指定了用于计算hashcode的精确公式（例如String）。对于这些类，hashcode总是相同的。但是，尽管大多数的hashCode方法提供了稳定的值，但我们不能依赖它。正如<a href="http://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html" target="_blank" rel="noopener">这篇文章</a>所指出的那样，Java库实际上在不同的进程中返回不同的hashCode值，这往往会让人们感到困惑。 Google的<a href="http://code.google.com/p/protobuf/" target="_blank" rel="noopener">Protocol Buffers</a>就是一个例子。 因此，您不应该在分布式应用程序中使用hash code。即使两者相等，远程对象的 hash code 也可能与本地的不同。</p><p><strong>三、不要在分布式应用程序中使用 hashCode</strong><br>此外，要意识到，hashCode函数的实现可能会随着版本的更改而改变。因此我们的代码最好不依赖任何特定的hash code 值。例如，你不应该使用hash code来保持某种状态，不然下次运行时，“相同”对象的hash code可能会不同。</p><p>所以最好的建议可能是：除非自己创建了基于 hashcode 算法，否则根本就不要使用 hashCode 呵呵……</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在依赖于 HashSet, HashMap, HashTable … 等数据结构的程序中：</p><ol><li>仅重写 equals()，会导致业务出错</li><li>仅重写 hashcode(), 在比较两个对象时不会强制Java忽略内存地址</li><li>如果不涉及对象比较(比如仅仅是iteration), 那么不需要hashCode and/or equals</li></ol><p>参考：<br><a href="https://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/" target="_blank" rel="noopener">https://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/</a><br><a href="https://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java" target="_blank" rel="noopener">https://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hashcode（哈希码）与 equals（判断相等）的关系&lt;/li&gt;
&lt;li&gt;Hashcode 方法的底层实现原理&lt;/li&gt;
&lt;li&gt;开发中需要掌握的原则和方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;HashSet-HashMap-HashTable&quot;&gt;&lt;a href=&quot;#HashSet-HashMap-HashTable&quot; class=&quot;headerlink&quot; title=&quot;HashSet, HashMap, HashTable&quot;&gt;&lt;/a&gt;HashSet, HashMap, HashTable&lt;/h3&gt;&lt;p&gt;HashSet底层是调用HashMap. HashMap 使用hashCode和equals来进行对象比较。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 13 实现继承 Implementation Inheritance - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-13-Implementation-Inheritance/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-13-Implementation-Inheritance/</id>
    <published>2018-02-24T00:00:00.000Z</published>
    <updated>2018-03-29T22:09:04.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implementation-Inheritance"><a href="#Implementation-Inheritance" class="headerlink" title="Implementation Inheritance"></a>Implementation Inheritance</h2><p>实现继承是subclass从superclass继承实现的关系。</p><h3 id="default-method-缺省方法（从-Java-8开始）"><a href="#default-method-缺省方法（从-Java-8开始）" class="headerlink" title="default method 缺省方法（从 Java 8开始）"></a>default method 缺省方法（从 Java 8开始）</h3><p>除了signature之外，Java也允许subclass继承implementation。<br>我们可以在List中列出已实现的method。这些方法是 default method，定义了List hypernyms的一些默认行为：<code>default public void method() { ... }</code>.<br><a id="more"></a><br>我们可以自由调用interface中定义的方法，而不用操心具体的实现。default method 应该适用于实现接口的任何类型的对象！子类不必在任何地方重新实现 default method，可以直接调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过，我们仍然可以重写 default method，在子类中重新定义该方法。这样，只要我们在LinkedLList上调用<code>print()</code>，它就会调用这个方法，而不是List的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedList</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Dynamic-type"><a href="#Dynamic-type" class="headerlink" title="Dynamic type"></a>Dynamic type</h3><p>Java是通过一个叫“dynamic method selection”的特性，来确定要调用 default method 还是已经被子类重写的method。<br>这个实例声明<code>List&lt;String&gt; l = new LinkedList&lt;String&gt;();</code>,指明<code>l</code>的类型是 List, 是 static type。由 new 生成的 object 本身是LinkedList类型，也从属于 List 类型。但是，因为这个对象本身是使用 LinkedList 构造函数实例化的，所以我们称之为 dynamic type。</p><blockquote><p>Dynamic type 的名称起源于: 当<code>l</code>被重新分配指向另一种类型的对象时，比如说一个 ArrayList 对象，<code>l</code>的动态类型现在就变为 ArrayList. 因为它根据当前引用的对象的类型而改变, 所以是动态的。</p></blockquote><p>Static vs. Dynamic Type:</p><ul><li>Java 每个变量都有一个static type （compile-time type），这是变量声明时指定的类型，在编译时会检查。</li><li>每个变量也有一个 Dynamic Type（run-time type），此类型在变量实例化（new）时指定，并在运行时检查。等同于地址指向的对象的类型。</li></ul><p>当Java运行一个被overriden的方法时，它会在它的dynamic type 中搜索合适的 method signature 并运行。</p><p>注意，如果是overload:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">(LinkedList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于上面的实例化的<code>l</code>, 当Java检查要调用哪个方法时，它会检查 static type (此时是List)并使用相同类型的参数调用该方法(也就是使用List作为签名的那个方法)。</p><h3 id="总结：区别-Interface-Inheritance-vs-Implementation-Inheritance"><a href="#总结：区别-Interface-Inheritance-vs-Implementation-Inheritance" class="headerlink" title="总结：区别 Interface Inheritance vs Implementation Inheritance"></a>总结：区别 Interface Inheritance vs Implementation Inheritance</h3><p>Interface Inheritance 接口继承（what）：指定 subclass 应该实现的功能，即只提供 method signature。</p><p>Implementation Inheritance 实现继承（how）：提供功能的实现方案，即提供 method implementation。允许代码再利用，也给subclass设计者提供了更多的自由度，由他们自行决定是否重写 default method。</p><p>Implementation inheritance 也有一些缺点：</p><ul><li>人会犯错。我们有可能忘了自己曾经重写过一个方法。</li><li>如果两个接口给出冲突的 default method，则可能很难解决冲突。</li><li>无形中鼓励代码复杂化。</li></ul><p>最后，注意从属和拥有的区别：subclass 和 superclass 是上下级从属分类，而不是拥有与被拥有的关系，不要跟 nested class 混淆。</p><p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/index.html" target="_blank" rel="noopener">Oracle</a>：<br>Interface Methods<br>Default methods and abstract methods in interfaces are inherited like instance methods. However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict. These rules are driven by the following two principles:</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Implementation-Inheritance&quot;&gt;&lt;a href=&quot;#Implementation-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Implementation Inheritance&quot;&gt;&lt;/a&gt;Implementation Inheritance&lt;/h2&gt;&lt;p&gt;实现继承是subclass从superclass继承实现的关系。&lt;/p&gt;
&lt;h3 id=&quot;default-method-缺省方法（从-Java-8开始）&quot;&gt;&lt;a href=&quot;#default-method-缺省方法（从-Java-8开始）&quot; class=&quot;headerlink&quot; title=&quot;default method 缺省方法（从 Java 8开始）&quot;&gt;&lt;/a&gt;default method 缺省方法（从 Java 8开始）&lt;/h3&gt;&lt;p&gt;除了signature之外，Java也允许subclass继承implementation。&lt;br&gt;我们可以在List中列出已实现的method。这些方法是 default method，定义了List hypernyms的一些默认行为：&lt;code&gt;default public void method() { ... }&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 12 接口继承 Interface Inheritance - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-12-Interface-Inheritance/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-12-Interface-Inheritance/</id>
    <published>2018-02-23T00:00:00.000Z</published>
    <updated>2018-03-20T22:38:53.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interfaces-Inheritance"><a href="#Interfaces-Inheritance" class="headerlink" title="Interfaces Inheritance"></a>Interfaces Inheritance</h2><h3 id="Motivation-扩展代码适用性"><a href="#Motivation-扩展代码适用性" class="headerlink" title="Motivation:扩展代码适用性"></a>Motivation:扩展代码适用性</h3><p>我们前面创建的 <code>LinkedList</code> and <code>ArrayList</code> 其实很相似 - 所有的method都一样.</p><p>如果我们需要写一个需要用到 list 的类比如<code>WordUtils</code> class, 我们如何让它既可以使用<code>LinkedList</code>又可以用<code>ArrayList</code>？<br><a id="more"></a><br>简单的方法及时写两个同名不同参数的methods。即所谓<code>method overloading</code>。<br><code>public static String longest(LinkedList&lt;String&gt; list)</code><br><code>public static String longest(ArrayList&lt;String&gt; list)</code></p><p>但 overload 有几个缺点:</p><ul><li>超级重复，写两个几乎相同的代码块。</li><li>产生更多需要维护的代码，那意味着如果你想对的方法做一个小优化或debug，你需要在对应每种list的方法中改变它。</li><li>如果我们想要适配更多的列表类型，不得不复制每个新列表类的方法。</li></ul><p>另一种方法是使用 interface 接口。<br><!-- more --></p><h3 id="Hypernyms-Hyponyms-and-Interface-Inheritance-上位词，下义词和接口继承"><a href="#Hypernyms-Hyponyms-and-Interface-Inheritance-上位词，下义词和接口继承" class="headerlink" title="Hypernyms, Hyponyms, and Interface Inheritance 上位词，下义词和接口继承"></a>Hypernyms, Hyponyms, and Interface Inheritance 上位词，下义词和接口继承</h3><p>首先要理解，上位词和下位词是语言学的定义，直接沿用到编程语言中。就像狗是哈士奇的上位词，哈士奇是狗的下义词，在Java把这种关系形式化：如果<code>LinkedList</code>是List的Hyponyms，那么<code>LinkedList</code>类是List的subclass，而List类是<code>LinkedList</code>类的superclass(超类/父类)。</p><p>在Java中，为了表达这种层次结构，我们需要：</p><ol><li>为 hypernym - 通用列表 List 定义类型。</li><li>指定<code>LinkedList</code>和<code>ArrayList</code>是该类型的hyponyms。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 List 是Java中的 interface 接口。本质上是一个指定list必须能够做什么的合约，具体如何做并不是它关心的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 具体的执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        insert(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定ArrayList是List的hyponyms. <code>implements List&lt;Item&gt;</code>类似一种承诺，保证将拥有并定义在List interface 中制定的所有属性（变量）和行为（方法）。 List中指定的方法的具体实现过程就是在这种hyponyms中实现的。</p><p>这样就可以同时适配多种list：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">   <span class="comment">/** Returns the length of the longest word. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> list.get(maxDex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     ArrayList&lt;String&gt; someList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     <span class="comment">//or</span></span><br><span class="line">     LinkedList&lt;String&gt; someList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">     ...</span><br><span class="line">     System.out.println(longest(someList));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Overriding-重写"><a href="#Overriding-重写" class="headerlink" title="Overriding 重写"></a>Overriding 重写</h3><p>如果subclass和superclass有signature一样的method, 那么subclass就是在 override 重写这个方法。</p><pre><code>Override 要与 overloaded 区别开，重载的方法虽同名，却不同signature。</code></pre><p>在子类中实现合约指定的功能时，需要在method的signature顶部包含<code>@Override</code>标签。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是，即使不包含这个<code>@Override</code>，仍然重写了这个方法。所以技术上讲，它不是必须的。但是，它可以作为一个保障, 提醒编译器我们打算重写此方法，就好像有一个校对员, 如果过程中出现问题, 编译器可以提醒。假设当我们想 override <code>addLast</code>，却不小心写成<code>addLsat</code>。此时如果不包含<code>@Override</code>，那么可能无法发现错误。如果有了<code>@Override</code>，编译器就会提示我们修复错误。</p><h3 id="总结：Interface-Inheritance"><a href="#总结：Interface-Inheritance" class="headerlink" title="总结：Interface Inheritance"></a>总结：Interface Inheritance</h3><p>接口继承是指subclass继承superclass的所有方法/行为的关系：</p><ul><li>子类继承父类</li><li>Interfaces 接口列出所有方法的签名，就像‘合约’，但没有具体的实现</li><li>根据‘合约’，由子类来实现且必须实现（override 重写）每一个method，否则无法通过编译</li><li>继承关系可以延续多代。例如，B可以继承A，C可以继承B.</li></ul><h3 id="GRoE"><a href="#GRoE" class="headerlink" title="GRoE"></a>GRoE</h3><p>根据Java的Golden Rule of Equals，每一个赋值a = b，本质上是把b中的bits拷贝到a中，着要求b和a的类型相同。</p><p>同理, 假设<code>public static String longest(List&lt;String&gt; list)</code>既接受List, 也接受ArrayList和LinkedList，但是由于ArrayList和List是不同的类，那怎么遵守GRoE呢？</p><p>因为ArrayList与List有着上下位包含的关系，这意味着ArrayList应该能够赋值给List的内存位中.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; someList = <span class="keyword">new</span> SLList&lt;String&gt;();</span><br><span class="line">    someList.addFirst(<span class="string">"elk"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码运行时，会创建SLList并将其地址存储在someList变量中。然后将字符串“elk”插入到由addFirst引用的SLList中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Interfaces-Inheritance&quot;&gt;&lt;a href=&quot;#Interfaces-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Interfaces Inheritance&quot;&gt;&lt;/a&gt;Interfaces Inheritance&lt;/h2&gt;&lt;h3 id=&quot;Motivation-扩展代码适用性&quot;&gt;&lt;a href=&quot;#Motivation-扩展代码适用性&quot; class=&quot;headerlink&quot; title=&quot;Motivation:扩展代码适用性&quot;&gt;&lt;/a&gt;Motivation:扩展代码适用性&lt;/h3&gt;&lt;p&gt;我们前面创建的 &lt;code&gt;LinkedList&lt;/code&gt; and &lt;code&gt;ArrayList&lt;/code&gt; 其实很相似 - 所有的method都一样.&lt;/p&gt;
&lt;p&gt;如果我们需要写一个需要用到 list 的类比如&lt;code&gt;WordUtils&lt;/code&gt; class, 我们如何让它既可以使用&lt;code&gt;LinkedList&lt;/code&gt;又可以用&lt;code&gt;ArrayList&lt;/code&gt;？&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>Accelerated Natural Language Processing - Informatics - University of Edinburgh</title>
    <link href="http://yoursite.com/Accelerated-Natural-Language-Processing-UoE/"/>
    <id>http://yoursite.com/Accelerated-Natural-Language-Processing-UoE/</id>
    <published>2018-01-31T00:00:00.000Z</published>
    <updated>2018-05-02T15:51:54.504Z</updated>
    
    <content type="html"><![CDATA[<p>自然语言处理入门，知识点汇总。</p><p>References:<br><a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/" target="_blank" rel="noopener">Accelerated natural language processing</a><br><a href="https://www.inf.ed.ac.uk/teaching/courses/anlp/review/review_ay17.html" target="_blank" rel="noopener">ANLP revision guide</a><br><a href="https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html" target="_blank" rel="noopener">Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning</a><br><a id="more"></a></p><h2 id="概率模型-Probability-model"><a href="#概率模型-Probability-model" class="headerlink" title="概率模型 Probability model"></a>概率模型 Probability model</h2><p>概率模型是随机现象的数学表示，由样本空间，样本空间内的事件以及与每个事件相关的概率定义。目标是模拟给一个事件发生的概率</p><h3 id="估算概率-Probability-estimation"><a href="#估算概率-Probability-estimation" class="headerlink" title="估算概率 Probability estimation"></a>估算概率 Probability estimation</h3><p>相关频率/最大似然估计<br>Relative frequency / maximum likelihood estimation p(X) = Count(x)/N</p><h3 id="平滑-Smoothing"><a href="#平滑-Smoothing" class="headerlink" title="平滑 Smoothing"></a>平滑 Smoothing</h3><p>一般用于处理0概率的问题，比如在训练集中看不到, 但出现在测试集中的词。</p><h3 id="Language-modeling"><a href="#Language-modeling" class="headerlink" title="Language modeling"></a>Language modeling</h3><ul><li>What: To compute the probability of sentence /sequence of words P(w1, w2, w3…), or to predict upcomming words P(w|w1, w2, w3…)… a language model is also a probability model.</li><li>Why: the motivation is that probability is essential in identifying information in noisy, ambiguous inputs: speech recognition, machine translation, spelling correction…</li><li>How: rely on chain rule of probability, the products of a sequence of <strong>conditional</strong> probability.</li><li>Simplified by Markov Assumption: approximate the conditional probability by only accounting several prefixes,<br><code>P(the| water is so transparent that) ≈ P(the| that)</code></li><li><a href="#evaluation-concepts-and-methods">Evaluation</a>: how good is the model</li></ul><h2 id="GENERATIVE-PROBABILISTIC-MODELS"><a href="#GENERATIVE-PROBABILISTIC-MODELS" class="headerlink" title="GENERATIVE PROBABILISTIC MODELS"></a>GENERATIVE PROBABILISTIC MODELS</h2><p>Generative(joint) models palce probabilities P(c,d) over both observed data d and the hidden variables c (generate the obersved data from hidden stuff).</p><h3 id="N-Gram-Language-Model"><a href="#N-Gram-Language-Model" class="headerlink" title="N-Gram Language Model"></a>N-Gram Language Model</h3><ul><li>Unigram P(w1,w2,w3..) ≈ P(w1)*P(w2)*P(w3)</li><li>Bigram P(wn| w1,w2,w3..) ≈ P(wn| wn-1)</li><li>Estimate probability by counting:<br><code>P(wi| prefixes) = count(prefixes, wi)/count(prefixes)</code></li><li>In practice, use log space to avoid underflow, and adding is faster than multiplying.</li><li>Insufficient:<ul><li>long-distance dependencies</li><li>N-grams only work well for word prediction if the test corpus looks like the training corpus.</li></ul></li><li>To deal with 0 probability, commonly use <a href="#kneser-ney-smoothing">Kneser-Ney smoothing</a>, for very large N-grams like web, use stupid backoff.</li></ul><h4 id="Add-alpha-smoothing"><a href="#Add-alpha-smoothing" class="headerlink" title="Add alpha smoothing"></a>Add alpha smoothing</h4><ul><li>Assign equal probability to all unseen events.</li><li>Applied in text classification, or domains where zeros probability is not common.</li></ul><h4 id="Backoff-smoothing"><a href="#Backoff-smoothing" class="headerlink" title="Backoff smoothing"></a>Backoff smoothing</h4><ul><li>Use information from lower order N-grams (shorter histories)</li><li>Back off to a lower-order N-gram if we have zero evidence for a higher-order interpolation N-gram.</li><li>Discount: In order for a backoff model to give a correct probability distribution, we have to discount the higher-order N-grams to save some probability mass for the lower order N-grams.</li></ul><h4 id="Interpolation-smoothing"><a href="#Interpolation-smoothing" class="headerlink" title="Interpolation smoothing"></a>Interpolation smoothing</h4><ul><li>Interpolation: mix the probability estimates from all the N-gram estimators, weighing and combining the trigram, bigram, and unigram counts</li><li>Simple interpolation: <code>P(w3|w1,w2)=1P(w3|w1,w2)+λ2P(w3|w2)+λ3P(w3)</code>, Σλ=1.</li><li>λ could be trianed/conditioned on training set/contest, choose λ that maximie the probability of held-out data</li></ul><h4 id="Kneser-Ney-smoothing"><a href="#Kneser-Ney-smoothing" class="headerlink" title="Kneser-Ney smoothing"></a>Kneser-Ney smoothing</h4><ul><li>Combine absolute discounting and interpolation: Extending interpolatation with an absolute discounting 0.75 for high order grams.</li><li>Use a better estimate for probabilities of lower-order unigrams, the continuation probability, P_continuatin(w) is how likely is w to appear as a novel continutaion.<ul><li>For each word w, count the number of bigram types it completes. Or count the number of word types seen to precede w.</li><li>Every bigram type was a novel continuation the first time it was seen.</li><li>normalized by the total number of word bigram types.</li></ul></li><li>To lower the probability of some fix bigram like “San Franscio”</li><li>For bigram, <code>Pkn(wi|wi-1)=max(count(wi-1,wi)-d, 0)/c(wi-1) +λ(wi-1)P_continuatin(wi), λ(wi-1) = d{w:count(wi-1,w)&gt;0}/c(wi-1)</code>, where {w:count(wi-1,w)&gt;0} is the number of word types that can follow wi-1, also is the # of word types we discounted, also is the # of times we applied normalized discount.</li><li>For general N-gram, <img src="/images/kneser-ney.png" alt=""></li></ul><h3 id="Naive-Bayes-classifier"><a href="#Naive-Bayes-classifier" class="headerlink" title="Naive Bayes classifier"></a>Naive Bayes classifier</h3><ul><li>Application: <a href="#text-classification">Text classification</a>, to classify a text, we calculate each class probability given the test sequence, and choose the biggest one.</li><li>Evaluation: <a href="#precision-recall-f-measure">precision, recall, F-measure</a></li><li>Strength and Weakness: 高效, 快速, 但对于组合性的短语词组, 当这些短语与其组成成分的字的意思不同时, NB的效果就不好了</li></ul><h3 id="Text-classification"><a href="#Text-classification" class="headerlink" title="Text classification"></a>Text classification</h3><p>Or text categorization, method is not limited to NB, see <a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/labs/lab7.html" target="_blank" rel="noopener">lab7</a>.<br>Spam email, gender/authorship/language identification, sentiments analysis,(opinion extraction, subjectivity analysis)…</p><h4 id="Sentiments-analysis"><a href="#Sentiments-analysis" class="headerlink" title="Sentiments analysis"></a>Sentiments analysis</h4><ul><li>For sentiment(or other text classification), word occurrence may matter more than word frequency. Thus it often improves performance to clip the word counts in each document at 1.<ul><li>This variant binary NB is called binary multinominal naive Bayes or binary NB.</li><li>Remove duplicates in each data sample - bag of words representation, boolean features. Binarized seems to work better than full word counts.</li></ul></li><li>Deal with negation: <code>like, not like</code>, A very simple baseline that is commonly used in sentiment to deal with negation is during text normalization to prepend the prefix NOT_ to every word after a token of logical negation</li><li>Sentiment lexicons: lists of words that are preannotated with positive or negative sentiment. To deal with insufficient labeled training data. A common way to use lexicons in the classifier is to use as one feature the total<br>count of occurrences of any words in the positive lexicon, and as a second feature the total count of occurrences of words in the negative lexicon. Using just two features results in classifiers that are much less sparse to small amounts of training data, and may generalize better. See <a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/labs/lab8.html" target="_blank" rel="noopener">lab8</a>.</li></ul><h4 id="Naive-Bayes-Assumptions"><a href="#Naive-Bayes-Assumptions" class="headerlink" title="Naive Bayes Assumptions"></a>Naive Bayes Assumptions</h4><ul><li>Bags of words: a set of unordered words/features with its frequency in the documents, their order was ignored.</li><li>Conditional independence: the probabilities P(w|C) are independence given the class, thus a sequence of words(w1,w2,w3…) probability coculd be estimate via prducts of each P(wi|C) by walking through every pisition of the sequence, noted that the orders in the sequnce does not matter.</li></ul><h4 id="NB-Training"><a href="#NB-Training" class="headerlink" title="NB Training"></a>NB Training</h4><ul><li>Each classes’ prior probability P(C) is the percentage of the classes in the training set.</li><li>For the test set, its probability as a class j, is the products of its sequence probability P(w1, w2, w3…|Cj) and P(Cj), normalized by the sequence probability P(w1, w2, w3…), which could be calculated by summing all P(w1, w2, w3…|Cj)*P(Cj).</li><li>The joint features probability P(w1, w2, w3…|C) of each class is calculated by naively multiplying each word’s MLE given that class.</li><li>In practice, to deal with 0 probability, we dun use MLE, instead we use add alpha smoothing.<ul><li>Why 0 probability matters? Because it makes the whole sequence probability P(w1, w2, w3…|C) 0, then all the other features as evidence for the class are eliminated too.</li><li>How: first extract all the vocabulary V in the training set.</li><li>Then, for each feature/word k, its add alpha smoothing probability estimation within a class j is (Njk + alpha)/(Nj+V*alpha).</li><li>This is not the actual probability, but just the numerator.</li></ul></li></ul><h4 id="Naive-bayes-relationship-to-language-modelling"><a href="#Naive-bayes-relationship-to-language-modelling" class="headerlink" title="Naive bayes relationship to language modelling"></a>Naive bayes relationship to language modelling</h4><ul><li>When using all of the words as features for naive bayes, then each class in naive bayes is a unigram languange model.</li><li>For each word, assign probability P(word|C),</li><li>For each sentence, assign probability P(S|C) = P(w1,w2,w3…|C)</li><li>Running multiple languange models(classes) to assign probabilities, and pick out the highest language model.</li></ul><h3 id="Hidden-Markov-Model"><a href="#Hidden-Markov-Model" class="headerlink" title="Hidden Markov Model"></a>Hidden Markov Model</h3><ul><li>What: The HMM is a probabilistic sequence model: given a sequence of units (words, letters, morphemes, sentences, whatever), they compute a probability distribution over possible sequences of labels and choose the best label sequence.</li><li>parameter λ: A Transition probability matrix, B Emission probability</li><li>Application: part-of-speech tagging, name entity recognition(NEr), parse tree, speech recognition</li><li>Hidden: these tags, trees or words is not observed(hidden)</li><li>The three fundamental problems of HMM:<ul><li>decoding: discover the best hidden state sequnce via <a href="#viterbi-algorithm">Viterbi algorithm</a></li><li>Probability of the observation: Given an HMM with know parameters λ and an observation sequence O, determine the likelihood P(O| λ) (a language model regardless of tags) via <a href="#forward-algorithm">Forward algorithm</a></li><li>Learning: Given only the observed sequence, learn the best(MLE) HMM parameters λ via <a href="#forward-backward-algorithm">forward-backward algorithm</a>, thus <a href="#hmm-training">training a HMM</a> is an unsupervised learning task.</li></ul></li></ul><h4 id="Part-of-speech-tagging"><a href="#Part-of-speech-tagging" class="headerlink" title="Part-of-speech tagging"></a>Part-of-speech tagging</h4><ul><li>Part-of-speech(POS), word classes, or syntactic categories, a description of eight parts-of-speech: noun, verb, adjective, adverb, pronoun, preposition, conjunction, interjection, and sometimes numeral, article or determiner.<ol><li>noun 名詞 (代號 n. )</li><li>pronoun 代名詞 (代號 pron. )</li><li>verb 動詞 (代號 v. )</li><li>adjective 形容詞 (代號 adj. )</li><li>adverb 副詞 (代號 adv. )</li><li>preposition 介系詞 (代號 prep. )</li><li>conjunction 連接詞 (代號 conj. )</li><li>interjection 感歎詞 (代號 int. )</li></ol></li><li>Motivation: Use model to find the best tag sequnce T for an untagged senetnce S: argmax P(T|S) -&gt; argmax P(S|T)*P(T), where P(T) is the  transition (prior) probabilities,  P(S|T) is the emission (likelihood) probabilities.</li><li>Parts-of-speech can be divided into two broad supercategories: <a href="#open-class-closed-class">closed class types and open class types</a></li><li>Search for the best tag sequnce: <a href="#viterbi-algorithm">Viterbi algorithm</a></li><li>evaluation: tag accuracy</li></ul><h5 id="Transition-probability-matrix"><a href="#Transition-probability-matrix" class="headerlink" title="Transition probability matrix"></a>Transition probability matrix</h5><ul><li>Tags or states</li><li>Each (i,j) represent the probability of moving from state i to j</li><li>When estimated from sequnces, should include beginning <s> and end<br></s> markers.</li><li>Tag transition probability matrix: the probability of tag i followed by j</li></ul><h5 id="Emission-probability"><a href="#Emission-probability" class="headerlink" title="Emission probability"></a>Emission probability</h5><ul><li>Also called observation likelihoods, each expressing the probability of an observation j being generated from a states i.</li><li>Word/symbol</li></ul><h5 id="Penn-Treebank"><a href="#Penn-Treebank" class="headerlink" title="Penn Treebank"></a>Penn Treebank</h5><p><img src="/images/Treebank.png" alt=""></p><h4 id="Viterbi-algorithm"><a href="#Viterbi-algorithm" class="headerlink" title="Viterbi algorithm"></a>Viterbi algorithm</h4><ul><li>Decoding task: the task of determining which sequence of variables is the underlying source of some sequence of observations.</li><li>Intuition: The probability of words w1 followed by w2 with tag/state i and j (i,j is index of all Tags), is the chain rule of the probability of i followed by j and the probability of i output wi P(w1|i) and P(w2 |j), then choose the maximum from all the possible i j. Then using chain rule to multiply the whole sequence of words.</li><li>The value of each cell Vt(j) is computed by recursively taking the most probable path that could lead us to this cell from left columns to right. See exampls in <a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/labs/lab_solutions.html#Tutorial_2" target="_blank" rel="noopener">tutorial 2</a><br><img src="/images/viterbi.png" alt=""></li><li>Since HMM based on Markov Assumptions, so the present column Vt is only related with the nearby left column Vt-1.</li></ul><h4 id="Forward-algorithm"><a href="#Forward-algorithm" class="headerlink" title="Forward algorithm"></a>Forward algorithm</h4><ul><li>Compute the likelihood of a particular observation sequence.</li><li>Implementation is almost the same as Viterbi.</li><li>Yet Viterbi takes the max over the previous path probabilities whereas the forward algorithm takes the sum.</li></ul><h4 id="HMM-Training"><a href="#HMM-Training" class="headerlink" title="HMM Training"></a>HMM Training</h4><p>learning the parameters of an HMM</p><h5 id="Forward-backward-algorithm"><a href="#Forward-backward-algorithm" class="headerlink" title="Forward-backward algorithm"></a>Forward-backward algorithm</h5><ul><li>inputs: just the observed sequence</li><li>output: the converged λ(A,B).</li><li>For each interation k until λ converged:<ul><li>Compute expected counts using λ(k-1)</li><li>Set λ(k) using MLE on the expected counts.</li></ul></li></ul><h3 id="Context-free-grammar"><a href="#Context-free-grammar" class="headerlink" title="Context-free grammar"></a>Context-free grammar</h3><p>CFG(phrase-structure grammar) consists of a set of rules or productions, each of which expresses the ways that symbols of the language can be grouped and ordered toLexicon gether, and a lexicon of words and symbols.</p><h4 id="Probabilistic-Context-Free-Grammar"><a href="#Probabilistic-Context-Free-Grammar" class="headerlink" title="Probabilistic Context-Free Grammar"></a>Probabilistic Context-Free Grammar</h4><p>PCFG(Stochastic Context-Free Grammar SCFG (SCFG)), a probabilistic augmentation of context-free grammars in which each rule is associated with a probability.</p><ul><li>G = (T,N,S,R,P)<ul><li>T, N: Terminal and Non-terminal</li><li>S: starts symbol</li><li>R: Derive rule/grammar, N -&gt; N/C</li><li>P: a probability function, for a given N, ΣP(N-&gt;Ni/Ci)=1. Normally P(S-&gt;NP VP)=1, because this is the only rule for S.</li></ul></li><li>PCFG could generates a sentence/tree,<ul><li>thus it is a language model, assigns a probability to the string of words constituting a sentence</li><li>The probability of a tree t is the product of the probabilities of the rules used to generate it.</li><li>The probability of the string s is the sum of the probabilities of the trees/parses which have that string as their yield.</li><li>The probability of an ambiguous sentence is the sum of the probabilities of all the parse trees for the sentence.</li></ul></li><li>Application: Probabilistic parsing</li><li>Shortage: lack the lexicalization of a trigram model, i.e only a small fraction of the rules contains information about words. To solve this problem, use <a href="#lexicalization-of-pcfgs">lexicalized PCFGs</a></li></ul><h4 id="Lexicalization-of-PCFGs"><a href="#Lexicalization-of-PCFGs" class="headerlink" title="Lexicalization of PCFGs"></a>Lexicalization of PCFGs</h4><ul><li>The head word of phrase gives a good representation of the phrase’s structure and meaning</li><li>Puts the properties of words back into a PCFG</li><li>Word to word affinities are useful for certain ambiguities, because we know the probability of rule with words and words now, e.g. PP attachment ambiguity</li></ul><h4 id="Recursive-Descent-Parsing"><a href="#Recursive-Descent-Parsing" class="headerlink" title="Recursive Descent Parsing"></a>Recursive Descent Parsing</h4><ul><li>It is a top-down, depth-first parser:<ol><li>Blindly expand nonterminals until reaching a terminal (word).</li><li>If multiple options available, choose one but store current state<br>as a backtrack point (in a stack to ensure depth-first.)</li><li>If terminal matches next input word, continue; else, backtrack<br><img src="/images/Recursive_descent.png" alt=""></li></ol></li><li>can be massively inefficient (exponential in sentence length) if faced with local ambiguity</li><li>infinite loop</li></ul><h4 id="CKY-parsing"><a href="#CKY-parsing" class="headerlink" title="CKY parsing"></a>CKY parsing</h4><h5 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h5><h5 id="Well-formed-substring-table"><a href="#Well-formed-substring-table" class="headerlink" title="Well-formed substring table"></a>Well-formed substring table</h5><p>For parsing, subproblems are analyses of substrings, memoized in well-formed substring table(WFST, chart).</p><ul><li>Chart entries are indexed by start and end positions in the sentence, and correspond to:<ul><li>either a complete constituent (sub-tree) spanning those positions (if working bottom-up),</li><li>or a prediction about what complete constituent might be found (if working top-down).</li></ul></li><li>The chart is a matrix where cell [i, j] holds information about the word span from position i to position j:<ul><li>The root node of any constituent(s) spanning those words</li><li>Pointers to its sub-constituents</li><li>(Depending on parsing method,) predictions about what<br>constituents might follow the substring.</li></ul></li></ul><h5 id="Probability-CKY-parsing"><a href="#Probability-CKY-parsing" class="headerlink" title="Probability CKY parsing"></a>Probability CKY parsing</h5><p><img src="/images/CKY_proba1.png" alt=""><br><img src="/images/CKY_proba2.png" alt=""></p><h3 id="Noisy-channel-model"><a href="#Noisy-channel-model" class="headerlink" title="Noisy channel model:"></a>Noisy channel model:</h3><ul><li>The intuition of the noisy channel model is to treat the misspelled word as if a correctly spelled word had been “distorted” by being passed through a noisy communication channel.</li><li>a probability model using Bayesian inference, input -&gt; noisy/errorful encoding -&gt; output, see an observation x (a misspelled word) and our job is to find the word w that generated this misspelled word.</li><li><code>P(w|x) = P(x|w)\*P(w)/P(x)</code></li></ul><h4 id="Noisy-channel-model-of-spelling-using-naive-bayes"><a href="#Noisy-channel-model-of-spelling-using-naive-bayes" class="headerlink" title="Noisy channel model of spelling using naive bayes"></a>Noisy channel model of spelling using <a href="#nb-training">naive bayes</a></h4><ul><li>The noisy channel model is to maximize the product of likelihood(probability estimation) P(s|w) and the prior probability of correct words P(w). Intuitively it is modleing the noisy channel that turn a correct word ‘w’ to the misspelling.</li><li>The likelihood(probability estimation) P(s|w) is called the the channel/error model, telling if it was the word ‘w’, how likely it was to generate this exact error.</li><li>The P(w) is called the language model</li></ul><h2 id="DISCRIMINATIVE-PROBABILISTIC-MODELS"><a href="#DISCRIMINATIVE-PROBABILISTIC-MODELS" class="headerlink" title="DISCRIMINATIVE PROBABILISTIC MODELS"></a>DISCRIMINATIVE PROBABILISTIC MODELS</h2><p>Discriminative(conditional) models take the data as given, and put a probability over hidden structure given the data, P(c|d).</p><h3 id="Exponential-Log-linear-MaxEnt-Logistic-models"><a href="#Exponential-Log-linear-MaxEnt-Logistic-models" class="headerlink" title="Exponential (Log-linear, MaxEnt, Logistic) models"></a>Exponential (Log-linear, MaxEnt, Logistic) models</h3><p>Make probability model from the linear combination of weights λ and features f as votes, normalized by the total votes<img src="/images/softmax.png" alt="">.</p><ul><li>It is a probabilistic distribution: it estimates a probability for each class/label, aka Softmax.</li><li>It is a classifier, choose the highest probability label.</li><li>Application: dependency parsing actions prediction, text classification, <a href="#word-sense-disambiguation">Word sense disambiguation</a><br><img src="/images/discriminative.png" alt=""></li></ul><h4 id="Topics-categorization"><a href="#Topics-categorization" class="headerlink" title="Topics categorization"></a>Topics categorization</h4><h4 id="Training-discriminative-model"><a href="#Training-discriminative-model" class="headerlink" title="Training discriminative model"></a>Training discriminative model</h4><ul><li>Features in NLP are more general, they specify indicator function(a yes/no[0,1] boolean matching function) of properties of the input and each class.</li><li>Weights: low possibility features will associate with low/negative weight, vise versa.</li><li>Define features: Pick sets of data points d which are distinctive enough to deserve model parameters: related words, words contians #, words end with ing, etc.</li></ul><h4 id="Regularization-in-discriminative-model"><a href="#Regularization-in-discriminative-model" class="headerlink" title="Regularization in discriminative model"></a>Regularization in discriminative model</h4><p>The issue of scale:</p><ul><li>Lots of features</li><li>sparsity:<ul><li>easily overfitting: need smoothing</li><li>Many features seen in training never occur again in test</li></ul></li><li>Optimization problem: feature weights can be infinite, and iterative solvers can take a long time to get to those infinities. See <a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/tutorials/anlp_t04-sol.pdf" target="_blank" rel="noopener">tutorial 4</a>.</li><li>Solution:<ul><li>Early stopping</li><li>Smooth the parameter via L2 regularization.</li><li>Smooth the data, like the add alpha smoothing, but hard to know what artificial data to create</li></ul></li></ul><h3 id="Generative-vs-Discriminative-Models"><a href="#Generative-vs-Discriminative-Models" class="headerlink" title="Generative vs. Discriminative Models"></a>Generative vs. Discriminative Models</h3><ul><li>Navie bayes models multi-count correlated evidence: each feature is multipled in, even when you have multiple features telling the same informaiton.</li><li>Maxent: solve this issue by weighting features so that model expectations match the observed(empirical) expectations.</li></ul><h2 id="LINGUISTIC-AND-REPRESENTATIONAL-CONCEPTS"><a href="#LINGUISTIC-AND-REPRESENTATIONAL-CONCEPTS" class="headerlink" title="LINGUISTIC AND REPRESENTATIONAL CONCEPTS"></a>LINGUISTIC AND REPRESENTATIONAL CONCEPTS</h2><h3 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h3><p>a language for specifying text search strings.</p><h3 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h3><ul><li>Parsing is a combination of recognizing an input string and assigning a <strong>correct</strong> linguistic structure/tree to it based on a grammar.</li><li>The Syntactic, Statistical parsing are constituent-based representations(context-free grammars).</li><li>The Dependency Parsing are based on dependency structure(dependency grammars).</li></ul><h4 id="Syntactic-Parsing"><a href="#Syntactic-Parsing" class="headerlink" title="Syntactic Parsing"></a>Syntactic Parsing</h4><p>Syntactic parsing, is the task of recognizing a sentence and assigning a correct syntactic structure to it.</p><ul><li>Syntactic parsing can be viewed as a search<ul><li>search space: all possible trees generated by the grammar</li><li>search guided by the structure of the space and the input.</li><li>search direction<ul><li>top-down: start with root category (S), choose expansions, build down to words.</li><li>bottom-up: build subtrees over words, build up to S.</li></ul></li><li>Search algorithm/strategy: DFS, BFS, Recursive descent parsing, CKY Parsing</li></ul></li><li>Challenge: Structual <a href="#ambiguity">Ambiguity</a></li></ul><h4 id="Statistical-Parsing"><a href="#Statistical-Parsing" class="headerlink" title="Statistical Parsing"></a>Statistical Parsing</h4><p>Or probabilistic parsing, Build probabilistic models of syntactic knowledge and use some of this probabilistic knowledge to build efficient probabilistic parsers.</p><ul><li>motivation: to solve the problem of disambiguation</li><li>algorithm: <a href="#probability-cky-parsing">probability CKY parsing</a></li><li>evaluation: Compare the output <strong>constituency</strong> parser with golden standard tree, a constituent(part of the output parser) marked as correct if it spans the same sentence positions with the corresponding constituent in golder standard tree. Then we get the <a href="#precision-recall-f-measure">precision, recall and F1 measure</a>.<ul><li>constituency: S-(0:10), NP-(0:2), VP-(0:9)…</li><li>Precission = (# correct constituents)/(# in parser output), recall = (# correct constituents)/(# in gold standard)</li><li>Not a good evaluation, because it higher order constituent is marked wrong simply it contains a lower level wrong constituent.</li></ul></li></ul><h4 id="Dependency-Parsing"><a href="#Dependency-Parsing" class="headerlink" title="Dependency Parsing"></a><a href="#dependency-parsing">Dependency Parsing</a></h4><h3 id="Constituency"><a href="#Constituency" class="headerlink" title="Constituency"></a>Constituency</h3><p>Phrase structure, organizes words into nested constituents. Groups of words behaving as a single units, or constituents.</p><ul><li>Noun phrase(NP), a sequence of words surrounding at least one noun. While the whole noun phrase can occur before a verb, this is not true of each of the individual words that make up a noun phrase</li><li>Preposed or Postposed constructions. While the entire phrase can be placed differently, the individual words making up the phrase cannot be.</li><li>Fallback: In languages with free word order, phrase structure<br>(constituency) grammars don’t make as much sense.</li><li>Headed phrase structure: many phrase has head, VP-&gt;VB, NP-&gt;NN, the other symbols excepct the head is modifyer.</li></ul><h3 id="Dependency-syntax"><a href="#Dependency-syntax" class="headerlink" title="Dependency syntax"></a>Dependency syntax</h3><p>Dependency structure shows which words depend on (modify or are arguments of) which other words.</p><ul><li>A fully lexicalized formalism without phrasal constituents and phrase-structure rules: binary, asymmetric grammatical relations between words.</li><li>More specific, head-dependent relations, with edges point from heads to their dependents.</li><li>Motivation: In languages with free word order, phrase structure (constituency) grammars don’t make as much sense. E.g. we may need both S → NP VP and S → VP NP, but could not tell too much information simply looking at the rule.</li><li>Dependencies: Identifies syntactic relations directly. The syntactic structure of a sentence is described solely in terms of the words (or lemmas) in a sentence and an associated set of directed binary grammatical relations that hold among the words.</li><li>Relation between phrase structure and dependency structure<ul><li>Convert phrase structure annotations to dependencies via head rules. (Convenient if we already have a phrase structure treebank.): For a given lexicalized constituency parse(CFG tree), remove the phrasal categories, remove the (duplicated) terminals,  and collapse chains of duplicates.</li><li>The closure of dependencies give constituency from a dependency tree</li></ul></li></ul><p><img src="/images/Dependency_Relations.png" alt=""></p><h4 id="Dependency-parsing"><a href="#Dependency-parsing" class="headerlink" title="Dependency parsing"></a>Dependency parsing</h4><ul><li>Motivation: context-free parsing algorithms base their decisions on adjacency; in a dependency structure, a dependent need not be adjacent to its head (even if the structure is projective); we need new parsing algorithms to deal with non-adjacency (and with non-projectivity if present).</li><li>Approach: Transition-based dependency parsing</li></ul><h4 id="Transition-based-dependency-parsing"><a href="#Transition-based-dependency-parsing" class="headerlink" title="Transition-based dependency parsing"></a>Transition-based dependency parsing</h4><p>transition-based systems use supervised machine learning methods to train classifiers that play the role of the oracle. Given appropriate training data, these methods learn a function that maps from configurations to transition operators(actions).</p><ul><li>Bottom up</li><li>Like shift-reduce parsing, but the ‘reduce’ actions are specialized to create dependencies with head on left or right.</li><li>configuration：consists of a stack, an input buffer of words or tokens, and a set of relations/arcs, a set of actions.</li><li>How to choose the next action: each action is predicted by a <a href="#discriminative-probability-models">discriminative classifier</a>(often SVM, could be maxent) over each legal move.<ul><li>features: a sequence of the correct (configuration, action) pairs f(c ; x).</li></ul></li><li>Evaluation: accuracy (# correct dependencies with or ignore label)).</li></ul><h4 id="Dependency-tree"><a href="#Dependency-tree" class="headerlink" title="Dependency tree"></a>Dependency tree</h4><ul><li>Dependencies from a CFG tree using heads, must be projective: There must not be any crossing dependency arcs when the words are laid out in their linear order, with all arcs above the words.</li><li>But dependency theory normally does allow non-projective structures to account for displaced constituents.</li></ul><h4 id="Bounded-and-unbounded-dependencies"><a href="#Bounded-and-unbounded-dependencies" class="headerlink" title="Bounded and unbounded dependencies"></a>Bounded and unbounded dependencies</h4><p>Unbounded dependency could be considered as long distance dependency</p><ul><li>Long-distance dependencies: contained in wh-non-subject-question, “What flights do you have from Burbank to Tacoma Washington?”, the Wh-NP <code>what flights</code> is far away from the predicate that it is semantically related to, the main verb <code>have</code> in the VP.</li></ul><h3 id="Ambiguity"><a href="#Ambiguity" class="headerlink" title="Ambiguity"></a>Ambiguity</h3><h4 id="Structural-ambiguity"><a href="#Structural-ambiguity" class="headerlink" title="Structural ambiguity"></a>Structural ambiguity</h4><p>Occurs when the grammar can assign more than one parse to a sentence.</p><h5 id="Attachment-ambiguity"><a href="#Attachment-ambiguity" class="headerlink" title="Attachment ambiguity"></a>Attachment ambiguity</h5><p>A sentence has an attachment ambiguity if a particular constituent can be attached to the parse tree at more than one place.</p><h5 id="Coordination-ambiguity"><a href="#Coordination-ambiguity" class="headerlink" title="Coordination ambiguity"></a>Coordination ambiguity</h5><p>different sets of phrases can be conjoined by a conjunction like and. E.g <code>green egg and bread</code>.</p><ul><li>Coordination: The major phrase types discussed here can be conjoined with conjunctions like <code>and, or, and but</code> to form larger constructions of the same type.</li></ul><h4 id="Global-and-local-ambiguity"><a href="#Global-and-local-ambiguity" class="headerlink" title="Global and local ambiguity"></a>Global and local ambiguity</h4><ul><li>global ambiguity: multiple analyses for a full sentence, like <code>I saw the man with the telescope</code></li><li>local ambiguity: multiple analyses for parts of sentence.<ul><li><code>the dog bit the child</code>: first three words could be NP (but aren’t).</li><li>Building useless partial structures wastes time.</li></ul></li></ul><h3 id="Morphology"><a href="#Morphology" class="headerlink" title="Morphology"></a>Morphology</h3><blockquote><p>构词学（英语言学分科学名：morphology，“组织与形态”；morphology (/mɔːrˈfɒlədʒi/[1]) is the study of words, how they are formed, and their relationship to other words in the same language.<ref>），又称形态学，是语言学的一个分支，研究单词（word）的内部结构和其形成方式。如英语的dog、dogs和dog-catcher有相当的关系，英语使用者能够利用他们的背景知识来判断此关系，对他们来说，dog和dogs的关系就如同cat和cats，dog和dog-catcher就如同dish和dishwasher。构词学正是研究这种单字间组成的关系，并试着整理出其组成的规则。</ref></p></blockquote><h4 id="Challenge-of-rich-Morphology"><a href="#Challenge-of-rich-Morphology" class="headerlink" title="Challenge of rich Morphology"></a>Challenge of rich Morphology</h4><p>For a morphologically rich language, many issues would arise because of the morphological complexity.</p><ul><li>These productive word-formation processes result in a large vocabulary for these languages</li><li>Large vocabularies mean many unknown words, and these unknown words cause significant performance degradations in a wide variety of languages</li><li>For POS, augmentations become necessary when dealing with highly inflected or agglutinative languages with rich morphology like Czech, Hungarian and Turkish., part-of-speech taggers for morphologically rich languages need to label words with case and gender information. Tagsets for morphologically rich languages are therefore sequences of morphological tags rather than a<br>single primitive tag.</li><li>Dependency grammar is better than constituency in dealing with languages that are morphologically rich。</li></ul><h4 id="morphemes"><a href="#morphemes" class="headerlink" title="morphemes"></a>morphemes</h4><p>The way words are built up from smaller meaning-bearing units.</p><h4 id="Lemma"><a href="#Lemma" class="headerlink" title="Lemma"></a>Lemma</h4><ul><li>Lexeme, refers to the set of all the forms that have the same meaning,</li><li>lemma refers to the particular form that is chosen by convention to represent the lexeme.</li><li>E.g: <code>run, runs, ran, running</code> are forms of the same lexeme, with run as the lemma.</li></ul><h4 id="Affixes"><a href="#Affixes" class="headerlink" title="Affixes"></a>Affixes</h4><p>Adding additional meanings of various kinds. “+ed, un+”</p><ul><li>suffix : follow the stem<ul><li>Plural of nouns ‘cat+s’</li></ul><ol><li>Comparative and superlative of adjectives ‘small+er’ </li><li>Formation of adverbs ‘great+ly’</li><li>Verb tenses ‘walk+ed’ </li><li>All inflectional morphology in English uses suffixes</li></ol></li><li>Prefix: precede the stem<ul><li>In English: these typically change the meaning </li></ul><ol><li>Adjectives ‘un+friendly’, ‘dis+interested’</li><li>Verbs ‘re+consider’</li><li>Some language use prefixing much more widely</li></ol></li><li>Infix: inserted inside the stem</li><li>Circumfix: do both(follow, precede)</li></ul><h4 id="Morphological-parsing"><a href="#Morphological-parsing" class="headerlink" title="Morphological parsing"></a>Morphological parsing</h4><p>Method: Finite-state transducers</p><h5 id="Finite-state-transducers"><a href="#Finite-state-transducers" class="headerlink" title="Finite-state transducers"></a>Finite-state transducers</h5><p>FST, a transducer maps between one representation and another; It is a kind of FSA which maps between two sets of symbols.</p><h4 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h4><ul><li>Root, stem and base are all terms used in the literature to designate that part of a word that remains when all affixes have been removed.</li><li>The root word is the primary lexical unit of a word, and of a word family (this root is then called the base word), which carries the most significant aspects of semantic content and cannot be reduced into smaller constituents.</li><li>E.g: In the form ‘untouchables’ the root is ‘touch’, to which first the suffix ‘-able’, then the prefix ‘un-‘ and finally the suffix ‘-s’ have been added. In a compound word like ‘wheelchair’ there are two roots, ‘wheel’ and ‘chair’.</li></ul><h4 id="Stem"><a href="#Stem" class="headerlink" title="Stem"></a>Stem</h4><ul><li>Stem is of concern only when dealing with inflectional morphology</li><li>Stemming: reduce terms to their stems in info retrieval,</li><li>E.g: In the form ‘untouchables’ the stem is ‘untouchable’, ‘touched’ -&gt; ‘touch’; ‘wheelchairs’ -&gt; ‘wheelchair’.</li></ul><h4 id="Inflectional-vs-Derivational-Morphology"><a href="#Inflectional-vs-Derivational-Morphology" class="headerlink" title="Inflectional vs. Derivational Morphology"></a>Inflectional vs. Derivational Morphology</h4><p>Inflectional<br>· nouns for count (plural: +s) and for possessive case (+’s)<br>· verbs for tense (+ed, +ing) and a special 3rd person singular present form (+s)<br>· adjectives in comparative (+er) and superlative (+est) forms.</p><p>Derivational<br>· Changing the part of speech, e.g. noun to verb: ‘word → wordify’<br>· Changing the verb back to a noun<br>· Nominalization: formation of new nouns, often verbs or adjectives</p><table><thead><tr><th>Inflectional</th><th>Derivational</th></tr></thead><tbody><tr><td>does not change basic meaning or part of speech</td><td>may change the part of speech or meaning of a word</td></tr><tr><td>expresses grammatical features or relations between words</td><td>not driven by syntactic relations outside the word</td></tr><tr><td>applies to all words of the same part of speech, inflection occurs at word edges: govern+ment+s, centr+al+ize+d</td><td>applies closer to the stem</td></tr></tbody></table><h3 id="Open-class-Closed-class"><a href="#Open-class-Closed-class" class="headerlink" title="Open-class Closed-class"></a>Open-class Closed-class</h3><p>Closed classes are those with relatively fixed membership</p><ul><li>prepositions: on, under, over, near, by, at, from, to, with</li><li>determiners: a, an, the</li><li>pronouns: she, who, I, others</li><li>conjunctions: and, but, or, as, if, when</li><li>auxiliary verbs: can, may, should, are</li><li>particles: up, down, on, off, in, out, at, by</li><li>numerals: one, two, three, first, second, third</li></ul><p>Open-class</p><ul><li>Nouns, verbs, adjectives, adverbs</li></ul><h3 id="Word-sense"><a href="#Word-sense" class="headerlink" title="Word sense"></a>Word sense</h3><p>A discrete representation of an aspect of a word’s meaning.<br>How: <a href="#distributional-semantic-models">Distributional semantic models</a></p><h4 id="Word-sense-disambiguation"><a href="#Word-sense-disambiguation" class="headerlink" title="Word sense disambiguation"></a>Word sense disambiguation</h4><p>WSD, The task of selecting the correct sense for a word, formulated as a classification task.</p><ul><li>Chose features: Directly neighboring words, content words, syntactically related words, topic of the text, part-of-speech tag, surrounding part-of-speech tags, etc …</li></ul><h4 id="Collocation"><a href="#Collocation" class="headerlink" title="Collocation"></a>Collocation</h4><p>A sequence of words or terms that co-occur more often than would be expected by chance.</p><h4 id="Lexical-semantic-relationships"><a href="#Lexical-semantic-relationships" class="headerlink" title="Lexical semantic relationships"></a>Lexical semantic relationships</h4><p>Relations between word senses</p><h5 id="synonym"><a href="#synonym" class="headerlink" title="synonym"></a>synonym</h5><p>代名词, When two senses of two different words (lemmas) are identical, or nearly identical, the two senses are synonyms. E.g. couch/sofa vomit/throw up filbert/hazelnut car/automobile</p><h5 id="hyponym"><a href="#hyponym" class="headerlink" title="hyponym"></a>hyponym</h5><p>下义词, One sense is a hyponym of another sense if the first sense is more specific, denoting a subclass of the other. E.g. car is a hyponym of vehicle; dog is a hyponym of animal, and mango is a hyponym of fruit.</p><h5 id="hypernym"><a href="#hypernym" class="headerlink" title="hypernym"></a>hypernym</h5><p>Superordinate, 上位词, vehicle is a hypernym of car, and animal is a hypernym of dog.</p><h5 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h5><p>Or distance, a looser metric than synonymy.<br>Two ways to measure similarity:</p><ul><li>Thesaurus词库-based: are words nearby in hypernym hierarchy? Do words have similar definitions?</li><li>Distributional: do words have similar distributional contexts</li></ul><h3 id="Distributional-semantic-models"><a href="#Distributional-semantic-models" class="headerlink" title="Distributional semantic models"></a>Distributional semantic models</h3><p>Vector semantics(embeddings): The meaning of a word is represented as a vector.</p><ul><li>Two words are similar if they have similar word contexts vector.</li><li>Term-context matrix(Co-occurrence    Matrices): a word/term is defined by a vector over counts of context words. The row represent words, columns contexts.<ul><li>Problem: simple frequency isn’t the best measure of association between words. One problem is that raw frequency is very skewed and not very discriminative. “the” and “of” are very frequent, but maybe not the most discriminative.</li><li>Sulution: use <a href="#pointwise-mutual-information">Pointwise mutual information</a>. Then the Co-occurrence    Matrices is filled with PPMI, instead of raw counts.</li></ul></li><li>Measuring vectors similarity based on PPMI:<ul><li>Dot product(inner product): More frequent words will have higher dot products, which cause similarity sensitive to word frequency.</li><li>Cosine: normalized dot product <img src="/images/cos.png" alt="Cosine">, Raw frequency or PPMI is non-negative, so cosine range [0,1].</li></ul></li><li>Evaluation of similarity<ul><li>Intrinsic: <a href="#correlation">correlation</a> between algorithm and human word similarity ratings.</li><li>Check if there is <a href="#correlation">correlation</a> between similarity measures and word frequency.</li></ul></li><li>Application: sentiment analysis, see <a href="http://www.inf.ed.ac.uk/teaching/courses/anlp/labs/lab8.html" target="_blank" rel="noopener">lab8</a></li></ul><h4 id="Pointwise-mutual-information"><a href="#Pointwise-mutual-information" class="headerlink" title="Pointwise mutual information"></a>Pointwise mutual information</h4><p>PMI: do events x and y co-occur more than if they were independent?</p><ul><li>PMI between two words: <img src="/images/PMI.png" alt="PMI"></li><li>Compute PMI on a term-context matrix(using counts):<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PMI(x, y) = log2( N·C(x, y)/C(x)C(y) )</span><br><span class="line">p(w=information,c=data)= 6/19</span><br><span class="line">p(w=information) = 11/19</span><br><span class="line">p(c=data) = 7/19</span><br><span class="line">PMI(information,data) = log2(6\*19/(11\*7))</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/PMI_counts.png" alt="PMI"></p><ul><li>PMI is biased towards infrequent events, solution:<ul><li>Add-one smoothing<h5 id="PPMI"><a href="#PPMI" class="headerlink" title="PPMI"></a>PPMI</h5>Positive PMI, could better handle low frequencies<br><code>PPMI = max(PMI,0)</code></li></ul></li></ul><h4 id="t-test"><a href="#t-test" class="headerlink" title="t-test"></a>t-test</h4><p>The t-test statistic, like PMI, can be used to measure how much<br>more frequent the association is than chance.</p><ul><li>The t-test statistic computes the difference between observed and expected means, normalized by the variance.</li><li>The higher the value of t, the greater the likelihood that we can reject the null hypothesis.</li><li>Null hypothesis: the two words are independent, and hence P(a,b) = P(a)P(b) correctly models the relationship between the two words.<br><img src="/images/t_test.png" alt="t-test"></li></ul><h4 id="Minimum-Edit-Distance"><a href="#Minimum-Edit-Distance" class="headerlink" title="Minimum Edit Distance"></a>Minimum Edit Distance</h4><p>the minimum number of editing operations (operations like insertion, deletion, substitution) needed to transform one string into another.<br>Algorithm: searching the shortest path, use Dynamic programming to avoid repeating, (use BFS to search the shortest path?)</p><h4 id="WordNet"><a href="#WordNet" class="headerlink" title="WordNet"></a><a href="http://wordnetweb.princeton.edu/perl/webwn" target="_blank" rel="noopener">WordNet</a></h4><p>A hierarchically organizesd lexical database, resource for English sense relations</p><ul><li>Synset: The set of near-synonyms for a WordNet sense (for synonym set)</li></ul><h3 id="Topic-modelling"><a href="#Topic-modelling" class="headerlink" title="Topic modelling"></a>Topic modelling</h3><p>Instead of using supervised topic classification – rather not fix topics in advance nor do manual annotation, Use clustering to teases out the topics. Only the number of topics is specified in advance.</p><ul><li>Latent Dirichlet allocation(LDA): each document may be viewed as a mixture of various topics where each document is generated by LDA.</li><li>A topic is a distribution over words</li><li>generate document:<ol><li>Randomly choose a distribution over topics</li><li>For each word in the document<ol><li>randomly choose a topic from the distribution over topics</li><li>randomly choose a word from the corresponding topic (distribution over the vocabulary)</li></ol></li></ol></li><li>training: repeat until converge<ol><li>assign each word in each document to one of T topics.</li><li>For each document d, go through each word w in d and for each topic t, compute: p(t|d), P(w|t)</li><li>Reassign w to a new topic, where we choose topic t with probability P(w|t)xP(t|d)</li></ol></li></ul><h3 id="Meaning-representation-language"><a href="#Meaning-representation-language" class="headerlink" title="Meaning representation language"></a>Meaning representation language</h3><p>The symbols in our meaning representations correspond to objects, properties, and relations in the world.</p><ul><li>Qualifications of MRL:<ul><li>Canonical form: sentences with the same (literal) meaning should have the same MR.</li><li>Compositional: The meaning of a complex expression is a function of the meaning of its parts and of the rules by which they are combined.</li><li>Verifiable: Can use the MR of a sentence to determine whether the sentence is true with respect to some given model of the world.</li><li>Unambiguous: an MR should have exactly one interpretation.</li><li>Inference: we should be able to verify sentences not only directly, but also by drawing conclusions based on the input MR and facts in the knowledge base.</li><li>Expressivity: the MRL should allow us to handle a wide range of meanings and express appropriate relationships between the words in a sentence.</li></ul></li><li>Good MRL: First-order Logic</li></ul><h4 id="First-order-Logic"><a href="#First-order-Logic" class="headerlink" title="First-order Logic"></a>First-order Logic</h4><p>FOL, Predicate logic, meets all of the MRL qualifications <strong>except compositionality</strong>.</p><ul><li>Expressions are constructed from terms:<ul><li>constant and variable symbols that represent entities</li><li>function symbols that allow us to indirectly specify entities</li><li>predicate symbols that represent properties of entities and relations between entities</li></ul></li><li>Terms can be combined into predicate-argument structures<ul><li>Logical connectives: ∨ - or, ∧ - and, ¬, ⇒</li><li>Quantifiers: ∀ (universal quantifier, i.e., “for all”), ∃ (existential<br>quantifier, i.e. “exists”)</li></ul></li><li>Predicates in FOL<ul><li>Predicates with multiple arguments represent relations between entities: member-of(UK, EU)</li><li>“/N” to indicate that a predicate takes N arguments: member-of/2</li></ul></li><li>Variables in FOL<ul><li>An expression consisting only of a predicate with a variable among its arguments is interpreted as a set: likes(x, Gim) is the set of entities that like Gim.</li><li>A predicate with a variable among its arguments only has a truth value if it is bound by a quantifier: ∀x.likes(x, Gim) has an interpretation as either true or false.</li><li>Universal Quantifier (∀): Cats are mammals has MR ∀x.cat(x) ⇒ mammal(x)</li><li>Existential Quantifier (∃): Used to express that a property/relation is true of some entity, without specifying which one: Marie owns a cat has MR ∃x.cat(x) ∧ owns(Marie,x)</li></ul></li></ul><h4 id="Lambda-λ-Expression"><a href="#Lambda-λ-Expression" class="headerlink" title="Lambda λ Expression"></a>Lambda λ Expression</h4><p>Extend FOL, to work with ‘partially constructed’ formula, <strong>Compositionality</strong>.</p><ul><li>E.g.： λx.sleep(x) is the function that takes an entity x to the FOL expression sleep(x). λx.sleep(x)(Marie) -&gt; sleep(Marie)</li><li>Verbal (event) MRs： <code>λz. λy. λx. Giving1(x,y,z) (book)(Mary)(John) -&gt; Giving1(John, Mary, book) -&gt; John gave Mary a book</code></li><li>Problem:<ul><li>fixed arguments</li><li>Requires separate <code>Giving</code> predicate for each syntactic subcategorisation frame(number/type/position of arguments).</li><li>Separate predicates have no logical relation: if <code>Giving3(a, b, c, d, e)</code> is true, what about <code>Giving2(a, b, c, d)</code> and <code>Giving1(a, b, c)</code>.</li></ul></li><li>Solution: Reification of events 事件具象化</li></ul><h4 id="Reification-of-events"><a href="#Reification-of-events" class="headerlink" title="Reification of events"></a>Reification of events</h4><p><code>John gave Mary a book -&gt; ∃e, z. Giving(e) ∧ Giver(e, John) ∧ Givee(e, Mary)∧ Given(e,z) ∧ Book(z)</code></p><ul><li>Reify: to “make real” or concrete, i.e., give events the same status as<br>entities.</li><li>In practice, introduce variables for events, which we can quantify over</li><li>Entailment relations: automatically gives us logical entailment relations between events<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[John gave Mary a book on Tuesday] -&gt; [John gave Mary a book]</span><br><span class="line">∃ e, z. Giving(e) ∧ Giver(e, John) ∧ Givee(e, Mary) ∧ Given(e,z) ∧ Book(z) ∧ Time(e, Tuesday)</span><br><span class="line">-&gt;</span><br><span class="line">∃ e, z. Giving(e) ∧ Giver(e, John) ∧ Givee(e, Mary) ∧ Given(e,z) ∧ Book(z)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Semantic-Parsing"><a href="#Semantic-Parsing" class="headerlink" title="Semantic Parsing"></a>Semantic Parsing</h3><p>Aka semantic analysis. Systems for mapping from a text string to any logical form.</p><ul><li>Motivation: deriving a meaning representation from a sentence.</li><li>Application: question answering</li><li>Method: Syntax driven semantic analysis with semantic attachments</li></ul><h4 id="Syntax-Driven-Semantic-Analysis"><a href="#Syntax-Driven-Semantic-Analysis" class="headerlink" title="Syntax Driven Semantic Analysis"></a>Syntax Driven Semantic Analysis</h4><ul><li>Principle of compositionality: the construction of constituent meaning is derived from/composed of the meaning of the constituents/words within that constituent, guided by word order and syntactic relations.</li><li>Build up the MR by augmenting CFG rules with semantic composition rules. Add semantic attachments to CFG rules.</li><li>Problem: encounter invalide FOL for some (base-form) MR, need type-raise.</li><li>Training</li></ul><h4 id="Semantic-attachments"><a href="#Semantic-attachments" class="headerlink" title="Semantic attachments"></a>Semantic attachments</h4><p>E.g<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VP → Verb NP : &#123;Verb.sem(NP.sem)&#125;</span><br><span class="line">Verb.sem = λy. λx. ∃e. Serving(e) ∧ Server(e, x) ∧ Served(e, y)</span><br><span class="line">NP.sem = Meat</span><br><span class="line">-&gt;</span><br><span class="line">VP.sem = λy. λx. ∃e. Serving(e) ∧ Server(e, x) ∧ Served(e, y) (Meat)</span><br><span class="line">= λx. ∃e. Serving(e) ∧ Server(e, x) ∧ Served(e, Meat)</span><br></pre></td></tr></table></figure></p><p>The MR for VP, is computed by applying the MR function to VP’s children.</p><p>Complete the rule:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">S → NP VP : &#123;VP.sem(NP.sem)&#125;</span><br><span class="line">VP.sem = λx. ∃e. Serving(e) ∧ Server(e, x) ∧ Served(e, Meat)</span><br><span class="line">NP.sem = AyCaramba</span><br><span class="line">-&gt;</span><br><span class="line">S.sem = λx. ∃e. Serving(e) ∧ Server(e, x) ∧ Served(e, Meat) (AyCa.)</span><br><span class="line">= ∃e. Serving(e) ∧ Server(e, AyCaramba) ∧ Served(e, Meat)</span><br></pre></td></tr></table></figure></p><h4 id="Lexical-semantics"><a href="#Lexical-semantics" class="headerlink" title="Lexical semantics"></a>Lexical semantics</h4><p>the meaning of individual words.</p><h2 id="EVALUATION-CONCEPTS-AND-METHODS"><a href="#EVALUATION-CONCEPTS-AND-METHODS" class="headerlink" title="EVALUATION CONCEPTS AND METHODS"></a>EVALUATION CONCEPTS AND METHODS</h2><h3 id="Instrinsic-vs-extrinsic-evaluation"><a href="#Instrinsic-vs-extrinsic-evaluation" class="headerlink" title="Instrinsic vs. extrinsic evaluation"></a>Instrinsic vs. extrinsic evaluation</h3><h4 id="Extrinsic"><a href="#Extrinsic" class="headerlink" title="Extrinsic"></a>Extrinsic</h4><p>Use something external to measure the model. End-to-end evaluation, the best way to evaluate the performance of a language model is to embed it in an application and measure how much the application improves.</p><ol><li>Put each model in a task: spelling corrector, speech recognizer, MT system</li><li>Run the task, get an accuracy for A and for B<ul><li>How many misspelled words corrected properly</li><li>How many words translated correctly</li></ul></li><li>Compare accuracy for A and B</li></ol><p>Unfortunately, running big NLP systems end-to-end is often very expensive.</p><h4 id="Intrinsic"><a href="#Intrinsic" class="headerlink" title="Intrinsic"></a>Intrinsic</h4><p>Measures independenly to any application. Train the parameters of both models on the training set, and then compare how well the two trained models fit the test set. Which means whichever model assigns a higher probability to the test set</p><h3 id="Perplexity"><a href="#Perplexity" class="headerlink" title="Perplexity"></a>Perplexity</h3><ul><li>It is intrinsic.</li><li>Intuition based on Shannon game:The best language model is one that best predicts an unseen test set(e.g. next word), gives the highest P(sentence) to the word that actually occurs.</li><li>Definition： Perplexity is the inverse probability of the test set, normalized by the number of words(lie between 0-1).</li><li><img src="/images/perplexity.png" alt="Use log probability"></li><li>So minimizing perplexity is the same as maximizing probability</li><li>Cannot divide 0, so use <a href="#smoothing">smoothing</a>.</li><li>Bad approximation: unless the test data looks just like the training data, so generally only useful in pilot experiments.</li></ul><h3 id="Human-evaluation"><a href="#Human-evaluation" class="headerlink" title="Human evaluation"></a>Human evaluation</h3><p>E.g to know whether the email is actually spam or not, i.e. the human-defined labels for each document that we are trying to<br>gold labels match. We will refer to these human labels as the <strong>gold labels</strong>.</p><h3 id="Precision-Recall-F-measure"><a href="#Precision-Recall-F-measure" class="headerlink" title="Precision, Recall, F-measure"></a>Precision, Recall, F-measure</h3><ul><li>To deal with unbalanced lables</li><li>Application: <a href="#text-classification">text classification</a>, parsing.</li><li>Evaluation in text classification: the 2 by 2 contingency table<img src="/images/Contingency.png" alt="contingency table">, golden lable is true or false, the classifier output is positive or negative.</li></ul><h4 id="Precision"><a href="#Precision" class="headerlink" title="Precision"></a>Precision</h4><p>% of positive items that are golden correct, from the view of classifier</p><h4 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h4><p>% of golden correct items that are positive, from the view of test set.</p><h4 id="F-measure"><a href="#F-measure" class="headerlink" title="F-measure"></a>F-measure</h4><ul><li>Motivation: there is tradeoff between precision and recall, so we need a combined meeasure that assesses the P/R tradeoff.</li><li>The b parameter differentially weights the importance of recall and precision, based perhaps on the needs of an application. Values of b &gt; 1 favor recall, while values of b &lt; 1 favor precision.</li><li>Balanced F1 measure with beta =1, F = 2PR/(P+R)</li></ul><h4 id="Confusion-matrix"><a href="#Confusion-matrix" class="headerlink" title="Confusion matrix"></a>Confusion matrix</h4><p>Recalled that confusion matrix’s row represent golden label, column represent the classifier’s output, to anwser the quesion：for any pair of classes(c1,c2), how many test sample from c1 were incorrectly assigned to c2&gt;</p><ul><li>Recall: Fraction of samples in c1 classified correctly, CM(c1,c1)/sum(CM(c1,:))</li><li>Precision: fraction of samples assigned c1 that are actually c1, CM(c1,c1)/sum(CM(:,c1))</li><li>Accuracy: sum of diagnal / all</li></ul><h3 id="Correlation"><a href="#Correlation" class="headerlink" title="Correlation"></a>Correlation</h3><p>When two sets of data are strongly linked together we say they have a High Correlation.<br>Correlation is Positive when the values increase together, and Correlation is Negative when one value decreases as the other increases.</p><ul><li>Pearson correlation: covariance of the two variables divided by the product of their standard deviations.<img src="/images/Pearson.png" alt="Pearson"></li><li>Spearman correlation: the Pearson correlation between the rank values of the two variables</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自然语言处理入门，知识点汇总。&lt;/p&gt;
&lt;p&gt;References:&lt;br&gt;&lt;a href=&quot;http://www.inf.ed.ac.uk/teaching/courses/anlp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accelerated natural language processing&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.inf.ed.ac.uk/teaching/courses/anlp/review/review_ay17.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ANLP revision guide&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://web.stanford.edu/~jurafsky/NLPCourseraSlides.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lecture Slides from the Stanford Coursera course Natural Language Processing, by Dan Jurafsky and Christopher Manning&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="人工智能" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 11 测试 Testing - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-11-testing/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-11-testing/</id>
    <published>2018-01-29T00:00:00.000Z</published>
    <updated>2018-04-23T13:44:33.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如何知道自己的程序是否真的在工作？在现实世界中，程序员相信他们的代码，因为代码通过了他们自己编写的测试。常用的测试有 Ad Hoc Testing， Unit test 和 Integration Testing。</p><p>Ad Hoc Testing，是指没有计划和记录的软件测试，除非发现缺陷，不然一般只运行一次。</p><h3 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h3><p>程序可分解为单元（或程序中可测试的最小部分），它严格测试代码的每个单元，最终确保项目正确运行。<br>好处是：</p><ol><li>Unit test 保证良好的代码结构（每个 method “只打一份工”），帮助我们较好地解析任务，</li><li>允许我们考虑每个方法的所有边界情况，并单独测试它们。</li><li>让我们每次只专注于一个单元，进行测试，debug，对准确度有信心后，再进行下一个单元的开发。相比于一次性写完所有代码，再测试debug，Unit test 减少了 debugging 时间。<a id="more"></a>坏处是：</li><li>测试也要花时间</li><li>测试本身也是有可能出错的，测试可能不全面，不规范，或者有bug</li><li>有些单元是依赖于其他单元的</li><li>Unit testing 无法保证各个模块的交互，无法保证整个系统作为一个整体是否正常工作。</li></ol><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><p>JUnit是一个给Java做测试的框架，由Erich Gamma（Design Patterns）和Kent Beck（eXtreme Programming）编写。<br>JUnit使用Java的 reflection 功能（Java程序可以检查自己的代码）和注释。<br>JUnit允许我们：</p><ul><li>定义并执行测试和测试套件</li><li>使用测试作为规范的有效手段</li><li>使用测试来支持重构</li><li>将修改的代码集成到构建中<br>JUnit可用于多个IDE，例如BlueJ，JBuilder和Eclipse在一定程度上具有JUnit集成。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(&lt;expected&gt;, &lt;actual&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assertEquals</code>测试一个变量的实际值是否等于它的期望值。<br>JUnit test 各个测试方法，必须是非静态的（JUnit的设计人员设计规定的）。</p><p>JUnit的术语</p><ul><li>Test runner：测试运行器， 运行测试和报告结果的软件。实现方式：集成到IDE中，独立GUI，命令行等</li><li>Test suite：测试套件是一组测试用例。</li><li>Test case：测试用例用于测试单个方法对特定输入集的响应。</li><li>Unit test：单元测试的单元，是代码中我们能够相对合理地测试的最小的元素，通常是单个类。</li></ul><p>常用的JUnit接口和方法<br><code>@Before</code>: Creates a test fixture by creating and initialising objects and values.</p><p><code>@After</code>: Releases any system resources used by the test fixture. Java usually does this for free, but files, network connections etc. might not get tidied up automatically.</p><p><code>@Test</code>：tests cases.</p><p><code>static void assertTrue(boolean test)</code>, <code>static void assertTrue(String message, boolean test)</code>, <code>static void assertFalse(boolean test)</code>, <code>static void assertFalse(String message, boolean test)</code></p><h3 id="Integration-Testing"><a href="#Integration-Testing" class="headerlink" title="Integration Testing"></a>Integration Testing</h3><p>鉴于 Unit testing 无法保证，有交互的多个模块，作为一个整体是否正常工作。<br>我们可能需要 integration testing，把各个模块合并，作为一个组合，进行测试（也可以把 Unit test 组合起来变成 integration testing）。</p><p>Integration testing 一般都比较麻烦，也不容易自动化，而且一般是在比较高的抽象层进行测试，可能会漏掉微小的错误。</p><p>当把所有模块都作为一个整体，也就是整个系统作为测试对象时，就是 system testing。</p><h3 id="Test-driven-development"><a href="#Test-driven-development" class="headerlink" title="Test driven development"></a>Test driven development</h3><p>TDD开发步骤：</p><ol><li>明确一项新功能需求。</li><li>为该功能编写 Unit test。</li><li>运行测试，<font color="red">按理应该无法通过测试</font>（因为还没写功能程序）。</li><li>编写通过实现该功能的代码，<font color="green">通过测试</font>。</li><li>可选：重构代码，使其更快，更整洁等等。</li></ol><p><img src="http://www.pathfindersolns.com/wp-content/uploads/2012/05/red-green-refactorFINAL2.png" alt="source from http://ryantablada.com/post/red-green-refactor---a-tdd-fairytale " title="image from: http://ryantablada.com/post/red-green-refactor---a-tdd-fairytale"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;如何知道自己的程序是否真的在工作？在现实世界中，程序员相信他们的代码，因为代码通过了他们自己编写的测试。常用的测试有 Ad Hoc Testing， Unit test 和 Integration Testing。&lt;/p&gt;
&lt;p&gt;Ad Hoc Testing，是指没有计划和记录的软件测试，除非发现缺陷，不然一般只运行一次。&lt;/p&gt;
&lt;h3 id=&quot;Unit-test&quot;&gt;&lt;a href=&quot;#Unit-test&quot; class=&quot;headerlink&quot; title=&quot;Unit test&quot;&gt;&lt;/a&gt;Unit test&lt;/h3&gt;&lt;p&gt;程序可分解为单元（或程序中可测试的最小部分），它严格测试代码的每个单元，最终确保项目正确运行。&lt;br&gt;好处是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unit test 保证良好的代码结构（每个 method “只打一份工”），帮助我们较好地解析任务，&lt;/li&gt;
&lt;li&gt;允许我们考虑每个方法的所有边界情况，并单独测试它们。&lt;/li&gt;
&lt;li&gt;让我们每次只专注于一个单元，进行测试，debug，对准确度有信心后，再进行下一个单元的开发。相比于一次性写完所有代码，再测试debug，Unit test 减少了 debugging 时间。
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>从程序员的视角理解计算机系统 - csapp - CMU 15213</title>
    <link href="http://yoursite.com/csapp/"/>
    <id>http://yoursite.com/csapp/</id>
    <published>2018-01-29T00:00:00.000Z</published>
    <updated>2018-05-09T16:49:28.930Z</updated>
    
    <content type="html"><![CDATA[<p>本笔记是csapp的学习笔记, 使用 CMU 15-213, UW CSE351 的课程视频, lab, 作业, project 辅助练习.</p><ol><li><a href="http://csapp.cs.cmu.edu/" target="_blank" rel="noopener">Computer Systems: A Programmer’s Perspective (csapp)</a>, 豆瓣-<a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener">深入理解计算机系统</a></li><li><a href="https://www.cs.cmu.edu/~213/" target="_blank" rel="noopener">卡内基梅隆大学 CMU 15-213 Introduction to Computer Systems (ICS)</a></li><li><a href="https://courses.cs.washington.edu/courses/cse351/" target="_blank" rel="noopener">华盛顿大学 UW CSE351: The Hardware/Software Interface</a><a id="more"></a></li></ol><h2 id="Computer-system"><a href="#Computer-system" class="headerlink" title="Computer system"></a>Computer system</h2><h3 id="Information-is-Bits-Context"><a href="#Information-is-Bits-Context" class="headerlink" title="Information is Bits + Context"></a>Information is Bits + Context</h3><p>Study systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The source program is a sequence of bits, each with a value of 0 or 1, organized in 8-bit chunks(bytes). Each byte represents some text character in the program.</p><p>All information in a system — including disk files, programs stored in memory, user data stored in memory, and data transferred across a network—is represented as a bunch of bits.</p><h3 id="Programs-are-traslated-by-other-programs-into-different-forms"><a href="#Programs-are-traslated-by-other-programs-into-different-forms" class="headerlink" title="Programs are traslated by other programs into different forms"></a>Programs are traslated by other programs into different forms</h3><p>The hello program begins as a high-level C program because it can be read and understood by human beings in that form. However, in order to run hello.c on the system, the individual C statements must be translated by other programs into a sequence of low-level machine-language instructions.</p><p>These instructions are then packaged in a form called an executable object program and stored as a binary <strong>disk</strong> file. Object programs are also referred to as executable object files.</p><p>The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known collectively as the compilation system.</p><ul><li>Preprocessing phase.The preprocessor (cpp) modifies the original C program according to directives that begin with the # character.</li><li>Compilation phase. The compiler (cc1) translates the text file hello.i into the text file hello.s, which contains an assembly-language program. Assembly language is useful because it provides a common output language for different compilers for different high-level languages.</li><li>Assembly phase. Next, the assembler (as) translates hello.s into machinelanguage instructions, packages them in a form known as a relocatable object program, and stores the result in the object file hello.o.<ul><li>The hello.o file is a binary file whose bytes encode machine language instructions rather than characters.</li></ul></li><li>Linking phase. The printf function resides in a separate precompiled object file called printf.o, which must somehow be merged with our hello.o program. The linker (ld) handles this merging.</li></ul><h3 id="Processors-read-and-interpret-instructions-stored-in-memory"><a href="#Processors-read-and-interpret-instructions-stored-in-memory" class="headerlink" title="Processors read and interpret instructions stored in memory"></a>Processors read and interpret instructions stored in memory</h3><p>The hello.c source program has been translated by the compilation system into an executable object file called hello that is stored on disk, to run the executable file on Unix:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unix&gt; ./hello</span><br><span class="line">hello, world</span><br><span class="line">unix&gt;</span><br></pre></td></tr></table></figure></p><p>The shell is a command-line interpreter that prints a prompt, waits for you to type a command line, and then performs the command.</p><h3 id="Hardware-organization-of-a-systems"><a href="#Hardware-organization-of-a-systems" class="headerlink" title="Hardware organization of a systems"></a>Hardware organization of a systems</h3><p>Hardware organization of a typical system.</p><h4 id="Buses"><a href="#Buses" class="headerlink" title="Buses"></a>Buses</h4><p>Electrical conduits that carry bytes of information back and forth between the components. Buses are typically designed to transfer fixed-sized chunks of bytes known as words. USB: Universal Serial bus.</p><h4 id="Input-output-I-O-devices"><a href="#Input-output-I-O-devices" class="headerlink" title="Input/output (I/O) devices"></a>Input/output (I/O) devices</h4><p>The system’s connection to the external world. Each I/O deviceisconnected to the I/O bus by either a controller or an adapter：</p><ul><li>Controllers are chip sets in the device itself or on the system’s main printed circuit board (often called the motherboard).</li><li>An adapter is a card that plugs into a slot on the motherboard.</li></ul><h4 id="Main-Memory"><a href="#Main-Memory" class="headerlink" title="Main Memory"></a>Main Memory</h4><p>A temporary storage device that holds both a program and the data it manipulates while the processor is executing the program.</p><ul><li>Physically, main memory consists of a collection of dynamic random access memory (DRAM) chips.</li><li>Logically, memory is organized as a linear array of bytes, each with its own unique address (array index) starting at zero<br>*<h4 id="Processor-Central-Processing-Unit-CPU"><a href="#Processor-Central-Processing-Unit-CPU" class="headerlink" title="Processor: Central Processing Unit (CPU)"></a>Processor: Central Processing Unit (CPU)</h4></li><li>PC: Program counter, a word-sized storage device (or register) at CPU core. At any point in time, the PC points at (contains the address of) some machine-language instruction in main memory.</li><li>Register: a quickly accessible location available to CPU,</li><li>Register file: an array of registers, each with its own unique name.</li><li>Arithmetic/logic unit: ALU computes new data and address values.</li></ul><p>A processor repeatedly executes the instruction pointed at by the program counter and updates the program counter to point to the next instruction. The processor reads the instruction from memory pointed at by the PC, interprets the bits in the instruction, performs some simple operation dictated by the instruction, and then updates the PC to point to the next instruction.</p><h4 id="CPU-operations-examples"><a href="#CPU-operations-examples" class="headerlink" title="CPU operations examples"></a>CPU operations examples</h4><p>Load: Copy a byte or a word from main memory into a register, overwriting the previous contents of the register.</p><p>Store(write): Copy a byte or a word from a register to a location in main memory, overwriting the previous contents of that location.</p><p>Operate: Copy the contents of two registers to the ALU, perform an arithmetic operation on the two words, and store the result in a register, overwriting the previous contents of that register.</p><p>Jump: Extract a word from the instruction itself and copy that word into the program counter (PC), overwriting the previous value of the PC.</p><p>Branch greater than (BGT): compares two registers and decides whether to branch (target would be the address to branch to), i.e. it is implementing the “if” decision.</p><h3 id="Running-a-programs"><a href="#Running-a-programs" class="headerlink" title="Running a programs"></a>Running a programs</h3><ol><li>Initially, the shell program is waiting for user types a command. As we type the characters “./hello” at the keyboard, the shell program reads each one into a register, and then stores it in memory.</li><li>When we hit the <em>enter</em> key on the keyboard, the shell knows that we have finished typing the command. The shell then loads the executable hello file by executing a sequence of instructions that copies the code and data in the hello object file <strong>from disk to main memory</strong>. The data include the string of characters “hello, world\n” that will eventually be printed out. Using a technique known as direct memory access (DMA), the data travels directly from disk to main memory, without passing through the processor.</li><li>Once the code and data in the hello object file are loaded into memory, the processor begins executing the machine-language instructions in the hello program’s main routine. These instructions copy the bytes in the <code>hello, world\n</code> string from memory to the register file, and from there to the display device, where they are displayed on the screen.</li></ol><h3 id="Caches"><a href="#Caches" class="headerlink" title="Caches"></a>Caches</h3><p>An important lesson from this simple example is that a system spends a lot of time moving information from one place to another. From a programmer’s perspective, much<br>of this copying is overhead that slows down the “real work” of the program. Because of physical laws, larger storage devices are slower than smaller storage devices. Speed that processor read from: register &gt; memory &gt; disk.</p><p>It is easier and cheaper to make processors run faster than it is to make main memory run faster. To deal with the processor-memory gap, system designers include smaller<br>faster storage devices called cache memories (or simply caches) that serve as temporary staging areas for information that the processor is likely to need in the near future.</p><p>The L1 and L2 caches are implemented with a hardware technology known as static random access memory (SRAM). Newer and more powerful systems even have three levels of cache: L1, L2, and L3.</p><p>By setting up caches to hold data that is likely to be accessed often, we can perform most memory operations using the fast caches.</p><h3 id="Storage-Devices-Form-a-Hierarchy"><a href="#Storage-Devices-Form-a-Hierarchy" class="headerlink" title="Storage Devices Form a Hierarchy"></a>Storage Devices Form a Hierarchy</h3><p><img src="/images/memory_hierarchy.png" alt="" title="source from:http://csapp.cs.cmu.edu/"></p><h3 id="Operating-system"><a href="#Operating-system" class="headerlink" title="Operating system"></a>Operating system</h3><p>The operating system has two primary purposes: (1) to protect the hardware from misuse by runaway applications, and (2) to provide applications with simple and uniform mechanisms for manipulating complicated and often wildly different low-level hardware devices.</p><p>Think of the operating system as a layer of software interposed between the application program and the hardware, with fundamental abstractions: processes, virtual memory, and files.<br><img src="/images/operating_system_abs.png" alt="" title="Abstractions provided by an operating system. Source from:http://csapp.cs.cmu.edu/"></p><h4 id="Process-进程"><a href="#Process-进程" class="headerlink" title="Process 进程"></a>Process 进程</h4><p>A process is the operating system’s abstraction for a running program. Multiple processes can run concurrently on the same system by having the processor switch (<strong>context switching</strong>) among them, and each process appears to have exclusive use of the hardware.</p><p>The os keeps track of all the state information that the process needs in order to run. This state, i.e. the context, includes information such as the current values of the PC, the register file, and the contents of main memory.</p><p>When the operating system decides to transfer control from the current process to some new process, it performs a context switch by saving the context of the current process, restoring the context of the new process, and then passing control to the new process. The new process picks up exactly where it left off. <img src="/images/Process_context.png" alt="" title="Process context switching. Source from:http://csapp.cs.cmu.edu/"></p><h4 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h4><p>Virtual memory is an abstraction that provides each process with the illusion that it has exclusive use of the main memory. Each process has the same uniform view of memory, which is known as its virtual address space.</p><p>In Linux, the topmost region of the address space is reserved for code and data in the operating system that is common to all processes. The lower region of the address space holds the code and data defined by the user’s process.<br><img src="/images/Process_virtual_address.png" alt="" title="Process virtual address space. Source from:http://csapp.cs.cmu.edu/"><br>Starting with the lowest addresses and working our way up:</p><ol><li>Program code and data: Fixed in size once the process begins running. The code and data areas are initialized directly from the contents of an executable object file, in our case the hello executable.</li><li>Run-time heap: expands and contracts dynamically at run time as a result of calls to C standard library routines such as <code>malloc</code> and <code>free</code>.</li><li>Shared libraries: holds the code and data for shared libraries such as the C standard library and the math library.</li><li>User stack: the compiler uses to implement function calls. Each time we call a function, the stack grows. Each time we return from a function, it contracts.</li><li>Kernel virtual memory: The kernel is the part of the operating system that is always resident in memory. Application programs are not allowed to read or write the contents of the top region of the address space (which is reserved for the kernel) or to directly call functions defined in the kernel code.</li></ol><h4 id="Thread-线程"><a href="#Thread-线程" class="headerlink" title="Thread 线程"></a>Thread 线程</h4><p>In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically a part of the operating system.</p><p>In most cases a thread is a component of a process. Multiple threads can exist within one process, executing concurrently and sharing resources such as memory, while different processes do not share these resources.</p><p>Threads are an increasingly important programming model because of the requirement for concurrency in network servers, because it is easier to share data between multiple threads than between multiple processes, and because threads are typically more efficient than processes.</p><h2 id="Concurrency-and-Parallelism"><a href="#Concurrency-and-Parallelism" class="headerlink" title="Concurrency and Parallelism"></a>Concurrency and Parallelism</h2><p>Concurrency: general concept of a system with multiple, simultaneous activities.<br>Parallelism: the use of concurrency to make a system run faster.</p><p>Parallelism could be achieved in different levels of abstraction in computer system. There are three common levels (from the highest to the lowest level in the system hierarchy):</p><h3 id="Thread-Level-Concurrency"><a href="#Thread-Level-Concurrency" class="headerlink" title="Thread-Level Concurrency"></a>Thread-Level Concurrency</h3><p>With threads, we can even have multiple control flows executing within a single process.</p><p>When we construct a system consisting of multiple processors all under the control of a single operating system kernel, we have a multiprocessor system</p><h4 id="Multi-core-processors"><a href="#Multi-core-processors" class="headerlink" title="Multi-core processors"></a>Multi-core processors</h4><p>Several CPUs (referred to as “cores”) integrated onto a single integrated-circuit chip</p><h4 id="Hyperthreading"><a href="#Hyperthreading" class="headerlink" title="Hyperthreading"></a>Hyperthreading</h4><p>Sometimes called simultaneous multi-threading, is a technique that allows a single CPU to execute multiple flows of control.</p><h3 id="instruction-level-parallelism"><a href="#instruction-level-parallelism" class="headerlink" title="instruction-level parallelism"></a>instruction-level parallelism</h3><p>At a much lower level of abstraction, modern processors can execute multiple instructions at one time.</p><h3 id="Single-Instruction-Multiple-Data-SIMD-Parallelism"><a href="#Single-Instruction-Multiple-Data-SIMD-Parallelism" class="headerlink" title="Single-Instruction, Multiple-Data (SIMD) Parallelism"></a>Single-Instruction, Multiple-Data (SIMD) Parallelism</h3><p>At the lowest level, special hardware that allows a single instruction to cause multiple operations to be performed in parallel.</p><h2 id="Memory-Data-amp-Addressing"><a href="#Memory-Data-amp-Addressing" class="headerlink" title="Memory, Data, &amp; Addressing"></a>Memory, Data, &amp; Addressing</h2><p>十进制，2进制，16进制:</p><ul><li>A single byte consists of 8 bits.</li><li>二进制 value ranges from 00000000<sub>2</sub> to 11111111<sub>2</sub>,</li><li>十进制 value ranges from 0<sub>10</sub> to 255<sub>10</sub></li><li>二进制表示法过于冗长，而使用十进制表示法，与bits进行模式转换非常繁琐。</li><li>十六进制，hexadecimal numbers: Hexadecimal (or simply “hex”) uses digits ‘0’ through ‘9’ along with characters ‘A’ through ‘F’ to represent 16 possible values. Values range from 00<sub>16</sub> to FF<sub>16</sub>.</li></ul><p>内存：</p><ul><li>A machine-level program views memory as a very large array of bytes, referred to as virtual memory.</li><li>Every byte of memory is identified by a unique number, known as its address.</li><li>The set of all possible addresses is known as the virtual address space - 进程可用的虚拟地址范围称为该进程的“虚拟地址空间”。</li></ul><p>这个虚拟地址空间只是一个呈现给机器级程序的虚拟概念。实际的实现需要用到随机访问存储器（RAM），磁盘存储，特殊的硬件和操作系统软件的组合来构建相对于程序而言的单片字节数组。</p><h3 id="Address-and-Pointers"><a href="#Address-and-Pointers" class="headerlink" title="Address and Pointers"></a>Address and Pointers</h3><p>地址是内存的位置，指针是一种包含地址的数据对象。</p><p>Byte ordering: Endianness</p><ul><li><strong>little endian</strong> - where the least significant byte comes first, followed by most Intel-compatible machines.</li><li><strong>big endian</strong> - where the most significant byte comes first, followed by most machines from IBM and Sun Microsystems</li><li>Many recent microprocessors are bi-endian, meaning that they can be configured to operate as either little- or big-endian machines.</li></ul><h3 id="Integer-and-floating-point-numbers"><a href="#Integer-and-floating-point-numbers" class="headerlink" title="Integer and floating point numbers"></a>Integer and floating point numbers</h3><p>把多个bits组合起来，通过解码，可以表达有限集合内的所有元素。比如二进制数字系统可以表示正整数。</p><p>Three most important representations of numbers.</p><ol><li>Unsigned encodings：based on traditional binary notation, representing numbers greater than or equal to 0.</li><li>Two’s-complement encodings: the most common way to represent signed integers, that is, numbers that may be either positive or negative.</li><li>Floating-point encodings: base-two version of scientific notation for<br>representing real numbers.</li></ol><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li><p>Naming data types with <code>typedef</code>: C的<code>typedef</code>声明用于给数据类型命名。这对提高代码可读性有很大的帮助，因为深层嵌套类型声明可能难以解读。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> *int_pointer;</span><br><span class="line">int_pointer ip;</span><br></pre></td></tr></table></figure><p>  等同于<code>int *ip;</code></p></li><li>Formatted printing with <code>printf</code>(<code>fprintf</code> and <code>sprintf</code>): provides a way to print information<br>with considerable control over the formatting details.<ul><li>The first argument is a format string. Each character sequence starting with ‘%’ indicates how to format the next argument. <code>%d</code> - 输出十进制整数, <code>%f</code> - 浮点数, <code>%c</code> - 字符</li><li>while any remaining arguments are values to be printed.</li></ul></li><li><code>sizeof(T)</code> returns the number of bytes required to store an object of type T</li></ul><h3 id="Addresses-and-pointer-in-C"><a href="#Addresses-and-pointer-in-C" class="headerlink" title="Addresses and pointer in C"></a>Addresses and pointer in C</h3><p>指针是C的核心功能，可以引用数据结构元素（包括数组）。就像变量一样，指针有两个组成部分：值和类型。该值指示某个对象的位置，而其类型指示该位置处存储什么类型的对象（例如，整数或浮点数）。</p><ul><li><code>&amp;</code> - “address of”, return a pointer;</li><li>Variable declarations： <code>int x</code>, find location in memory in which to store integer.</li><li>Pointer declarations use <code>*</code>: <code>int *pointer</code>, declares a variable <code>pointer</code> that is a pointer pointing to an object of type integer.</li><li>Assignment to a pointer: <code>pointer = &amp;x</code>, assigns <code>pointer</code> to point to the address where <code>x</code> is stored.</li><li>To use the value pointed to by a pointer, use <code>*</code>:<ul><li>if <code>pointer = &amp;x</code>, then <code>x = *pointer +1</code> is the same as <code>x = x + 1</code></li><li>假如x是一个对象, 那么<code>*(&amp;x)</code>=<code>*&amp;x</code> = <code>x</code></li></ul></li></ul><h3 id="Pointers-and-arrays"><a href="#Pointers-and-arrays" class="headerlink" title="Pointers and arrays"></a>Pointers and arrays</h3><p>C通过数组将标量数据聚合为更大的数据类型。In C, we can dereference a pointer with array notation, and we can reference array elements with pointer notation.<br>C有一个不常见的特性, 就是我们可以生成指向数组内的元素的指针，并使用这些指针来执行算术运算。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T A[N];</span><br></pre></td></tr></table></figure></p><p>首先，它在内存中分配一个L*N大小的连续区域, 其中L是数据类型T的大小（以bytes为单位）. 数组的元素可以使用 0 ~ N-1 之间的整数索引来访问 <code>A[i]</code>;</p><p>其次，它引入了一个标识符A，可以作为指向数组开头的指针;</p><p>在指针上进行算术运算时，其实际的索引值会根据指针引用的数据类型的大小进行缩放,  即假设A的值是xa, 那么<code>A+i</code>的值就是<code>xa + L * i</code>, <code>A[i]</code> = <code>*(A+i)</code>;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本笔记是csapp的学习笔记, 使用 CMU 15-213, UW CSE351 的课程视频, lab, 作业, project 辅助练习.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Computer Systems: A Programmer’s Perspective (csapp)&lt;/a&gt;, 豆瓣-&lt;a href=&quot;https://book.douban.com/subject/26912767/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解计算机系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~213/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;卡内基梅隆大学 CMU 15-213 Introduction to Computer Systems (ICS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://courses.cs.washington.edu/courses/cse351/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;华盛顿大学 UW CSE351: The Hardware/Software Interface&lt;/a&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="计算机入门" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%A5%E9%97%A8/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="csapp" scheme="http://yoursite.com/tags/csapp/"/>
    
      <category term="C 语言" scheme="http://yoursite.com/tags/C-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 10 LinkedList 还是 ArrayList - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-10-java-which-list/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-10-java-which-list/</id>
    <published>2018-01-28T00:00:00.000Z</published>
    <updated>2018-03-20T22:39:47.241Z</updated>
    
    <content type="html"><![CDATA[<p>Java 提供了 <code>ArrayList</code>, <code>ArrayDeque</code> 和 <code>LinkedList</code> 几个API.<br>队列 queue, 通俗的含义, 就是不能插队, 只能在末尾插入.<br>Deque 就是双端队列 Double Ended Queue。双端队列是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩<a href="http://www.cplusplus.com/reference/deque/deque/" target="_blank" rel="noopener">（定义来源 cplusplus.com）</a>.</p><p>CS61b的<a href="http://sp18.datastructur.es/materials/proj/proj1a/proj1a" target="_blank" rel="noopener">project 1a</a>就是实现两种双端队列（array based 和 linkedklist based）.</p><p>不同的API, 在考虑什么时候应该用哪个时, 我们需要考虑它们的性能差异:</p><ul><li>搜索/定位：与<code>LinkedList</code>搜索操作相比，<code>ArrayList</code>搜索操作更快。 <code>ArrayList</code>的<code>get(int index)</code>性能是<code>O(1)</code>的，而LinkedList的性能是<code>O(n)</code>。因为<code>ArrayList</code>基于<code>array</code>数据结构，可以直接用靠 array index 索引元素。</li><li>删除/插入：<code>LinkedList</code> 操作性能是<code>O(1)</code>，而<code>ArrayList</code>的性能从<code>O(n)</code>（删除/插入第一个元素）到<code>O(n)</code>（最后一个元素）都有可能。因为<code>LinkedList</code>的每个元素都包含两个指向其相邻前后元素的指针（地址），因此仅需要改变，被删节点的<code>prev</code>和<code>next</code>指针位置。而在<code>ArrayList</code>中，需要移动剩余元素，来重新填充<code>array</code>空间。</li><li>内存开销：<code>LinkedList</code>的每个元素都有更多的内存开销(额外的指针), 而<code>ArrayLists</code>没有这个开销。但是，<code>ArrayLists</code>需要占用初始容量。一般<code>ArrayList</code>的默认初始容量非常小（Java 1.4 - 1.8使用10）。但是，往<code>ArrayLists</code>添加元素时， 它可能会适当地增大容量，所以如果添加了很多元素，则必须不断调整数组的大小，那样也可能会导致元素频繁挪动位置。</li></ul><p>综上所述：</p><ol><li>如果在应用中需要频繁插入和删除，那么选择<code>LinkedList</code>。</li><li>假如一开始，就知道后面要添加大量元素，那就使用较高的初始容量来构造<code>ArrayList</code>。</li><li>大部分用例中, 相比LinkedList, 人们更偏爱ArrayList以及ArrayDeque。如果你不确定应该选哪个, 那么就直接考虑ArrayList吧(<a href="https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist" target="_blank" rel="noopener">参考</a>).</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 提供了 &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;ArrayDeque&lt;/code&gt; 和 &lt;code&gt;LinkedList&lt;/code&gt; 几个API.&lt;br&gt;队列 queue, 通俗的含义, 就是不能插队, 只能在末尾插入.&lt;br&gt;Deque 就
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>抽象编程 - C++ 算法与数据结构 Stanford cs106b</title>
    <link href="http://yoursite.com/NOTE-CS106B-Programming-Abstractions-Stanford/"/>
    <id>http://yoursite.com/NOTE-CS106B-Programming-Abstractions-Stanford/</id>
    <published>2018-01-23T00:00:00.000Z</published>
    <updated>2018-05-08T09:46:10.243Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://see.stanford.edu/Course/CS106B" target="_blank" rel="noopener">Stanford CS106B Programming Abstractions</a> 和 <a href="https://see.stanford.edu/Course/CS106A" target="_blank" rel="noopener">CS106A</a> 的学习笔记. 我的课程作业(cs106b spring 2017)实现代码见 <a href="https://github.com/ShootingSpace/cs106b-programming-abstraction" target="_blank" rel="noopener">https://github.com/ShootingSpace/cs106b-programming-abstraction</a></p><h3 id="Topics"><a href="#Topics" class="headerlink" title="Topics:"></a>Topics:</h3><p>Recursion, algorithms analysis (sort/search/hash), dynamic data structures (lists, trees, heaps), data abstraction (stacks, queues, maps), implementation strategies/tradeoffs<br><a id="more"></a></p><h3 id="Purposes"><a href="#Purposes" class="headerlink" title="Purposes:"></a>Purposes:</h3><ol><li>become acquainted with the C++ programming language</li><li>learn more advanced programming techniques</li><li>explore classic data structures and algorithms</li><li>and apply these tools to solving complex problems<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3></li><li>Text Book: <a href="https://www.pearson.com/us/higher-education/program/Weiss-Data-Structures-and-Algorithm-Analysis-in-C-4th-Edition/PGM148299.html" target="_blank" rel="noopener">Data Structures &amp; Algorithm Analysis in C++, 4th ed, by Mark A. Weiss</a></li><li>Text Book: <a href="https://www.pearson.com/us/higher-education/program/Roberts-Programming-Abstractions-in-C/PGM80147.html" target="_blank" rel="noopener">Programming Abstractions in C++ 1st Edition by Eric Roberts</a></li><li>Text Book: <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithms, 4th Edition</a></li><li>Blog: <a href="http://www.redblobgames.com/pathfinding/a-star/introduction.html" target="_blank" rel="noopener">Red Blob Games</a>, <a href="http://theory.stanford.edu/~amitp/GameProgramming/" target="_blank" rel="noopener">Amit’s A* Pages</a><!-- more --></li></ol><hr><h3 id="Coding-style"><a href="#Coding-style" class="headerlink" title="Coding style"></a>Coding style</h3><ul><li>Works correctly in all situations: Using a listing of specific test cases to exercise the program on.</li><li>The overall approach is straight-forward, data structure is cleanly organized, tasks are nicely decomposed, algorithms are clear and easy to follow, comments are helpful, layout is consistent.<h4 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h4>Examples of information you might include in comments:</li><li>General overview. What are the goals and requirements of this program? this function? The overview comment should also contain author and version information: who worked on this file and when.</li><li>Data structures. How is the data stored? How is it ordered, searched, accessed?</li><li>Design decisions. Why was a particular data structure or algorithm chosen? What other strategies were tried and rejected?</li><li>Error handling. How are error conditions handled? What assumptions are made? What happens if those assumptions are violated?</li><li>Nitty-gritty code details. Comments are invaluable for explaining the inner workings of particularly complicated (often labeled “clever”) paths of the code.</li><li>Planning for the future. How might one make modifications or extensions later?</li><li>And more… (This list is by no means exhaustive)</li></ul><h3 id="ADT"><a href="#ADT" class="headerlink" title="ADT"></a>ADT</h3><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>An abstract data type is a set of objects together with a set of operations. Abstract data types are mathematical abstractions; nowhere in an ADT’s definition is there any mention of how the set of operations is implemented.<br>Objects such as lists, sets, and graphs, along with their operations, can be viewed as ADTs.<br>Also there are search <a href="#tree">tree</a>, set, <a href="#hashing">hash table</a>, <a href="#priority-queues">priority queue</a>.</p><ul><li>Client uses class as abstraction<ul><li>Invokes public operations only</li><li>Internal implementation not relevant!</li></ul></li><li>Client can’t and shouldn’t muck with internals<ul><li>Class data should private</li></ul></li><li>Imagine a “wall” between client and implementor<ul><li>Wall prevents either from getting involved in other’s business</li><li>Interface is the “chink” in the wall</li><li>Conduit allows controlled access between the two</li></ul></li><li>Consider Lexicon<ul><li>Abstraction is a word list, operations to verify word/prefix</li><li>How does it store list? using array? vector? set? does it matter to client?</li></ul></li></ul><h4 id="Why-ADTs"><a href="#Why-ADTs" class="headerlink" title="Why ADTs?"></a>Why ADTs?</h4><ul><li>Abstraction: Client insulated from details, works at higher-level</li><li>Encapsulation: Internals private to ADT, not accessible by client</li><li>Independence: Separate tasks for each side (once agreed on interface)</li><li>Flexibility: ADT implementation can be changed without affecting client</li></ul><h4 id="Vector-and-list-in-the-STL"><a href="#Vector-and-list-in-the-STL" class="headerlink" title="Vector and list in the STL"></a>Vector and list in the STL</h4><p>The C++ language includes, in its library, an implementation of common data structures.<br>This part of the language is popularly known as the Standard Template Library (STL). In general, these data structures are called collections or containers.</p><h4 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h4><p>In the STL, a position is represented by a nested type, iterator.</p><ul><li>Getting an Iterator<ul><li><code>iterator begin( )</code> returns an appropriate iterator representing the first item in the<br>container.</li><li><code>iterator end( )</code> returns an appropriate iterator representing the endmarker in the<br>container (i.e., the position after the last item in the container).</li></ul></li><li>Iterator Methods<ul><li><code>itr++</code> and <code>++itr</code> advances the iterator itr to the next location. Both the prefix and postfix forms are allowable.</li><li><code>itr</code> returns a reference to the object stored at iterator itr’s location. The reference returned may or may not be modifiable (we discuss these details shortly).</li><li><code>itr1==itr2</code> returns true if iterators itr1 and itr2 refer to the same location and false otherwise.</li><li><code>itr1!=itr2</code> returns true if iterators itr1 and itr2 refer to a different location and false otherwise.</li></ul></li><li>Container Operations that require Iterators<br>The three most popular methods that require iterators are those that add or remove from the list (either a vector or list) at a specified position:<ul><li>iterator insert( iterator pos, const Object &amp; x ): adds x into the list, prior to the<br>position given by the iterator pos. This is a constant-time operation for list, but not for<br>vector. The return value is an iterator representing the position of the inserted item.</li><li>iterator erase( iterator pos ): removes the object at the position given by the iterator. This is a constant-time operation for list, but not for vector. The return value is the position of the element that followed pos prior to the call. This operation invalidates pos, which is now stale, since the container item it was viewing has been removed.</li><li>iterator erase( iterator start, iterator end ): removes all items beginning at position start, up to, but not including end. Observe that the entire list can be erased by the call c.erase( c.begin( ), c.end( ) )</li></ul></li><li><p>Range for loop<br>C++11 also allows the use of the reserved word auto to signify that the compiler will automatically infer the appropriate type,</p><ul><li><p>for simple data type:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">auto</span> x : squares )</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; x;</span><br></pre></td></tr></table></figure></li><li><p>for complicate data type like map: Each element of the container is a <code>map&lt;K, V&gt;::value_type</code>, which is a typedef for <code>std::pair&lt;const K, V&gt;</code>. Consequently, you’d write this as</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; kv : myMap) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; kv.first &lt;&lt; <span class="string">" has value "</span> &lt;&lt; kv.second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><h4 id="Helper-Function"><a href="#Helper-Function" class="headerlink" title="Helper Function"></a>Helper Function</h4><ul><li>No clear definition of helper function</li><li>How to utilize helper function to help constructing recursion algarithm: construct a same-name recursive function  with extra parameters to pass in.</li><li>In some other cases, decomposition with several step into a function is itself a helper function, which help to make the main function simple and clean.</li></ul><h4 id="Exhaustive-recursion"><a href="#Exhaustive-recursion" class="headerlink" title="Exhaustive recursion"></a>Exhaustive recursion</h4><p>Permutations/subsets are about choice</p><ul><li>Both have deep/wide tree of recursive calls</li><li>Depth represents total number of decisions made</li><li>Width of branching represents number of available options per decision</li><li>Explores every possible option at every decision point, typically very expensive, N! permutations, 2N subsets</li></ul><h4 id="Recursive-Backtracking"><a href="#Recursive-Backtracking" class="headerlink" title="Recursive Backtracking"></a>Recursive Backtracking</h4><p>Partial exploration of exhaustive space. In the case that if we are interested in finding any solution, whichever one that works out first is fine. If we eventually reach our goal from here, we have no need to consider the paths not taken. However, if this choice didn’t work out and eventually leads to nothing but dead ends; when we backtrack to this decision point, we try one of the other alternatives.</p><ul><li>The back track based on the stacks of recursion, if a stack return false (or fail result), we back to previous stack and try another way(un-making choice).</li><li>Need something return(normally bool) to step out of the entire recursion once any one solution found.</li><li>One great tip for writing a backtracking function is to abstract away the details of managing the configuration (what choices are available, making a choice, checking for success, etc.) into other helper functions so that the body of the recursion itself is as clean as can be. This helps to make sure you have the heart of the algorithm correct and allows the other pieces to be developed, test, and debugged independently.</li></ul><h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><h4 id="lvalue"><a href="#lvalue" class="headerlink" title="lvalue"></a>lvalue</h4><p>In C++, any expression that refers to an internal memory location capable of storing data is called an lvalue (pronounced “ell-value”).<br><code>x = 1.0;</code></p><h4 id="Declaring-pointer-variables"><a href="#Declaring-pointer-variables" class="headerlink" title="Declaring pointer variables"></a>Declaring pointer variables</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     --------------------------------------------------</span><br><span class="line">     <span class="comment">// Declaration, in the stack</span></span><br><span class="line">     <span class="comment">// Not yet initialized!</span></span><br><span class="line">     <span class="keyword">int</span> num;</span><br><span class="line">     <span class="keyword">int</span> *p, *q;</span><br><span class="line">     <span class="comment">// If cout &lt;&lt; num &lt;&lt; p &lt;&lt; q &lt;&lt; endl;</span></span><br><span class="line">     <span class="comment">// There will be junk number, junk address.</span></span><br><span class="line">     <span class="comment">// If now *p=10, it may blow up, because what *p point to is an address points to somewhere around that could be invalid.</span></span><br><span class="line">     ---------------------------------------------------</span><br><span class="line">     <span class="comment">// new operator allocate memory from the heap, returns address</span></span><br><span class="line">     p = <span class="keyword">new</span> <span class="keyword">int</span>;     <span class="comment">// P -----&gt; [ int ] （heep 1000）</span></span><br><span class="line">     *p = <span class="number">10</span>;           <span class="comment">// P -----&gt; [ 10 ] （heep 1000）</span></span><br><span class="line">     q = <span class="keyword">new</span> <span class="keyword">int</span>;    <span class="comment">// P -----&gt; [ int ] （heep 1004）</span></span><br><span class="line">     *q = *p;           <span class="comment">// q -----&gt; [ 10 ]  （heep 1004）</span></span><br><span class="line">     q = p;              <span class="comment">// q -----&gt; [ 10 ] （heep 1000）</span></span><br><span class="line">     <span class="comment">// [ 10 ] （heep 1004） became orphan, and could not be reclaim back</span></span><br><span class="line">     ---------------------------------------------------</span><br><span class="line">     <span class="keyword">delete</span> p;          <span class="comment">// [ 10 ] （heep 1000）memory was reclaimed and free,</span></span><br><span class="line">                             <span class="comment">// and available for others as [  ]（heep 1000）,</span></span><br><span class="line">                             <span class="comment">// but p still hold the address</span></span><br><span class="line">     <span class="keyword">delete</span> q;          <span class="comment">// bad idea,  [ 10 ]（heep 1000） already been reclaimed!</span></span><br><span class="line">     q = <span class="literal">NULL</span>;         <span class="comment">// NULL is zero pointer, means the pointer does not hold any address,</span></span><br><span class="line">                              <span class="comment">// used as sentinel value, sometimes better than delete.</span></span><br><span class="line">     <span class="comment">// Accessing "deleted" memory has unpredictable consequences</span></span><br><span class="line">     ---------------------------------------------------</span><br><span class="line"></span><br><span class="line">     <span class="comment">// int *p  declaration reserves only a single word, which is large enough to hold a machine address.</span></span><br><span class="line">     <span class="comment">// ≠</span></span><br><span class="line">     <span class="comment">// int *p = NULL declare pointer p as nullptr</span></span><br><span class="line">     ---------------------------------------------------</span><br><span class="line">     (*newOne).name = name <span class="comment">// "." &gt; "*"</span></span><br><span class="line">     newOne-&gt;name = name</span><br></pre></td></tr></table></figure><h4 id="Use-of-pointer"><a href="#Use-of-pointer" class="headerlink" title="Use of pointer"></a>Use of pointer</h4><p>Big program that contains a certain amout of classes and objects that are share some relationship. Instead of copying data from each other, using pointer to point to specific data is better:</p><ul><li>Saves space by not repeating the same information.</li><li>If some objects gets new information to update, change in one place only!</li></ul><h4 id="Dynamic-allocation"><a href="#Dynamic-allocation" class="headerlink" title="Dynamic allocation"></a>Dynamic allocation</h4><ul><li>Request memory<br>To acquire new memory when you need it and to free it explicitly when it is no longer needed. Acquiring new storage when the program is running. While the program is running, you can reserve part of the unallocated memory, leaving the rest for subsequent allocations.<br>The pool of unallocated memory available to a program is called the <strong>heap</strong>.<br><code>int *p = new int;  //new operator to allocate memory from the heap</code><br>In its simplest form, the new operator takes a type and allocates space for a variable of that type located in the heap.<br>The call to new operator will return the address of a storage location in the heap that has been set aside to hold an integer.</li><li>Free occupied memory<br><code>Delete</code> which takes a pointer previously allocated by new and returns the memory associated with that pointer to the heap.</li></ul><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><h4 id="Tree-terminology"><a href="#Tree-terminology" class="headerlink" title="Tree terminology"></a>Tree terminology</h4><ul><li>Node, tree, subtree, parent, child, root, edge, leaf</li><li>For any node ni, the depth of ni is the length of the unique path from the root to ni. The height of ni is the length of the longest path from ni to a leaf</li><li>Rules for all trees<ul><li>Recursive branching structure</li><li>Single root node</li><li>Every node reachable from root by unique path</li></ul></li></ul><h4 id="Binary-tree"><a href="#Binary-tree" class="headerlink" title="Binary tree"></a>Binary tree</h4><p>Each node has at most 2 children.</p><ul><li>Binary search tree<ul><li>All nodes in left subtree are less than root, all nodes in right subtree are greater.</li><li>Arranged for efficient search/insert.</li><li>It is the basis for the implementation of two library collections classes, set and map.</li><li>Most operations’ average running time is O(log N).</li></ul></li></ul><h4 id="Operating-on-trees"><a href="#Operating-on-trees" class="headerlink" title="Operating on trees"></a>Operating on trees</h4><ul><li>Many tree algorithms are recursive<ul><li>Handle current node, recur on subtrees</li><li>Base case is empty tree (NULL)</li></ul></li><li>Tree traversals to visit all nodes, order of traversal:<ul><li>Pre: cur, left, right</li><li>In: left, cur, right</li><li>Post: left, right, cur</li><li>Others: level-by-level, reverse orders, etc</li></ul></li></ul><h4 id="Balanced-Search-Trees"><a href="#Balanced-Search-Trees" class="headerlink" title="Balanced Search Trees"></a><a href="http://algs4.cs.princeton.edu/33balanced/" target="_blank" rel="noopener">Balanced Search Trees</a></h4><p>Binary search tree have poor worst-case performance.<br>To make costs are guaranteed to be logarithmic, no matter what sequence of keys is used to construct them, the ideal is to keep binary search trees perfectly balanced. Unfortunately, maintaining perfect balance for dynamic insertions is too expensive. So consider data structure that slightly relaxes the perfect balance requirement to provide guaranteed logarithmic performance not just for the insert and search operations, but also for all of the ordered operations (except range search).</p><h5 id="AVL-tree"><a href="#AVL-tree" class="headerlink" title="AVL tree"></a>AVL tree</h5><p>Adelson-Velskii and Landis tree is a binary search tree with a <strong>balance condition</strong>.</p><ul><li>Track balance factor for each node: Height of right subtree - height of left subtree information is kept for each node (in the node structure)</li><li>For every node in the tree, the height of the left and right subtrees can differ by at most 1 (Balance factor = 0 or 1).</li><li>When balance factor hits 2, restructure</li><li><strong>Rotation</strong> moves nodes from heavy to light side<ul><li>Local rearrangement around specific node</li><li>When finished, node has 0 balance factor</li><li>Single rotation: one time rotation between new insert node and its parent node</li><li>Double rotation: two single rotation of the new insert node  </li></ul></li></ul><h5 id="2-3-trees"><a href="#2-3-trees" class="headerlink" title="2-3 trees"></a>2-3 trees</h5><p>Allow the nodes in the tree to hold more than one key: 3-nodes, which hold three links and two keys.</p><ul><li>Definition: A 2-3 search tree is a tree that is either empty or<ul><li>A 2-node, with one key (and associated value) and two links,     a left link to a 2-3 search tree with smaller keys, and a right link to a 2-3 search tree with larger keys</li><li>A 3-node, with two keys (and associated values) and three links, a left link to a 2-3 search tree with smaller keys, a middle link to a 2-3 search tree with keys between the node’s keys, and a right link to a 2-3 search tree with larger keys</li><li>A perfectly balanced 2-3 search tree is one whose null links are all the same distance from the root.</li></ul></li><li>The concept guarantee that search and insert operations in a 2-3 tree with N keys are to visit at most lg N nodes.</li><li>But its dicrect implementation is inconvenient: Not only is there a substantial amount of code involved, but the overhead incurred could make the algorithms slower than standard BST search and insert.</li><li>Consider a simple representation known as a <a href="#red-black-trees">red-black BST</a> that leads to a natural implementation.</li></ul><h3 id="Priority-Queues"><a href="#Priority-Queues" class="headerlink" title="Priority Queues"></a>Priority Queues</h3><p>A priority queue is a data structure that allows at least the following two operations: <strong>insert</strong>, and <strong>deleteMin</strong>, which finds, returns, and removes the minimum element in the priority queue.</p><h4 id="Binary-Heap"><a href="#Binary-Heap" class="headerlink" title="Binary Heap"></a>Binary Heap</h4><p>A heap is a binary tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right. Such a tree is known as a complete binary tree.</p><ul><li>Structure<ul><li>A heap data structure consist of an array (of Comparable objects) and an integer representing the current heap size.</li><li>For any element in array position i, the left child is in position 2i, the right child is in the cell after the left child [2i + 1], and the parent is in position [i/2].</li></ul></li><li>Heap-Order Property<br>  For every node X, the key in the parent of X is smaller than (or equal to) the key in X. So to make find minimum operation quick.</li><li><p>Basic Heap Operation</p><ul><li><p><code>insert</code>: To insert an element X into the heap, create a hole in the next available location. Then <strong>Percolate up</strong> - swap X with its parent index (i/2) so long as X has a higher priority than its parent. Continue this process until X has no more lower priority parent.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Percolate up</span></span><br><span class="line"><span class="keyword">int</span> hole = ++size;</span><br><span class="line">    binaryQueue[<span class="number">0</span>]=<span class="built_in">std</span>::move(*newOne);</span><br><span class="line">    <span class="keyword">for</span> (;(priority&lt;binaryQueue[hole/<span class="number">2</span>].priority || (priority==binaryQueue[hole/<span class="number">2</span>].priority &amp;&amp; name&lt;binaryQueue[hole/<span class="number">2</span>].name) );hole/=<span class="number">2</span>) &#123;</span><br><span class="line">binaryQueue[hole] = <span class="built_in">std</span>::move(binaryQueue[hole/<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    binaryQueue[hole] = <span class="built_in">std</span>::move(binaryQueue[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p><code>deleteMin</code>: When the minimum is removed, a hole is created at the root. Move the last element X in the heap to place in the root hole. Then <strong>Percolate down</strong> - swapp X with its more urgent-priority child [index (i<em>2 or i</em>2+1)] so long as it has a lower priority than its child. Repeat this step until X has no more higher priority child.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Percolate down</span></span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line">    <span class="keyword">for</span> (; hole*<span class="number">2</span>&lt;=size;hole=child) &#123;</span><br><span class="line">child = hole*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> ( child!=size &amp;&amp; (binaryQueue[child+<span class="number">1</span>].priority&lt;binaryQueue[child].priority || (binaryQueue[child+<span class="number">1</span>].priority==binaryQueue[child].priority &amp;&amp; binaryQueue[child+<span class="number">1</span>].name&lt;binaryQueue[child].name)) )</span><br><span class="line">    ++child;</span><br><span class="line"><span class="keyword">if</span> ( binaryQueue[child].priority&lt;priority_tobePerD || (binaryQueue[child].priority==priority_tobePerD &amp;&amp; binaryQueue[child].name&lt;name_tobePerD) ) &#123;</span><br><span class="line">    binaryQueue[hole] = <span class="built_in">std</span>::move(binaryQueue[child]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>Use integer division to avoid even odd index.</p></li></ul></li></ul><h3 id="Algorithm-Analysis"><a href="#Algorithm-Analysis" class="headerlink" title="Algorithm Analysis"></a>Algorithm Analysis</h3><p>Space/time, big-O, scalability</p><h4 id="Big-O"><a href="#Big-O" class="headerlink" title="Big-O"></a>Big-O</h4><ul><li>Computational complexity: The relationship between N and the performance of an algorithm as N becomes large</li><li>Big-O notation: to denote the computational complexity of algorithms.</li><li>Standard simplifications of big-O<ul><li>Eliminate any term whose contribution to the total ceases to be significant as N becomes large.</li><li>Eliminate any constant factors.</li></ul></li><li>Worst-case versus average-case complexity<br>Average-case performance often reflects typical behavior, while worst-case performance represents a guarantee for performance on any possible input.</li><li>Predicting computational complexity from code structure<ul><li>Constant time: Code whose execution time does not depend on the problem size is said to run in constant time, which is expressed in big-O notation as O(1).</li><li>Linear time: function that are executed exactly n times, once for each cycle of the for loop, O(N)</li><li>Quadratic time: Algorithms like selection sort that exhibit O(N<sup>2</sup>) performance are said to run in quadratic tim</li><li>For many programs, you can determine the computational complexity simply by finding the piece of the code that is executed most often and determining how many times it runs as a function of N</li></ul></li></ul><h4 id="Space-time"><a href="#Space-time" class="headerlink" title="Space/time"></a>Space/time</h4><ul><li>In general, the most important measure of performance is execution time.</li><li>It also possible to apply complexity analysis to the amount of memory space required. Nowadays the memory is cheap, but it still matters when designing extreamly big programs, or APPs on small memory device, such as phones and wearable devices.</li></ul><h4 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h4><p>There are lots of different sorting algoritms, from the simple to very complex. Some optimized for certain situations (lots of duplicates, almost sorted, etc.). So why do we need multiple algorithms?</p><ol><li><p>Selection sort</p><ul><li><p>Select smallest and swap to front/backend</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(Vector&lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line"> <span class="keyword">int</span> minIndex = i;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.size(); j++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line"> minIndex = j;</span><br><span class="line"> &#125;</span><br><span class="line"> Swap(arr[i], arr[minIndex]);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>Selection sort analysis<br>Count work inside loops:</p><ul><li>First iteration does N-1 compares, second does N-2, and so on.</li><li>One swap per iteration</li><li>O(N<sup>2</sup>)</li></ul></li></ul></li><li><p>Insertion sort</p><ul><li><p>As sorting hand of just-dealt cards, each subsequent element inserted into proper place</p><ul><li>Start with first element (already sorted)</li><li>Insert next element relative to first</li><li>Repeat for third, fourth, etc.</li><li>Slide elements over to make space during insert<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(Vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line"> <span class="keyword">int</span> cur = v[i]; <span class="comment">// slide cur down into position to left</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j=i<span class="number">-1</span>; j &gt;= <span class="number">0</span> &amp;&amp; v[j] &gt; cur; j--)</span><br><span class="line"> v[j+<span class="number">1</span>] = v[j];</span><br><span class="line"> v[j+<span class="number">1</span>] = cur;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Insertion sort analysis<br>Because of the nested loops, each of which can take N iterations, insertion sort is O(N<sup>2</sup>).</p></li></ul></li><li><p>Heapsort<br><a href="#priority-queues">Priority queues</a> can be used to sort in O(N log N) time. The algorithm based on this idea is known as heapsort.</p><ul><li>Heapsort analysis<br>The building of the heap, uses less than 2N comparisons. In the second phase, the ith <code>deleteMax</code> uses at most less than 2*log (N − i + 1) comparisons, for a total of at most 2N log N − O(N) comparisons (assuming N ≥ 2). Consequently, in the worst case, at most 2N log N − O(N) comparisons are used by heapsort.</li></ul></li><li><p>Merge sort</p><ul><li>Inspiration: Algorithm like selection sort is quadratic growth (O(N<sup>2</sup>)). Double input -&gt; 4X time, halve input -&gt; 1/4 time.<br>Can recursion save the day? If there are two sorted halves, how to produce sorted full result?</li><li><a href="#divide-and-conquer">Divide and conquer</a> algorithm<ul><li>Divide input in half</li><li>Recursively sort each half</li><li>Merge two halves together</li></ul></li><li>“Easy-split hard-join”<ul><li>No complex decision about which goes where, just divide in middle</li><li>Merge step preserves ordering from each half</li></ul></li><li><p>Merge depends on the fact that the first element in the complete ordering must be either the first element in v1 or the first element in v2, whichever is smaller.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(Vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (v.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">int</span> n1 = v.size()/<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">int</span> n2 = v.size() - n1;</span><br><span class="line"> Vector&lt;<span class="keyword">int</span>&gt; left = Copy(v, <span class="number">0</span>, n1);</span><br><span class="line"> Vector&lt;<span class="keyword">int</span>&gt; right = Copy(v, n1, n2);</span><br><span class="line"> MergeSort(left);</span><br><span class="line"> MergeSort(right);</span><br><span class="line"> v.clear();</span><br><span class="line"> Merge(v, left, right);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(Vector&lt;<span class="keyword">int</span>&gt; &amp;v,Vector&lt;<span class="keyword">int</span>&gt; &amp;left,Vector&lt;<span class="keyword">int</span>&gt; &amp;right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>, r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;left.size() &amp;&amp; r&lt;right.size()) &#123;</span><br><span class="line"><span class="keyword">if</span> (left[l]&lt;right[r])</span><br><span class="line">v.add(left[l++]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v.add(right[r++]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l&lt;left.size()) v.add(left[l++]);</span><br><span class="line"><span class="keyword">while</span>(r&lt;right.size()) v.add(right[r++]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mergesort analysis<br>The time to mergesort N numbers is equal to the time to do two recursive mergesorts of size N/2, plus the time to merge, which is linear. T(N) = N + 2T(N/2). log N levels * N per level= O(NlogN). Mergesort uses the lowest number of comparisons of all the popular sorting algorithms.<br>Theoretical result show that no general sort algorithm could be better than NlogN.<br>But there is still better in practice:</p><ul><li>The running time of mergesort, when compared with other O(N log N) alternatives, depends heavily on the relative costs of comparing elements and moving elements in the array (and the temporary array). These costs are language dependent.</li><li>In <strong>Java</strong>, when performing a generic sort (using a Comparator), an element <strong>comparison can be expensive</strong>, but <strong>moving elements is cheap</strong> (because they are reference assignments, rather than copies of large objects).</li><li>In <strong>C++</strong>, in a generic sort, <strong>copying objects can be expensive</strong> if the objects are large, while <strong>comparing objects often is relatively cheap</strong> because of the ability of the compiler to aggressively perform inline optimization.</li></ul></li></ul></li></ol><ol><li><p>Quicksort<br>Most sorting programs in use today are based on an algorithm called Quicksort, which employs a <a href="#divide-and-conquer">Divide and conquer</a> strategy as merge sort, but instead take a different approach to divide up input vector into low half and high half. Quicksort uses a few more comparisons, in exchange for significantly fewer data movements. The reason that quicksort is faster is that the partitioning step can actually be performed in place and very efficiently.</p><ul><li><p>“Hard-split easy-join”, Each element examined and placed in correct half, so that join step become trivial.</p><ul><li>Choose an element (<strong>pivot</strong>) to serve as the boundary between the small and large elements.</li><li>Partitioning: Rearrange the elements in the vector so that all elements to the left of the boundary are less than the pivot and all elements to the right are greater than or possibly equal to the pivot.</li><li>Sort the elements in each of the partial vectors.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quicksort</span><span class="params">(Vector&lt;<span class="keyword">int</span>&gt; &amp;v, <span class="keyword">int</span> start, <span class="keyword">int</span> stop)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (stop &gt; start) &#123;</span><br><span class="line"> <span class="keyword">int</span> pivot = Partition(v, start, stop);</span><br><span class="line"> Quicksort(v, start, pivot<span class="number">-1</span>);</span><br><span class="line"> Quicksort(v, pivot+<span class="number">1</span>, stop);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Quicksort performance analysis<br>The running time of quicksort is equal to the running time of the two recursive calls plus the linear time spent in the partition (the pivot selection takes only constant time). T(N) = T(i) + T(N − i − 1) + cN, where i = |S1| is the number of elements in S1.<br>There are thre cases</p><ul><li>Ideal 50/50 split: The pivot is in the middle, T(N) = cN + 2T(N/2) =&gt; O(NlogN)</li><li>Average bad 90/10 split: N per level, but more levels, solve N*(9/10)<sup>k</sup> = 1, still k = O(NlogN)</li><li><p>Worst N-1/1 split: The pivot is the smallest element, all the time. Then i = 0, T(N) = T(N − 1) + cN, N &gt; 1. With N levels! O(N<sup>2</sup>)</p><p>In a vector with randomly chosen elements, Quicksort tends to perform well, with an average-case complexity of O(N log N). In the worst case — which paradoxically consists of a vector that is already sorted — the performance degenerates to O(N<sup>2</sup>). Despite this inferior behavior in the worst case, Quicksort is so much faster in practice than most other algorithms that it has become the standard.</p></li></ul></li></ul></li></ol><h3 id="Design-Strategy"><a href="#Design-Strategy" class="headerlink" title="Design Strategy"></a>Design Strategy</h3><p>When an algorithm is given, the actual data structures need not be specified. It is up to the programmer to choose the appropriate data structure in order to make the running time as small as possible. There are many to be considered: algorithms, data structure, space-time tradeoff, code complexity.</p><h4 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h4><p>To solve optimization problems in which we make a set of choices in order to arrive at an optimal solution. As we make each choice, subproblems of the same form often arise. Dynamic programming is effective when a given subproblem may arise from more than one partial set of choices; the key technique is to store the solution to each such subproblem in case it should reappear. Unlike divide-and-conquer algorithms which partition the problem into disjoint subproblems, dynamic programming applies when the subproblems overlap.</p><ul><li>“Programming” in this context refers to a tabular method.</li><li>When should look for a dynamic-programming solution to a problem?<ul><li>Optimal substructure: a problem exhibits optimal substructure if an optimal solution to the problem contains within it optimal solutions to subproblems.</li><li>Overlapping subproblems: When a recursive algorithm revisits the same problem repeatedly, we say that the optimization problem<br>has overlapping subproblems. In contrast, a problem for which a divide-andconquer approach is suitable usually generates brand-new problems at each step of the recursion.</li></ul></li><li>General setps of Dynamic Programming<ul><li>Characterize the structure of an optimal solution.</li><li>Recursively define the value of an optimal solution.</li><li>Compute the value of an optimal solution, typically in a bottom-up fashion.</li><li>Construct an optimal solution from computed information.</li></ul></li></ul><h4 id="Greedy-Algorithms"><a href="#Greedy-Algorithms" class="headerlink" title="Greedy Algorithms"></a>Greedy Algorithms</h4><p>Greedy algorithms work in phases. In each phase, a decision is made in a locally optimal manner, without regard for future consequences. When the algorithm terminates, we hope that the local optimum is equal to the global optimum. If this is the case, then the algorithm is correct; otherwise, the algorithm has produced a suboptimal solution.</p><ul><li><a href="https://en.wikipedia.org/wiki/Huffman_coding" target="_blank" rel="noopener">Huffman Codes</a><ul><li>A Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression.</li><li>The reason that this is a greedy algorithm is that at each stage we perform a merge without regard to global considerations. We merely select the two smallest trees.</li><li>If we maintain the trees in a priority queue, ordered by weight, then the running time is O(C logC), since there will be one buildHeap, 2C − 2 deleteMins, and C − 2 inserts. A simple implementation of the priority queue, using a list, would give an O(C<sup>2</sup>) algorithm. The choice of priority queue implementation depends on how large C is. In the typical case of an ASCII character set, C is small enough that the quadratic running time is acceptable.</li></ul></li></ul><h4 id="Divide-and-Conquer"><a href="#Divide-and-Conquer" class="headerlink" title="Divide and Conquer"></a>Divide and Conquer</h4><p>Traditionally, routines in which the text contains at least two recursive calls and subproblems be disjoint (that is, essentially nonoverlapping) are called divide-and-conquer algorithms.</p><ul><li>Divide: Smaller problems are solved recursively (except, of course, base cases).</li><li>Conquer: The solution to the original problem is then formed from the solutions to the subproblems.<br>We have already seen several divide-and-conquer algorithms: mergesort and quicksort, which have <code>O(N log N)</code> worst-case and averagecase bounds, respectively.</li></ul><h4 id="Backtracking-Algorithms"><a href="#Backtracking-Algorithms" class="headerlink" title="Backtracking Algorithms"></a>Backtracking Algorithms</h4><p>See <a href="#recursive-backtracking">Recursive Backtracking</a><br>In some cases, the savings over a brute-force exhaustive search can be significant.<br>The elimination of a large group of possibilities in one step is known as <strong>pruning</strong>.</p><h4 id="How-to-evaluate-compare-alternatives"><a href="#How-to-evaluate-compare-alternatives" class="headerlink" title="How to evaluate/compare alternatives"></a>How to evaluate/compare alternatives</h4><ul><li>Often interested in execution performance: Time spent and memory used</li><li>Should also consider ease of developing, verifying, maintaining code<h4 id="Quicksort-strategy"><a href="#Quicksort-strategy" class="headerlink" title="Quicksort strategy"></a>Quicksort strategy</h4></li></ul><ol><li><p>Picking the pivot<br>Picking a good pivot improves performance, but also costs some time. If the algorithm spends more time choosing the pivot than it gets back from making a good choice, you will end up slowing down the implementation rather than speeding it up.</p><ul><li>The popular, uninformed choice is to use the first element as the pivot. This is acceptable if the input is random, but if the input is presorted or in reverse order, then the pivot provides a poor partition.</li><li>A safe approach is to choose the pivot element randomly. On the other hand, random number generation is generally an expensive commodity and does not reduce the average running time of the rest of the algorithm at all.</li><li>A good estimate can be obtained by picking three elements randomly and using the median of these three as pivot. The randomness turns out not to help much, so the common course is to use as pivot the median of the left, right, and center elements.</li></ul></li><li><p>Quicksort partitioning strategy<br>A known method that is very easy to do it wrong or inefficiently.</p><ul><li>General process:<ul><li>The first step is to get the pivot element out of the way by swapping it with the last element.</li><li>Two pointers, i point to the first element and j to the next-to-last element. What our partitioning stage wants to do is to move all the small elements to the left part of the array and all the large elements to the right part. “Small” and “large” are relative to the pivot.</li><li>While i is to the left of j, we move i right, skipping over elements that are smaller than the pivot. We move j left, skipping over elements that are larger than the pivot.</li><li>When i and j have stopped, i is pointing at a large element and j is pointing at a small element. If i is to the left of j (not yet cross), those elements are swapped.</li><li>Repeat the process until i and j cross</li><li>The final is to swap the pivot element with present i element</li></ul></li><li>One important detail we must consider is how to handle elements that are equal to the pivot? Suppose there are 10,000,000 elements, of which 500,000 are identical (or, more likely, complex elements whose sort keys are identical).<ul><li>To get an idea of what might be good, we consider the case where all the elements in the array are identical.</li><li>If neither i nor j stops, and code is present to prevent them from running off the end of the array, no swaps will be performed. Although this seems good, a correct implementation would then swap the pivot into the last spot that i touched, which would be the next-to last position (or last, depending on the exact implementation). This would create very uneven subarrays. If all the elements are identical, the running time is O(N<sup>2</sup>).</li><li>If both i and j stop, there will be many swaps between identical elements. The partition creates two nearly equal subarrays. The total running time would then be O(N log N).</li><li>Thus it is better to do the unnecessary swaps and create even subarrays than to risk wildly uneven subarrays.</li></ul></li><li>Small arrays<ul><li>For very small arrays (N ≤ 20), quicksort does not perform as well as insertion sort.</li><li>Furthermore, because quicksort is recursive, these cases will occur frequently.</li><li>A common solution is not to use quicksort recursively for small arrays, but instead use a sorting algorithm that is efficient for small arrays, such as insertion sort.</li><li>A good cutoff range is N = 10, although any cutoff between 5 and 20 is likely to produce similar results. This also saves nasty degenerate cases, such as taking the median of three elements when there are only one or two.</li></ul></li></ul></li></ol><h4 id="Text-editor-case-study"><a href="#Text-editor-case-study" class="headerlink" title="Text editor case study"></a>Text editor case study</h4><ol><li>Buffer requirements<ul><li>Sequence of characters + cursor position</li><li>Operations to match commands above</li></ul></li><li><p>What to consider?</p><ul><li>Implementation choices</li><li>performance implications</li></ul></li><li><p>Buffer class interface</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> Buffer();</span><br><span class="line"> ~Buffer();</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">moveCursorForward</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">moveCursorBackward</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">moveCursorToStart</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">moveCursorToEnd</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">insertCharacter</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">deleteCharacter</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"> <span class="comment">// TBD!</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Buffer layered on Vector</p><ul><li>Need character data + cursor<ul><li>Chars in <code>Vector&lt;char&gt;</code></li><li>Represent cursor as integer index</li><li>Minor detail – is index before/after cursor?</li></ul></li><li><p>Buffer contains: AB|CDE</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for Buffer class</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> Vector&lt;<span class="keyword">char</span>&gt; chars;</span><br><span class="line"><span class="keyword">int</span> cursor;</span><br></pre></td></tr></table></figure></li><li><p>Performance</p><ul><li>insertCharacter() and deleteCharacter() is linear, other operation is just O(1)</li><li>Space used ~1 byte per char</li></ul></li></ul></li><li><p>Buffer layered on Stack</p><ul><li>Inspiration: add/remove at end of vector is fast<ul><li>If chars next to cursor were at end…</li><li>Build on top of stack?</li><li>Another layered abstraction!</li><li>How is cursor represented?</li></ul></li><li><p>Buffer contains:AB|CDE<br>There is no explicit cursor representation, instead using two stack to represent a whole data structure being seperated by the implicit cursor.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for Buffer class</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> Stack&lt;<span class="keyword">char</span>&gt; before, after;</span><br></pre></td></tr></table></figure></li><li><p>Performance</p><ul><li>moveCursorToStart(), moveCursorToEnd() operation is linear, other operation is just O(1)</li><li>Space used ~2 byte per char</li></ul></li></ul></li><li><p>Buffer as double linked list</p><ul><li>Inspiration: contiguous memory is constraining<ul><li>Connect chars without locality</li><li>Add tail pointer to get direct access to last cell</li><li>Add prev link to speed up moving backwards</li></ul></li><li><p>Buffer contains:AB|CDE</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for Buffer class</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">cellT</span> &#123;</span></span><br><span class="line"> <span class="keyword">char</span> ch;</span><br><span class="line"> cellT *prev, *next;</span><br><span class="line"> &#125;;</span><br><span class="line"> cellT *head, *tail, *cursor;</span><br></pre></td></tr></table></figure></li><li><p>Cursor design</p><ul><li>To cell before or after?</li><li>5 letters, 6 cursor positions…</li><li>Add “dummy cell” to front of list</li></ul></li><li>Performance<ul><li>destruction is linear, other operation is just O(1)</li><li>Space used ~9 byte per char</li></ul></li></ul></li><li><p>Compare implementations</p><style>table th:nth-of-type(1) { width: 200px;}table th:nth-of-type(2) { width: 80px;}table th:nth-of-type(3) { width: 80px;}</style></li></ol><table><thead><tr><th>Operation</th><th style="text-align:center">Vector</th><th style="text-align:center">Stack</th><th style="text-align:center">Single linked list</th><th style="text-align:center">Double linked list</th></tr></thead><tbody><tr><td>Buffer()</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td>~Buffer()</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(N)</td></tr><tr><td>moveCursorForward()</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td>moveCursorBackward()</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td></tr><tr><td>moveCursorToStart()</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td>moveCursorToEnd()</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td></tr><tr><td>insertCharacter()</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td>deleteCharacter()</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td></tr><tr><td>Space used</td><td style="text-align:center">1N</td><td style="text-align:center">2N</td><td style="text-align:center">5N</td><td style="text-align:center">9N</td></tr></tbody></table><ol><li>Space-time tradeoff<ul><li>Doubly-linked list is O(1) on all six operations<ul><li>But, each char uses 1 byte + 8 bytes of pointers =&gt; 89% overhead!</li></ul></li><li>Compromise: chunklist<ul><li>Array and linked list hybrid</li><li>Shares overhead cost among several chars</li><li>Chunksize can be tuned as appropriate</li></ul></li><li>Cost shows up in code complexity<ul><li>Cursor must traverse both within and across chunks</li><li>Splitting/merging chunks on insert/deletes</li></ul></li></ul></li></ol><h4 id="Implementing-Map"><a href="#Implementing-Map" class="headerlink" title="Implementing Map"></a>Implementing Map</h4><p>Map is super-useful, support any kind of dictionary, lookup table, index, database, etc.<br>Map stores key-value pairs, support fast access via key, operations to optimize: add, getValue<br>How to make it work efficiently?</p><ol><li>Implement Map as Vector<ul><li>Layer on Vector, provides convenience with low overhead</li><li>Define pair struct, to olds key and value together, <code>Vector&lt;pair&gt;</code></li><li>Vector sorted or unsorted? If sorted, sorted by what?<ul><li>Sorting: Provides fast lookup, but still slow to insert (because of shuffling)</li></ul></li><li>How to implement getValue, add?</li><li>Does a linked list help?<ul><li>Easy to insert, once at a position</li><li>But hard to find position to insert…</li></ul></li></ul></li><li><p>Implementing Map as tree</p><ul><li>Implementatation<ul><li>Each Map entry adds node to tree, node contains: string key, client-type value, pointers to left/right subtrees</li><li>Tree organized for binary search, Key is used as search field</li><li>getValue: Searches tree, comparing keys, find existing match or error</li><li>add: Searches tree, comparing keys, overwrites existing or adds new node</li></ul></li><li><p>Private members for Map</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValType&gt;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Map</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> <span class="comment">// as before</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"> <span class="built_in">string</span> key;</span><br><span class="line"> ValType value;</span><br><span class="line"> node *left, *right;</span><br><span class="line"> &#125;;</span><br><span class="line"> node *root;</span><br><span class="line"></span><br><span class="line"> <span class="function">node *<span class="title">treeSearch</span><span class="params">(node * t, <span class="built_in">string</span> key)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">treeEnter</span><span class="params">(node *&amp;t, <span class="built_in">string</span> key, ValType val)</span></span>;</span><br><span class="line"> DISALLOW_COPYING(Map)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Evaluate Map as tree</p><ul><li>Space used: Overhead of two pointers per entry (typically 8 bytes total)</li><li>Runtime performance: Add/getValue take time proportional to tree height(expected to be O(logN))</li></ul></li><li>Degenerate trees<ul><li>The insert order is “sorted”: 2 8 14 15 18 20 21, totally unbalanced with height = 7</li><li>The insert order is “alternately sorted”:  21 2 20 8 14 15 18 or  2 8 21 20 18 14 15</li><li>Association: What is the relationship between worst-case inputs for tree insertion and Quicksort?</li><li>What to do about it: AVL tree</li></ul></li></ul></li><li>Compare Map implementations</li></ol><table><thead><tr><th>Operation</th><th style="text-align:center">Vector</th><th style="text-align:center">BST</th><th style="text-align:center">Sorted Vector</th></tr></thead><tbody><tr><td>getValue</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(lgN)</td><td style="text-align:center">O(lgN)</td></tr><tr><td>add</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(lgN)</td><td style="text-align:center">O(N)</td></tr><tr><td>Space used</td><td style="text-align:center">N</td><td style="text-align:center">9N</td><td style="text-align:center">N</td></tr></tbody></table><h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><ul><li>Hash table ADT<ul><li>Hash table data structure: A list of keys and TableSize</li><li>Hash function: A mapping that map each key into some number in the range 0 to TableSize-1 and distributes the keys evenly among the appropriate cell</li></ul></li><li>Hashing<br>The major problems are choosing a function, deciding what to do when two keys hash to the same value (this is known as a<br>collision), and deciding on the table size</li><li>Rehashing<br>If the table gets too full, the running time for the operations will start taking too long, and insertions might fail for open addressing hashing with quadratic resolution. A solution is to build another table that is about twice as big (with an associated new hash function) and scan down the entire original hash table, computing the new hash value for each (nondeleted) element and inserting it in the new table.</li></ul><h3 id="The-Big-Five"><a href="#The-Big-Five" class="headerlink" title="The Big-Five"></a>The Big-Five</h3><p>In C++11, classes come with five special functions that are already written for you. These are the destructor, copy constructor, move constructor, copy assignment operator, and move assignment operator. Collectively these are the big-five.</p><h4 id="Destructor"><a href="#Destructor" class="headerlink" title="Destructor"></a>Destructor</h4><p>The destructor is called whenever an object goes out of scope or is subjected to a delete. Typically, the only responsibility of the destructor is to free up any resources that were acquired during the use of the object. This includes calling delete for any corresponding news, closing any files that were opened, and so on. The default simply applies the destructor on each data member.</p><h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><p>A constructor is a method that describes how an instance of the class is constructed. If no constructor is explicitly defined, one that initializes the data members using language defaults is automatically generated.</p><ul><li><p>Copy Constructor and Move Constructor</p></li><li><p>Copy Assignment and Move Assignment (operator=)<br>By Defaults, if a class consists of data members that are exclusively primitive types and objects for which the defaults make sense, the class defaults will usually make sense.<br>The main problem occurs in a class that contains a data member that is a pointer.</p><ul><li>The default destructor does nothing to data members that are pointers (for good reason—recall that we must delete ourselves).</li><li>Furthermore, the copy constructor and copy assignment operator both copy the value of the pointer rather than the objects being pointed at. Thus, we will have two class instances that contain pointers that point to the same object. This is a so-called <strong>shallow copy</strong> (contrast to deep copy).  </li><li><p>To avoid shallow copy, ban the copy funtionality by calling <code>DISALLOW_COPYING(ClassType)</code>.</p><p>As a result, when a class contains pointers as data members, and deep semantics are important, we typically must implement the destructor, copy assignment, and copy constructors ourselves.</p></li></ul></li><li><p>Explicit constructor:<br>All one-parameter constructors should be made explicit to avoid behind-the-scenes type conversions. Otherwise, there are somewhat lenient rules that will allow type conversions without explicit casting operations. Usually, this is unwanted behavior that destroys strong typing and can lead to hard-to-find bugs.<br>The use of explicit means that a one-parameter constructor cannot be used to generate an implicit temporary</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntCell</span>  &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">IntCell</span><span class="params">( <span class="keyword">int</span> initialValue = <span class="number">0</span> )</span></span></span><br><span class="line"> : storedValue&#123; initialValue &#125; &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">( )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="keyword">return</span> storedValue; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> storedValue;</span><br><span class="line"> &#125;;</span><br><span class="line">IntCell obj; <span class="comment">// obj is an IntCell</span></span><br><span class="line">obj = <span class="number">37</span>; <span class="comment">// Should not compile: type mismatch</span></span><br></pre></td></tr></table></figure></li></ul><p>Since <code>IntCell</code> constructor is declared explicit, the compiler will correctly complain that there is a type mismatch</p><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><h4 id="Type-independent"><a href="#Type-independent" class="headerlink" title="Type-independent"></a>Type-independent</h4><p>When we write C++ code for a type-independent algorithm or data structure, we would prefer to write the code once rather than recode it for each different type</p><h4 id="Function-template"><a href="#Function-template" class="headerlink" title="Function template"></a>Function template</h4><ul><li>A function template is not an actual function, but instead is a pattern for what could become a function.</li><li>An expansion for each new type generates additional code; this is known as <strong>code bloat</strong> when it occurs in large projects.<h4 id="Class-template"><a href="#Class-template" class="headerlink" title="Class template"></a>Class template</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Object&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryCell</span> &#123;</span></span><br><span class="line">     <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">explicit</span> <span class="title">MemoryCell</span><span class="params">( <span class="keyword">const</span> Object &amp; initialValue = Object&#123; &#125; )</span></span></span><br><span class="line">     : storedValue&#123; initialValue &#125; &#123; &#125;</span><br><span class="line">     <span class="keyword">private</span>:</span><br><span class="line">     Object storedValue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><code>MemoryCell</code> is not a class, it is only a class template. It will be a class if specify the Object type. <code>MemoryCell&lt;int&gt;</code> and <code>MemoryCell&lt;string&gt;</code> are the actual classes.</p><h3 id="Graph-Algorithms"><a href="#Graph-Algorithms" class="headerlink" title="Graph Algorithms"></a>Graph Algorithms</h3><p>Definitions: vertices, edges, arcs, directed arcs = digraphs, weight/cost, path, length, acyclic(no cycles)</p><h4 id="Topological-Sort"><a href="#Topological-Sort" class="headerlink" title="Topological Sort"></a>Topological Sort</h4><ul><li>A topological sort is an ordering of vertices in a directed acyclic graph, such that if there is a path from vi to vj, then vj appears after vi in the ordering.</li><li>A topological ordering is not possible if the graph has a cycle</li><li>To find a topological ordering, define the indegree of a vertex v as the number of edges (u, v), then use a queue or stack to keep the present 0 indegree vertexes. At each stage, as long as the queue is not empty, dequeue a 0 indegree vertexes in the queue, enqueue each new generated 0 indegree vertexes into the queue.</li></ul><h4 id="Sortest-Path-Algorithms"><a href="#Sortest-Path-Algorithms" class="headerlink" title="Sortest-Path Algorithms"></a>Sortest-Path Algorithms</h4><ul><li><p><a href="http://www.redblobgames.com/pathfinding/a-star/introduction.html#breadth-first-search" target="_blank" rel="noopener">Breadth-first search</a></p><ul><li>Explores equally in all directions</li><li>To find unweighted shortest paths</li><li>Operates by processing vertices in layers: The vertices closest to the start are evaluated first, and the most distant vertices are evaluated last.</li></ul></li><li><p><a href="http://www.redblobgames.com/pathfinding/a-star/introduction.html#dijkstra" target="_blank" rel="noopener">Dijkstra’s Algorithm</a></p><ul><li>Also called Uniform Cost Search, cost matters</li><li>Instead of exploring all possible paths equally, it favors lower cost paths.</li><li>Dijkstra’s algorithm proceeds in stages. At each stage, while there are still vertices waiting to be known:<ul><li>Selects a vertex v, which has the <strong>smallest</strong> dv among all the <em>unknown</em> vertices, and declares v as <em>known</em> stage.</li><li>For each of v’s neighbors, w, if the new path’s cost from v to w is better than previous dw, dw will be updated.</li><li>But w will not be marked as <strong>known</strong>, unless at next while-loop stage, dw happens to be the smalles.</li></ul></li><li>The above steps could be implemented via a priority queue.</li><li>A proof by contradiction will show that this algorithm always works as long as no edge has a negative cost.</li><li>If the graph is sparse, with |E| =θ(|V|), this algorithm is too slow. In this case, the distances would need to be kept in a priority queue. Selection of the vertex v is a <strong>deleteMin</strong> operation. The update of w’s distance can be implemented two ways.<ul><li>One way treats the update as a decreaseKey operation.</li><li>An alternate method is to insert w and the new value dw into the priority queue every time w’s distance changes.</li></ul></li></ul></li><li><p><a href="http://www.redblobgames.com/pathfinding/a-star/introduction.html#greedy-best-first" target="_blank" rel="noopener">Greedy Best First Search(Heuristic search)</a></p><ul><li>With Breadth First Search and Dijkstra’s Algorithm, the frontier expands in all directions. This is a reasonable choice if you’re trying to find a path to all locations or to many locations. However, a common case is to find a path to only one location.</li><li>A modification of Dijkstra’s Algorithm, optimized for a single destination. It prioritizes paths that seem to be leading closer to the goal.</li><li><p>To make the frontier expand towards the goal more than it expands in other directions.</p><ul><li><p>First, define a <em>heuristic</em> function that tells us how close we are to the goal, design a heuristic for each type of graph</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def heuristic(a, b):</span><br><span class="line">     # Manhattan distance on a square grid</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">abs</span>(a.x - b.x) + <span class="built_in">abs</span>(a.y - b.y)</span><br></pre></td></tr></table></figure></li><li><p>Use the estimated distance to the goal for the priority queue ordering. The location closest to the goal will be explored first.</p></li></ul></li><li>This algorithm runs faster when there aren’t a lot of obstacles, but the paths aren’t as good(not always the shortest).</li></ul></li><li><p><a href="http://www.redblobgames.com/pathfinding/a-star/introduction.html#astar" target="_blank" rel="noopener">A* Algorithm</a></p><ul><li>Dijkstra’s Algorithm works well to find the shortest path, but it wastes time exploring in directions that aren’t promising. Greedy Best First Search explores in promising directions but it may not find the shortest path.</li><li>The A* algorithm uses both the actual distance from the start and the estimated distance to the goal.</li><li>Compare the algorithms: Dijkstra’s Algorithm calculates the distance from the start point. Greedy Best-First Search estimates the distance to the goal point. A* is using the sum of those two distances.</li><li>So A* is the best of both worlds. As long as the heuristic does not overestimate distances, A* does not use the heuristic to come up with an approximate answer. It finds an optimal path, like Dijkstra’s Algorithm does. A* uses the heuristic to reorder the nodes so that it’s more likely that the goal node will be encountered sooner.</li></ul></li><li><p>Conclusion: Which algorithm should you use for finding paths on a map?</p><ul><li>If you want to find paths from or to all all locations, use Breadth First Search or Dijkstra’s Algorithm. Use Breadth First Search if movement costs are all the same; use Dijkstra’s Algorithm if movement costs vary.</li><li>If you want to find paths to one location, use Greedy Best First Search or A*. Prefer A<em> in most cases. When you’re tempted to use Greedy Best First Search, consider using A</em> with an “inadmissible” heuristic.</li><li>If you want the optimal paths, Breadth First Search and Dijkstra’s Algorithm are guaranteed to find the shortest path given the input graph. Greedy Best First Search is not. A* is guaranteed to find the shortest path if the heuristic is never larger than the true distance. (As the heuristic becomes smaller, A<em> turns into Dijkstra’s Algorithm. As the heuristic becomes larger, A</em> turns into Greedy Best First Search.)</li></ul></li></ul><h3 id="Advanced-Data-Structures"><a href="#Advanced-Data-Structures" class="headerlink" title="Advanced Data Structures"></a>Advanced Data Structures</h3><h4 id="Red-Black-Trees"><a href="#Red-Black-Trees" class="headerlink" title="Red-Black Trees"></a><a href="http://algs4.cs.princeton.edu/33balanced/" target="_blank" rel="noopener">Red-Black Trees</a></h4><p>Red-black tree leads to a natural implementation of the insertion algorithm for <a href="#2-3-trees">2-3 trees</a></p><ul><li><p>RBT definition</p><ul><li>Red-black tree means encoding 2-3 trees in this way: red links, which bind together two 2-nodes to represent 3-nodes, and black links, which bind together the 2-3 tree.</li><li>An equivalent definition is to define red-black BSTs as BSTs having red and black links and satisfying the following three restrictions:<ul><li>Red links lean left.</li><li>No node has two red links connected to it.</li><li>The tree has perfect black balance : every path from the root to a null link has the     same number of black links.</li></ul></li><li>A 1-1 correspondence: If we draw the red links horizontally in a red-black BST, all of the null links are the same distance from the root, and if we then collapse together the nodes connected by red links, the result is a 2-3 tree.<br><img src="http://algs4.cs.princeton.edu/33balanced/images/redblack-1-1.png" alt="A 1-1 correspondence" title="http://algs4.cs.princeton.edu/33balanced/images/redblack-1-1.png"></li></ul></li><li><p>RBT implementaion</p><ul><li>Color representation:<ul><li>Each node is pointed to by precisely one link from its parent,</li><li>Encode the color of links in nodes, by adding a boolean instance variable color to our Node data type, which is true if the link from the parent is red and false if it is black. By convention, null links are black.</li><li>For clarity, define constants <code>RED</code> and <code>BLACK</code> for use in setting and testing this variable.</li></ul></li><li>Rotation<br>  To correct right-leaning red links or two red links in a row conditions.<ul><li>takes a link to a red-black BST as argument and, assuming that link to be to a Node h whose right link is red, makes the necessary adjustments and returns a link to a node that is the root of a red-black BST for the same set of keys whose left link is red. Actually it is switching from having the smaller of the two keys at the root to having the larger of the two keys at the root.</li></ul></li><li>Flipping colors<ul><li>to split a 4-node</li><li>In addition to flipping the colors of the children from red to black, we also flip the color of the parent from black to red.</li></ul></li><li>Keeping the root black.</li><li>Insertion<br>  Maintain the 1-1 correspondence between 2-3 trees and red-black BSTs during insertion by judicious use of three simple operations: left rotate, right rotate, and color flip.<ul><li>If the right child is red and the left child is black, rotate left.</li><li>If both the left child and its left child are red, rotate right.</li><li>If both children are red, flip colors.</li></ul></li><li>Deletion</li></ul></li></ul><hr><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a><a href="https://github.com/ShootingSpace/CS106B_assignments" target="_blank" rel="noopener">Assignments</a></h3><ol><li>Name Hash</li><li>Game of Life</li><li>Serafini</li><li>Recursion</li><li>Boggle!</li><li><a href="http://web.stanford.edu/class/cs106b/assn/patient-queue.html" target="_blank" rel="noopener">Patient Queue</a></li><li><a href="http://web.stanford.edu/class/cs106b/assn/huffman.html" target="_blank" rel="noopener">Huffman Encoding</a></li><li><a href="http://web.stanford.edu/class/cs106b/assn/trailblazer.html" target="_blank" rel="noopener">Trailblazer</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://see.stanford.edu/Course/CS106B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stanford CS106B Programming Abstractions&lt;/a&gt; 和 &lt;a href=&quot;https://see.stanford.edu/Course/CS106A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CS106A&lt;/a&gt; 的学习笔记. 我的课程作业(cs106b spring 2017)实现代码见 &lt;a href=&quot;https://github.com/ShootingSpace/cs106b-programming-abstraction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ShootingSpace/cs106b-programming-abstraction&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Topics&quot;&gt;&lt;a href=&quot;#Topics&quot; class=&quot;headerlink&quot; title=&quot;Topics:&quot;&gt;&lt;/a&gt;Topics:&lt;/h3&gt;&lt;p&gt;Recursion, algorithms analysis (sort/search/hash), dynamic data structures (lists, trees, heaps), data abstraction (stacks, queues, maps), implementation strategies/tradeoffs&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs106b" scheme="http://yoursite.com/tags/cs106b/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 09 双向链表 Doubly Linked List - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-09-java-doubly-linked-list/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-09-java-doubly-linked-list/</id>
    <published>2018-01-13T00:00:00.000Z</published>
    <updated>2018-03-20T22:39:28.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双向链表-Doubly-Linked-List"><a href="#双向链表-Doubly-Linked-List" class="headerlink" title="双向链表 Doubly Linked List"></a>双向链表 Doubly Linked List</h2><p>前面介绍过单向链表，不过单向链表有几个缺点. 第一个就是它的<code>addLast</code>操作非常慢。单向链表只有一个变量保存列表头的地址, 以及每个节点对后面节点的单向引用(链接). 对于很长的列表，<code>addLast</code>方法必须遍历整个列表, 一直到找到列表末尾才能执行插入操作. 那么如何解决呢?<br><a id="more"></a><br>最直观的解决方案就是加个’车尾’, 如图<img src="/images/sllist_last_pointer.png" alt="" title="image from: https://joshhug.gitbooks.io/"> 这样我们就可以直接通过<code>last.next</code>引用末尾位置.<br>不过另一个问题并没有解决, 就是删除列表最后一项<code>removeLast</code>这个操作还是很慢。因为在目前的结构设计下, 我们需要先找到倒数第二项，然后将其下一个指针设置为<code>null</code>。而要找到倒数第二节点, 我们就得先找到倒数第三个节点…… 以此类推。也就是说，对于删除末尾的操作，还是要几乎遍历整个列表。</p><h3 id="反方向的链接"><a href="#反方向的链接" class="headerlink" title="反方向的链接"></a>反方向的链接</h3><p>基于前面单向链表构建双向链表, 一个比较有效的方法是额外为每个节点添加一个指向前面节点的链接/指针.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> OneNode prev; <span class="comment">//指向前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> OneNode next; <span class="comment">//指向后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>增加这些额外的指针会导致额外的代码复杂度, 以及额外的内存开销, 这就是追求时间效率的代价.</p><h3 id="Sentinel-与尾节点"><a href="#Sentinel-与尾节点" class="headerlink" title="Sentinel 与尾节点"></a>Sentinel 与尾节点</h3><p>双向链表的一个设计初衷，就是为了解决单向链表针对列表末尾位置的操作效率不高的问题，除了sentinel和反方向的链接还不够，我们还需要一个节点（指针）能够直接帮我们定位到列表末端。可以考虑添加一个的尾节点<code>last</code>，<img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_basic_size_0.png" alt="" title="image from: https://joshhug.gitbooks.io/"> <img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_basic_size_2.png" alt="" title="image from: https://joshhug.gitbooks.io/"> 这样的列表就可以支持<code>O(1)</code>复杂度的<code>addLast</code>,<code>getLast</code> 和 <code>removeLast</code>操作了。</p><h2 id="循环双端链表"><a href="#循环双端链表" class="headerlink" title="循环双端链表"></a>循环双端链表</h2><p>上面的尾节点设计虽然没什么错误，但有点瑕疵：最后一个尾节点指针有时指向前哨节点，有时指向一个真正的节点。更好的方法是使双向链表首尾相连, 构成一个循环，即前后节点共享唯一的一个前哨节点。<img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_circular_sentinel_size_0.png" alt="" title="image from: https://joshhug.gitbooks.io/"> <img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_circular_sentinel_size_2.png" alt="fig source https://joshhug.gitbooks.io/hug61b/content/chap2/fig23/dllist_circular_sentinel_size_2.png" title="image from: https://joshhug.gitbooks.io/"><br>这样的设计相对更整洁，更美观(主观上的), sentinel的<code>prev</code>就指向列表最后一个节点, sentinel的<code>next</code>指向列表第一个节点.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDeque</span>&lt;<span class="title">GType</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> OneNode prev; <span class="comment">//sentinel's forward link always points to the last element</span></span><br><span class="line">        <span class="keyword">public</span> GType item;</span><br><span class="line">        <span class="keyword">public</span> OneNode next; <span class="comment">//sentinel's backward link always points to the first element</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OneNode</span><span class="params">(OneNode p, GType i, OneNode n)</span> </span>&#123;</span><br><span class="line">            prev = p;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后修改构造函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Creates an empty deque. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedListDeque</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>,<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sentinel.prev = sentinel;</span><br><span class="line">    sentinel.next = sentinel;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Creates a deque with x  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedListDeque</span><span class="params">(GType x)</span></span>&#123;</span><br><span class="line">    sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sentinel.next = <span class="keyword">new</span> OneNode(sentinel, x,sentinel);</span><br><span class="line">    sentinel.prev = sentinel.next;</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是初始化空列表, 那么其实就是一个自己指向自己的<code>sentinel</code>节点. 如果是非空列表, 那么<code>sentinel</code>节点和真实的节点就构成了一个最简单的二元循环体.</p><h3 id="针对列表末尾位置的操作"><a href="#针对列表末尾位置的操作" class="headerlink" title="针对列表末尾位置的操作"></a>针对列表末尾位置的操作</h3><p>双端链表结构优雅，虽然某些操作如<code>addFirst</code>等编码复杂度会提高, 但不影响速度. 更重要的是, 相比单向链表, 它反而使得<code>addLast, moveLast</code>等方法的代码实现变得简单了, 而且还进一步提升了运行速度(<code>O(n)到O(c)</code>).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Adds an item to the back of the Deque.</span></span><br><span class="line"><span class="comment"> * O(c) */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(GType x)</span></span>&#123;</span><br><span class="line">    OneNode oldBackNode = sentinel.prev;</span><br><span class="line">    OneNode newNode = <span class="keyword">new</span> OneNode(oldBackNode, x, sentinel);</span><br><span class="line">    sentinel.prev = newNode;</span><br><span class="line">    oldBackNode.next = newNode;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes and returns the item at the front of the Deque.</span></span><br><span class="line"><span class="comment"> * If no such item exists, returns null.O(c). */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GType <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    OneNode oldFrontNode = sentinel.next;</span><br><span class="line">    sentinel.next = oldFrontNode.next;</span><br><span class="line">    oldFrontNode.next.prev = sentinel;</span><br><span class="line">    size -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> oldFrontNode.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;双向链表-Doubly-Linked-List&quot;&gt;&lt;a href=&quot;#双向链表-Doubly-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;双向链表 Doubly Linked List&quot;&gt;&lt;/a&gt;双向链表 Doubly Linked List&lt;/h2&gt;&lt;p&gt;前面介绍过单向链表，不过单向链表有几个缺点. 第一个就是它的&lt;code&gt;addLast&lt;/code&gt;操作非常慢。单向链表只有一个变量保存列表头的地址, 以及每个节点对后面节点的单向引用(链接). 对于很长的列表，&lt;code&gt;addLast&lt;/code&gt;方法必须遍历整个列表, 一直到找到列表末尾才能执行插入操作. 那么如何解决呢?&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 08 单向链表 Singly Linked List - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-08-java-singly-linked-list/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-08-java-singly-linked-list/</id>
    <published>2018-01-12T00:00:00.000Z</published>
    <updated>2018-03-20T22:40:02.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表 Linked List"></a>链表 Linked List</h2><p>前面有介绍以array为基础搭建的列表，支持自动扩容, 各种插入，删除速度都很快.<br>这里再介绍另一种方案, 链表, 也可以实现列表自动扩容.</p><h3 id="带链接的节点"><a href="#带链接的节点" class="headerlink" title="带链接的节点"></a>带链接的节点</h3><p>链表的核心组成是带链接的节点, 每个节点就像火车车厢, 有钩子连接下一节车厢.<br><a id="more"></a><br><img src="/images/408px-Singly-linked-list.png" alt=""><br>以int节点为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">        item = i;</span><br><span class="line">        next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>next</code>就是这个链接, 每一个节点就是其上一个节点的<code>next</code>.</p><h3 id="嵌套类-Nested-static-class"><a href="#嵌套类-Nested-static-class" class="headerlink" title="嵌套类 Nested static class"></a>嵌套类 Nested static class</h3><p>这个节点作为一个相对独立的数据结构, 我们更希望让他单独作为一个类来维护. 再另外创建一个名为<code>LinkedList</code>的class与用户进行交互. 这样还有另一个好处就是提供一个命名为<code>LinkedList</code>的类给用户交互，用户更直观地知道自己是在调用链表。如果直接与node类交互，用户可能会困扰. 但同时考虑到这个node类只有<code>LinkedList</code>会调用，所以我们可以把node类嵌套进<code>LinkedList</code>中，也就是嵌套类，在类中定义类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">XXX</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> XXX item;</span><br><span class="line">        <span class="keyword">public</span> OneNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OneNode</span><span class="params">(XXX i, OneNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OneNode first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> OneNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面是各种方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上定义使用了<a href="/NOTE-CS61B-data-structures-05-java-variable-types#通用数据类型-Generic">泛型</a>。声明<code>OneNode</code>实例<code>first</code>为私有变量, 是为了防止用户错误地摆弄链接指向，<code>private</code>和<code>public</code>的使用<a href="/NOTE-CS61B-data-structures-07-java-array-based-list#公共-vs-私有-Public-vs.-Private">参考</a>.</p><h4 id="静态与非静态嵌套类"><a href="#静态与非静态嵌套类" class="headerlink" title="静态与非静态嵌套类"></a>静态与非静态嵌套类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果嵌套类不需要使用<code>LinkedList</code>的任何实例方法或变量，那可以声明嵌套类为static。像静态类方法一样，静态嵌套类不能直接引用其外部类中定义的实例变量或方法, 只能通过实例对象引用来使用它们。同时外部类不能直接访问静态嵌套类的成员变量，但可以通过静态嵌套类来访问。</p><p>非静态嵌套类一般叫做内部类inner class。与实例方法和变量一样，内部类与其外部类的实例关联，并且可以直接访问该对象的方法和变量。另外，因为内部类与一个实例相关联，所以它不能自己定义任何静态成员。一个内部类的实例作为成员存在于其外部类的实例中, <code>InnerClass</code>的一个实例只能存在于<code>OuterClass</code>的一个实例中，并且可以直接访问它的外部实例的方法和变量。</p><p>作为OuterClass的成员，嵌套类可以声明为private，public，protected或package private。外部类只能声明为public或package private。更多详情<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" target="_blank" rel="noopener">参考官网</a>.</p><h3 id="补充必要的实例方法"><a href="#补充必要的实例方法" class="headerlink" title="补充必要的实例方法"></a>补充必要的实例方法</h3><p>插入的操作核心是改变链接指向， 比如原来是<code>A-&gt;B-&gt;D</code>, 要插入C, 则把<code>C.next</code>指向D,然后把<code>B.next</code>改为指向C, 变为<code>A-&gt;B-&gt;C-&gt;D</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 在列表开头插入 x. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">    first = <span class="keyword">new</span> OneNode(x, first);</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 返回列表第一个元素. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> XXX <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 在列表末尾插入 x. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    OneNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 把 p 当做指针顺藤摸瓜一直挪到列表末尾. */</span></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.next = <span class="keyword">new</span> OneNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 删除列表末尾的元素. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//自行补充...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，如果用户不小心把某节点x指回自己<code>x.next=x</code>,那就会进入死循环，所以我们需要把<code>OnoNode</code>实例<code>first</code>声明为私有变量已提供必要的保护。</p><h3 id="超载-overloading"><a href="#超载-overloading" class="headerlink" title="超载 overloading"></a>超载 overloading</h3><p>如果想初始化一个空列表, 可以:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 构造一个空列表. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fist = <span class="keyword">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即使原来已经有一个带参数x的构造器了, 这里再加一个同名构造器也没问题. 因为Java允许有不同参数的方法重名, 叫超载 overloading.</p><h3 id="程序不变条件-invariants"><a href="#程序不变条件-invariants" class="headerlink" title="程序不变条件 invariants"></a>程序不变条件 invariants</h3><p>上面超载了一个初始化空列表的构造器,加入初始化一个空列表，然后直接调用<code>addLast</code>，程序会报错, 因为<code>null</code>没有<code>next</code>.</p><p>有几种修改方法, 比如用<code>if else</code>这种加特例的方法. 这个方案虽然可以能解决问题，但是必要时应该避免加入特例代码, 毕竟有特例就意味着增加了复杂性和额外的代码特例记忆需求, 而人记忆是有限的.</p><p>一个更简洁（尽管不太显而易见）的解决方案是修改数据结构本身，让所有<code>LinkedList</code>，维护起来都没有差别，即使是空的。<br>如果把列表比做拉货的火车，那么货物就是列表承载的数据。一列火车如果只有车厢而没有车头（或者车尾）的话是没有意义的，因为没有动力。所以不管火车有没有拉货，有车厢还是没车厢，要称之为火车我们至少需要一个火车头。<br>我们可以通过创建一个特殊节点, 称为前哨节点 sentinel。前哨节点将保存一个值，具体数值我们不关心，它只是作为火车头，不装货。<br><img src="https://joshhug.gitbooks.io/hug61b/content/chap2/fig22/three_item_sentenlized_SLList.png" alt="" title="image from: https://joshhug.gitbooks.io/"><br>所以我们要修改<code>LinkedList</code>为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一个元素 （假如有的话）就是 sentinel.next. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">XXX</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OneNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OneNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造一个空列表. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造一个初始元素为x的列表. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(XXX x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> OneNode(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> OneNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于像<code>LinkedList</code>这样简单的数据结构来说，特例不多我们也许可以hold住, 一旦后续遇到像树tree等更复杂的数据结构，控制特例数量就显得极为重要了。所以现在就要培养自己的这方面的习惯，保持程序不变条件成立 Invariants。所谓 invariants 就是指数据结构任何情况下都是不会出错（除非程序有bug）.</p><p>具有前哨节点的<code>LinkedList</code>至少具有以下 invariants：</p><ul><li>列表默认存在前哨节点。</li><li>列表第一个元素（如果非空的话）总是在<code>sentinel.next.item</code>。</li><li>size变量始终是已添加的元素总数。</li></ul><p>不变条件使得代码的推敲变得更加容易，同时给程序员提供了能够确保代码正常工作的具体目标。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;链表-Linked-List&quot;&gt;&lt;a href=&quot;#链表-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;链表 Linked List&quot;&gt;&lt;/a&gt;链表 Linked List&lt;/h2&gt;&lt;p&gt;前面有介绍以array为基础搭建的列表，支持自动扩容, 各种插入，删除速度都很快.&lt;br&gt;这里再介绍另一种方案, 链表, 也可以实现列表自动扩容.&lt;/p&gt;
&lt;h3 id=&quot;带链接的节点&quot;&gt;&lt;a href=&quot;#带链接的节点&quot; class=&quot;headerlink&quot; title=&quot;带链接的节点&quot;&gt;&lt;/a&gt;带链接的节点&lt;/h3&gt;&lt;p&gt;链表的核心组成是带链接的节点, 每个节点就像火车车厢, 有钩子连接下一节车厢.&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>Git Bash 直接启动 sublime 或 atom 等编辑器以打开或新建文件</title>
    <link href="http://yoursite.com/Launch-editor-in-Gitbash/"/>
    <id>http://yoursite.com/Launch-editor-in-Gitbash/</id>
    <published>2018-01-01T00:00:00.000Z</published>
    <updated>2018-01-06T22:45:03.611Z</updated>
    
    <content type="html"><![CDATA[<p>程序员或者其他需要码字多的人，经常要使用编辑器如sublime、atom 和 Typora等。如果每次都要用鼠标点击才能用sublime打开文件，或者在编辑器中新建文件，那么就会有点麻烦！但你可以用一句命令解决！</p><p>配置在Git Bash中用各种文本编辑器打开文件或者直接新建文件。这里以atom为例。</p><h2 id="常规步骤"><a href="#常规步骤" class="headerlink" title="常规步骤"></a>常规步骤</h2><ol><li>打开Git Bash并<code>cd</code>到你的目标文件夹, 或者直接在目标文件中右键打开Git Bash.</li><li><code>atom xxx.md</code> 就会在弹出的atom窗口中打开名为<code>xxx.md</code>的markdown文件, 如果没有这个文件, 会自动创建一个.</li><li>适用于其他类型文件, 如<code>.java</code>等.</li><li>如果想用sublime, 可以用<code>subl xxx.java</code>, 同理notepad++ 可以用 <code>notepad++ xxx.java</code>等。 (若出现错误,看下面)</li></ol><h2 id="若系统无法识别命令"><a href="#若系统无法识别命令" class="headerlink" title="若系统无法识别命令"></a>若系统无法识别命令</h2><p>一般使用sublime或者notepad++的用户, 可能会出现<code>error: 系统无法识别命令...</code>之类的, 可以这么解决:</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>新建一个文件命名为<code>subl</code>（注意不能有后缀名），内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">&quot;D:\Sublime Text 3\sublime_text.exe&quot; $1 &amp;</span><br></pre></td></tr></table></figure></p><p>第一行指明这是个 shell 脚本.<br>第二行的字符串是sublime的安装目录, 示例只是我电脑的目录, 注意这里要改为你自己的目录,<br>第二行的$1 是取的命令之后输入的参数<br>第二行的&amp;是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash</p><p>文件保存到 <code>C:\Program Files (x86)\Git\mingW32\bin</code> 目录下(你的git目录可能与我的不一样，注意改成你自己的)</p><p>同理适用于其他编辑器，比如用<code>chrome</code>打开<code>.html</code>文件等。如果不想每次都新建一个文件，可以用下面的方法2。</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><ol><li>找到 <code>C:\Users\你的计算机名</code>目录，如果你的计算机名是Administrator，那么你就要去<code>C:\Users\Administrator</code>目录下, 这里一般存放着windows系统的<code>我的文档, 桌面</code>等文件夹.</li><li>在该目录下用Git Bash输入<code>notepad .bashrc</code>, 这会用windows记事本新建并打开一个文件<code>.bashrc</code>，这个文件没有名称只有后缀名。<code>.bashrc</code>里面可以给Git Bash设置命令的别名, 设置路径等。</li><li>在.bashrc文件加入下面一行文本<code>alias notepad++=&quot;/D/Notepad++/notepad++.exe&quot;</code>, 这里你需要修改为你电脑的安装路径。<code>alias</code>就是别名的意思，当我们执行<code>notepad++</code>的时候，实际执行的是<code>=</code>后面的语句.</li><li>重新打开Git Bash, 设置才能生效，如果不想关掉在打开的话，可以直接在bash下输入<code>source ~/.bashrc</code>就可以立刻加载修改后的设置，设置立即生效。<br>现在在bash下输入<code>notepad++ test.py</code>, 就直接打开了notepad++并创建了这个叫test的Python文件。这里的别名不一定非要取<code>notepad++</code>，随你想叫什么都行。</li></ol><p>同理也可以扩展到别的文本编辑器，<code>alias atom=&quot;atom的路径&quot;</code>, <code>alias sublime=&quot;sublime的路径&quot;</code>等. 最后还要注意一点，上面所说的路径最好不要有空格，括号等，否则会造成命令无效.</p><p><code>.bashrc</code>还有很多有用的配置,可以根据需要进行扩展. 比如很多程序猿会选择修改删除命令<code>rm</code>(此命令不加任何参数的话，会直接删除文件, 可能会造成误删的后果)。这个时候可以给rm加个参数-i，意为在删除的时候给出提示。在文件<code>.bashrc</code>里添加这行代码<code>alias rm=&quot;rm -i&quot;</code>。但这里不建议这么做，因为<code>rm=&quot;rm -i&quot;</code>是一个定时炸弹，在使用它之后，习惯了之后, 你会本能地期望<code>rm</code>在删除文件之前会提示你。但是，总有一天你可能会用一个没有rm alias 别名的系统, 这时若你也直接随手一甩<code>rm</code>, 本以为会有提示, 结果发现数据真的被删除了。</p><p>在任何情况下，预防文件丢失或损坏的好方法就是进行备份。</p><p>所以如果你想个性化删除命令, 最好不要动<code>rm</code>，而是创建属于你的命令，比如<code>trash, myrm, delete</code>等, 用<code>alias trash=&#39;/bin/rm -irv&#39;</code>会创建一条把文件放入垃圾回收站的命令.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序员或者其他需要码字多的人，经常要使用编辑器如sublime、atom 和 Typora等。如果每次都要用鼠标点击才能用sublime打开文件，或者在编辑器中新建文件，那么就会有点麻烦！但你可以用一句命令解决！&lt;/p&gt;
&lt;p&gt;配置在Git Bash中用各种文本编辑器打开文
      
    
    </summary>
    
      <category term="提高效率" scheme="http://yoursite.com/categories/%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Git Bash" scheme="http://yoursite.com/tags/Git-Bash/"/>
    
      <category term="Sublime" scheme="http://yoursite.com/tags/Sublime/"/>
    
      <category term="Atom" scheme="http://yoursite.com/tags/Atom/"/>
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 07 用数组构建数据列表 list - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-07-java-array-based-list/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-07-java-array-based-list/</id>
    <published>2017-12-29T00:00:00.000Z</published>
    <updated>2018-03-20T22:40:13.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h2><p>前面说到Java的数组无法更改长度，那么也就无法实现插入或者删除数组成员。Java提供了功能更丰富的数据结构 - 列表（<a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="noopener">list</a>）。所谓列表，即有序的集合（序列），用户可以精确地控制每个元素插入到列表中的哪个位置。用户可以通过整数索引（列表中的位置）来访问元素，并搜索列表中的元素（详细可进一步参考<a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="noopener">oracle官网</a>）。<br><a id="more"></a><br>这里我们尝试以java的array为基础实现一个列表，目标是实现自动扩容 (Java中的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html" target="_blank" rel="noopener">ArrayList</a>不仅仅有自动扩容, 也继承了[List]的其他功能)。在探索的过程中, 可以顺带学习很多相关的内容.<br>使用自上而下的设计思想搭建一个框架:<br>先写出最基础的部分, 也就是一个构造器，前面学过了整数数组，我们直接拿来用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Array based list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// index   0 1  2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">// items: [6 9 -1 2 0 0 0 0 ...]</span></span><br><span class="line"><span class="comment">// size: 5</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造一个初始容量100的数组，初始有效数据成员为0. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下面添加其他方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后思考我们需要什么功能，把功能需求转化为实例方法instance method的形式，先把方法的外壳描绘出来，注释上该方法的功能（目的），输入值，返回值是什么之类的。具体的功能实现可以先空着，之后一步步丰富。</p><h3 id="公共-vs-私有-Public-vs-Private"><a href="#公共-vs-私有-Public-vs-Private" class="headerlink" title="公共 vs 私有 Public vs. Private"></a>公共 vs 私有 Public vs. Private</h3><p>在上面的代码块中，可以看到 items 和 size 都被声明为 private 私有变量, 这样就只能被所在的java文件内调用.</p><p>私有变量和方法的设计初衷是服务于程序的内部功能实现, 而不是用来和外部程序(用户)进行交互的. 设置成私有, 可以避免这些变量和方法被外部程序直接调用, 避免用户通过不恰当/容易出错的方式修改某些变量. 在程序说明文档中, 一般也会明确说明程序提供什么公共变量和方法给用户调用.</p><p>因此我们这里也提供几个 public 方法让用户调用, 这样用户就能按照我们设计的方式来访问数据。分别是<code>getLast()</code> - 访问列表最后一个元素，<code>get(int i)</code>访问第<code>i</code>个元素, 和<code>size()</code>访问列表的大小.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 程序内的方法可以访问 private 变量 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 返回列表末尾的值. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 返回第 i 个值 (0 是第一个). */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 返回列表元素长度. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><p>我们不仅希望我们的列表可以存整数，也可以存其他类型的数据，可以通过泛型解决，泛型的介绍参考<a href="/NOTE-CS61B-data-structures-05-java-variable-types#通用数据类型-Generic">这篇文章</a>.</p><p>泛型数组跟前面介绍的泛型示例有一个重要的语法差异：Java不允许我们创建一个通用对象的数组，原因这里不细展开。</p><p>假如我们用<code>Item</code>来标识泛型, 那么在上面的列表类中构建泛型数组时, 我们不能用<code>items = new Item[8];</code>, 而要用<code>items = (Item []) new Object[8];</code>, 即使这样也会产生一个编译警告，但先忍着, 后面会更详细地讨论这个问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造一个初始容量100的数组，初始有效数据成员为0.  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (Item[]) <span class="keyword">new</span> Object[<span class="number">100</span>]; <span class="comment">//会有编译警告, 暂时不管, 后面会解释</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数组扩容-Resize"><a href="#数组扩容-Resize" class="headerlink" title="数组扩容 Resize"></a>数组扩容 Resize</h3><p>一个列表应该支持基本的插入和删除数据的操作，但是因为数组本身无法更改长度，所以我们就需要一个方法，在给数组在插入新数据时，先检查长度容量是否足够，如果不够，那么就要增加长度。<br>我们考虑简单的情况, 即需要在数组末尾插入或者删除数据怎么办</p><p>插入元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 把 X 插入到列表末尾. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 检查长度容量是否足够，如果不够，那么就要增加长度 */</span></span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">            Item[] temp = (Item[]) <span class="keyword">new</span> Object[size + <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(items, <span class="number">0</span>, temp, <span class="number">0</span>, size);</span><br><span class="line">            items = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建新array并把旧数据复制过去的过程通常称为“resizing”。其实用词不当，因为数组实际上并没有改变大小，只是把小数组上的数据复制到大数组上而已。</p><p>为了让代码更易于维护，可以把上面的代码中负责大小调整的部分包装在一个独立的method中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 改变列表容量, capacity为改变后的容量. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    Item[] temp = (Item[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, temp, <span class="number">0</span>, size);</span><br><span class="line">    items = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 把 X 插入到列表末尾. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    items[size] = x;</span><br><span class="line">    size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删除元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 删去列表最后一个值，并返回该值  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Item x = getLast();</span><br><span class="line">    items[size - <span class="number">1</span>] = <span class="keyword">null</span>; <span class="comment">// 曾经引用“删除”的元素的内存地址被清空</span></span><br><span class="line">    size = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上即使没有<code>items[size - 1] = null;</code>,也可以达到删除元素的目的.<br>删除对改存储的对象的引用, 是为了避免“loitering”。所谓 loitering，可以理解为占着茅坑不拉屎的对象，它们已经没啥用了，却还是占用着内存。如果这个对象是些几十兆的高清图片，那么就会很消耗内存。这也是为什么安卓手机越用越慢的一个原因。</p><p>当引用/内存地址丢失时，Java会销毁对象。如果我们不清空引用，那么Java将不会垃圾回收这些本来预计要删除的对象, 因为它们实际还被列表引用着。</p><h4 id="扩容效率分析"><a href="#扩容效率分析" class="headerlink" title="扩容效率分析"></a>扩容效率分析</h4><p>我们直觉也会感觉到，如果按照现在的设计，即每插入一个新元素，就重新复制一遍数组，这样随着数组越来越大，效率肯定会越来越差。事实上也是这样，如果数组目前长度是100个内存块，那么插入1000次，需要创建并填充大约50万个内存块（等差数列求和N(N+1)/2，101+102+…+1000 ≈ 500000）。但假如我们第一次就扩容到1000，那么就省却了很多运算消耗。可惜我们不知道用户需要插入多少数据，所以要采取其他方法-几何调整。也就是与其按照<code>size + FACTOR</code>这样的速率增加容量, 不如按照<code>size * RFACTOR</code>成倍扩容, 前者的增加速率为1, 后者为 RFACTOR, 只要设置 RFACTOR 大于1, 就能减少扩容的次数.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 把 X 插入到列表末尾. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size * RFACTOR); <span class="comment">//用 RFACTOR 作为因子扩容数组,</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    items[size] = x;</span><br><span class="line">    size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目前我们解决了时间效率问题, 但代价是需要更大的内存空间, 也就是空间效率下降了. 假设我们插入了十亿个item，然后再删去九亿九千万个项目。在这种情况下，我们将只使用10,000,000个内存块，剩下99％完全没有使用到。</p><p>为了解决这个问题，我们可以在数组容量利用率比较低时把容量降下来. 定义利用率 R 为列表的大小除以items数组的长度。一般当R下降到小于0.25时，我们将数组的大小减半。</p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>比如排序等, 在后面介绍链表的文章中再讨论.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表-List&quot;&gt;&lt;a href=&quot;#列表-List&quot; class=&quot;headerlink&quot; title=&quot;列表 List&quot;&gt;&lt;/a&gt;列表 List&lt;/h2&gt;&lt;p&gt;前面说到Java的数组无法更改长度，那么也就无法实现插入或者删除数组成员。Java提供了功能更丰富的数据结构 - 列表（&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;list&lt;/a&gt;）。所谓列表，即有序的集合（序列），用户可以精确地控制每个元素插入到列表中的哪个位置。用户可以通过整数索引（列表中的位置）来访问元素，并搜索列表中的元素（详细可进一步参考&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;oracle官网&lt;/a&gt;）。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 06 array 数组 - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-06-java-array/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-06-java-array/</id>
    <published>2017-12-27T00:00:00.000Z</published>
    <updated>2018-03-20T22:40:26.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><p>数组是一种特殊的对象，有一个固定的数组长度参数N，由一连串（N个）连续的带编号的内存块组成，每个都是相同的类型(不像Python可以包含不同类型)，索引从0到N-1编号。A[i]获得数组A的第i个元素。这与普通的类实例不同，类实例有具体变量名命名的内存块。</p><h3 id="数组实例化，包含对象的数组-Array-Instantiation-Arrays-of-Objects"><a href="#数组实例化，包含对象的数组-Array-Instantiation-Arrays-of-Objects" class="headerlink" title="数组实例化，包含对象的数组 Array Instantiation, Arrays of Objects"></a>数组实例化，包含对象的数组 Array Instantiation, Arrays of Objects</h3><p>要创建最简单的整数数组, 有三种方式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>]; <span class="comment">//创建一个指定长度的数组，并用默认值（0）填充每个内存块。</span></span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>&#125;; <span class="comment">//创建一个合适大小的数组，以容纳指定的初始值</span></span><br><span class="line"><span class="keyword">int</span> [] z = &#123;<span class="number">9</span>，<span class="number">10</span>，<span class="number">11</span>，<span class="number">12</span>，<span class="number">13</span>&#125;; <span class="comment">//省略了new，只能结合变量声明使用。</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>创建一组实例化对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* Create an array of two dogs. */</span></span><br><span class="line">        Dog[] dogs = <span class="keyword">new</span> Dog[<span class="number">2</span>];</span><br><span class="line">        dogs[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="number">8</span>);</span><br><span class="line">        dogs[<span class="number">1</span>] = <span class="keyword">new</span> Dog(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">/* Yipping will result, since dogs[0] has weight 8. */</span></span><br><span class="line">        dogs[<span class="number">0</span>].makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意到new有两种不同的使用方式：一种是创建一个可以容纳两个Dog对象的数组，另外两个创建各个实际的Dog实例。</p><p>数组复制<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>); <span class="comment">//效果类似于Python的`x[3:5] = b[0:2]`</span></span><br></pre></td></tr></table></figure></p><p><code>System.arraycopy</code>的五个参数分别代表：</p><ol><li>待复制的数组(源)</li><li>源数组复制起点</li><li>目标数组</li><li>目标数组粘贴起点</li><li>有多少项要复制</li></ol><p>2D数组<br>Java的二维数组实质上是一数组的数组, 即每一个数组元素里面也是一个数组。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] matrix; <span class="comment">//声明一个引用数组的数组</span></span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][]; <span class="comment">//创建四个内存块, 用默认null值填充, 之后用于储存对整数数组的引用, 即地址,</span></span><br><span class="line"><span class="keyword">int</span>[] rowZero = matrix[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 实例化整数数组, 把其地址/引用分别赋值给/储存到 matrix 的第N个内存块*/</span></span><br><span class="line">matrix[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">matrix[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">matrix[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">matrix[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] rowTwo = matrix[<span class="number">2</span>];</span><br><span class="line">rowTwo[<span class="number">1</span>] = -<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建四个内存块, 其中每个被引用的整数数组长度为4,每个元素都是0.*/</span></span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] matrixAgain = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组-Array&quot;&gt;&lt;a href=&quot;#数组-Array&quot; class=&quot;headerlink&quot; title=&quot;数组 Array&quot;&gt;&lt;/a&gt;数组 Array&lt;/h2&gt;&lt;p&gt;数组是一种特殊的对象，有一个固定的数组长度参数N，由一连串（N个）连续的带编号的内存块组成，每个都是相同的类型(不像Python可以包含不同类型)，索引从0到N-1编号。A[i]获得数组A的第i个元素。这与普通的类实例不同，类实例有具体变量名命名的内存块。&lt;/p&gt;
&lt;h3 id=&quot;数组实例化，包含对象的数组-Array-Instantiation-Arrays-of-Objects&quot;&gt;&lt;a href=&quot;#数组实例化，包含对象的数组-Array-Instantiation-Arrays-of-Objects&quot; class=&quot;headerlink&quot; title=&quot;数组实例化，包含对象的数组 Array Instantiation, Arrays of Objects&quot;&gt;&lt;/a&gt;数组实例化，包含对象的数组 Array Instantiation, Arrays of Objects&lt;/h3&gt;&lt;p&gt;要创建最简单的整数数组, 有三种方式:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//创建一个指定长度的数组，并用默认值（0）填充每个内存块。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [] &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//创建一个合适大小的数组，以容纳指定的初始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [] z = &amp;#123;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//省略了new，只能结合变量声明使用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构 - Java | 05 数据类型 - CS61B Berkeley</title>
    <link href="http://yoursite.com/NOTE-CS61B-data-structures-05-java-variable-types/"/>
    <id>http://yoursite.com/NOTE-CS61B-data-structures-05-java-variable-types/</id>
    <published>2017-12-26T00:00:00.000Z</published>
    <updated>2018-04-25T15:42:19.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><a href="https://zh.wikibooks.org/zh-hans/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">数据类型</a>是程序设计语言描述事物、对象的方法。Java数据类型分为基本类型（内置类型）和引用类型(扩展类型）两大类。基本类型就是Java语言本身提供的基本数据类型，比如，整型数，浮点数，字符，布尔值等等。而引用类型则是Java语言根据基本类型扩展出的其他类型，Java要求所有的引用扩展类型都必须包括在类定义里面，这就是Java为什么是面向对象编程语言的原因…<br><a id="more"></a><br>上面的定义有点抽象，要理解数据类型，需要先理解一个问题: 神秘的海象问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 尝试预测下面的代码运行时会发生什么。</span></span><br><span class="line"><span class="comment">b的变化是否会影响a？提示：类似Python。 */</span></span><br><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 同样尝试预测下面的代码运行时会发生什么。</span></span><br><span class="line"><span class="comment">x的改变是否影响y？ */</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">"x is: "</span> + x);</span><br><span class="line">System.out.println(<span class="string">"y is: "</span> + y);</span><br></pre></td></tr></table></figure><p>首先给出答案, b的变化会影响a, 但x的改变不影响y，具体见<a href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+PollQuestions+%7B%0A+++public+static+void+main%28String%5B%5D+args%29+%7B%0A++++++Walrus+a+%3D+new+Walrus%281000,+8.3%29%3B%0A++++++Walrus+b%3B%0A++++++b+%3D+a%3B%0A++++++b.weight+%3D+5%3B%0A++++++System.out.println%28a%29%3B%0A++++++System.out.println%28b%29%3B++++++%0A%0A++++++int+x+%3D+5%3B%0A++++++int+y%3B%0A++++++y+%3D+x%3B%0A++++++x+%3D+2%3B%0A++++++System.out.println%28%22x+is%3A+%22+%2B+x%29%3B%0A++++++System.out.println%28%22y+is%3A+%22+%2B+y%29%3B++++++%0A+++%7D%0A+++%0A+++public+static+class+Walrus+%7B%0A++++++public+int+weight%3B%0A++++++public+double+tuskSize%3B%0A++++++%0A++++++public+Walrus%28int+w,+double+ts%29+%7B%0A+++++++++weight+%3D+w%3B%0A+++++++++tuskSize+%3D+ts%3B%0A++++++%7D%0A%0A++++++public+String+toString%28%29+%7B%0A+++++++++return+String.format%28%22weight%3A+%25d,+tusk+size%3A+%25.2f%22,+weight,+tuskSize%29%3B%0A++++++%7D%0A+++%7D%0A%7D&amp;mode=edit" target="_blank" rel="noopener">可视化过程</a>.<br>这里的差别虽然微妙, 但其背后的原理对于数据结构的效率来说是非常重要的，对这个问题的深入理解也将引导我们写出更安全，更可靠的代码。</p><h3 id="基本类型-Primative-Types"><a href="#基本类型-Primative-Types" class="headerlink" title="基本类型 Primative Types"></a>基本类型 Primative Types</h3><p>计算机中的所有信息都以一系列1和0的形式存储在内存中，这些二进制的0和1就是比特位（bits）。比如72和“H”在内存一般以01001000的形式存储，对他们的形式是一样的。一个引申问题就是：Java代码如何解释01001000，怎么知道应该解释为72还是“H”？ 通过类型types，预先定义好类型即可, 以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> x = <span class="string">'H'</span>;</span><br><span class="line"><span class="keyword">int</span> y = x;</span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br></pre></td></tr></table></figure></p><p>会分别得到“H”和72. 在这种情况下，x和y变量都包含几乎相同的bits，但是Java解释器在输出时对它们进行了不同的处理。</p><p>Java有8种基本类型：byte，short，int，long，float，double，boolean和char。</p><h4 id="变量声明-Declaring-Variables"><a href="#变量声明-Declaring-Variables" class="headerlink" title="变量声明 Declaring Variables"></a>变量声明 Declaring Variables</h4><p>计算机的内存可以视为包含大量用于存储信息的内存比特位，每个位都有一个唯一的地址。现代计算机可以使用许多这样的位。 当你声明一个特定类型的变量时，Java会用一串<strong>连续</strong>的内存位存储它。例如，如果你声明一个int，你会得到一个长度32的内存list，里面有32bits。Java中的每个数据类型都有不同的比特数。</p><p>除了留出内存空间外，Java解释器还会在一个内部表中创建一个条目，将每个变量名称映射到内存块中第一个位置（表头list head）。 例如，如果声明了int x和double y，那么Java可能会决定使用计算机内存的352到384位来存储x，而20800到20864位则用来存储y。然后解释器将记录int x从352开始，y从20800开始。</p><p>在Java语言里无法知道变量的具体内存位置，例如你不能以某种方式发现x在位置352。不像C++这样的语言，可以获取一段数据的确切地址。Java的这个特性是一个折衷！隐藏内存位置自然意味着程序猿的控制权更少，就无法做<a href="http://www.informit.com/articles/article.aspx?p=2246428&amp;seqNum=5" target="_blank" rel="noopener">某些类型的优化</a>。但是，它也避免了一大类非常棘手的<a href="http://www.informit.com/articles/article.aspx?p=2246428&amp;seqNum=1" target="_blank" rel="noopener">编程错误</a>。在现在计算成本如此低廉的时代，不成熟的优化还不如少点bug。</p><p>当声明一个变量时，Java不会在预留的内存位置中写入任何内容, 也即没有默认值。因此，如果没有赋值, Java编译器会阻止你使用变量。</p><p>以上只是内存分配的简要说明, 堆和栈的介绍可以参考我的CS106B C++笔记。</p><h3 id="引用类型-Reference-Types"><a href="#引用类型-Reference-Types" class="headerlink" title="引用类型 Reference Types"></a>引用类型 Reference Types</h3><p>所有基本数据类型之外的类型都是引用类型。<br>引用类型顾名思义，就是对对象的引用。在java中内存位置是不开放给程序员的, 但我们可以通过引用类型访问内存中某处对象。所有引用类型都是 java.lang.Object 类型的子类。</p><h4 id="对象实例化-Object-Instantiation"><a href="#对象实例化-Object-Instantiation" class="headerlink" title="对象实例化 Object Instantiation"></a>对象实例化 Object Instantiation</h4><p>对象实例化：当我们使用new（例 new Dog）实例化对象时，Java首先为类的每个实例变量分配一串长度合适的bits位，并用缺省值填充它们。然后，构造函数通常（但不总是）用其他值填充每个位置.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Walrus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> tuskSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Walrus</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">double</span> ts)</span> </span>&#123;</span><br><span class="line">          weight = w;</span><br><span class="line">          tuskSize = ts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用<code>new Walrus(1000, 8.3)</code>创建一个Walrus实例后, 我们得到分别由一个32位(int weight = 1000)和一个64位(double tuskSize = 8.3)的内存块组成的实例：<br>通过程序<a href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+PollQuestions+%7B%0A+++public+static+void+main%28String%5B%5D+args%29+%7B%0A++++++Walrus+a+%3D+new+Walrus%281000,+8.3%29%3B%0A++++++Walrus+b%3B%0A++++++b+%3D+a%3B%0A++++++b.weight+%3D+5%3B%0A++++++System.out.println%28a%29%3B%0A++++++System.out.println%28b%29%3B++++++%0A%0A++++++int+x+%3D+5%3B%0A++++++int+y%3B%0A++++++y+%3D+x%3B%0A++++++x+%3D+2%3B%0A++++++System.out.println%28%22x+is%3A+%22+%2B+x%29%3B%0A++++++System.out.println%28%22y+is%3A+%22+%2B+y%29%3B++++++%0A+++%7D%0A+++%0A+++public+static+class+Walrus+%7B%0A++++++public+int+weight%3B%0A++++++public+double+tuskSize%3B%0A++++++%0A++++++public+Walrus%28int+w,+double+ts%29+%7B%0A+++++++++weight+%3D+w%3B%0A+++++++++tuskSize+%3D+ts%3B%0A++++++%7D%0A%0A++++++public+String+toString%28%29+%7B%0A+++++++++return+String.format%28%22weight%3A+%25d,+tusk+size%3A+%25.2f%22,+weight,+tuskSize%29%3B%0A++++++%7D%0A+++%7D%0A%7D&amp;mode=edit" target="_blank" rel="noopener">可视化过程</a>)来更好地理解. 当然在Java编程语言的实际实现中，实例化对象时都有一些额外的内存开销, 这里不展开.</p><p>通过 new 实例化对象，new 会返回该对象的内存地址给我们，但假如我们没有用一个变量去接收这个地址，那么我们就无法访问这个对象。之后该对象会被作为垃圾回收。</p><h4 id="引用变量声明-Reference-Variable-Declaration"><a href="#引用变量声明-Reference-Variable-Declaration" class="headerlink" title="引用变量声明 Reference Variable Declaration"></a>引用变量声明 Reference Variable Declaration</h4><p>前面有提到，我们需要声明变量来接受实例化的对象在内存中的地址。当声明任何引用类型的变量（比如array, 前面的Dog类等）时，Java都会分配一串64位的内存位置. 这个64位的内存块仅用于记录变量的内存<strong>地址</strong>, 所谓内存地址, 可以理解为内存(房子)的编号(地址), 一般是内存块的表头位置的64位表达式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Walrus someWalrus; <span class="comment">// 创建一个64位的内存位置</span></span><br><span class="line">someWalrus = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>); <span class="comment">//创建一个新的实例</span></span><br><span class="line"><span class="comment">/** 内存地址由 new 返回, 并被复制/赋值给 someWalrus 对应的内存位置</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>比如, 假设weight是从内存位5051956592385990207开始存储的，后面连续跟着其他实例变量，那么就可以把5051956592385990207存储在Dog变量中。5051956592385990207由64位的二进制0100011000011100001001111100000100011101110111000001111000111111表达，这样smallDog的内存就可以抽象的理解为一个表<br><code>smallDog: 0100011000011100001001111100000100011101110111000001111000111111 -&gt; 具体存放实例的内存(Walrus: weight=1000, tuskSize=8.3)</code><br>‘-&gt;’可以理解为指针.</p><p><a href="#array-instantiation-arrays-of-objects">实例化数组</a>在前面有介绍过，数组array是引用类型，是对象，故数组变量只是存储内存位置。</p><p>前面有提到，如果丢失了引用变量存储的内存地址，那么该地址对应的对象就找不回来了。例如，如果一个特定的 Walrus 地址的唯一副本存储在x中，那么<code>x = null</code>这行代码将删去地址，我们则丢失了这个 Walrus 对象。这也不一定是坏事，很多时候在完成了一个对象后就不在需要了，只需简单地丢弃这个参考地址就可以了。</p><h3 id="Java-等值规则-Rule-of-Equals"><a href="#Java-等值规则-Rule-of-Equals" class="headerlink" title="Java 等值规则 Rule of Equals"></a>Java 等值规则 Rule of Equals</h3><p><strong>对于<code>y = x</code>，Java解释器会将x的位拷贝到y中</strong>,这个规则适用于java中任何使用<code>=</code>赋值的语法, 是理解开头的”神秘的海象”问题的关键.</p><ul><li><p>基本类型变量的位, 存储赋值的值（基本类型）在内存中值(具体位数取决于具体的类型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>; <span class="comment">// 此时是把内存中的某一个地址 p 复制给 x</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x; <span class="comment">// y 也指向 p</span></span><br><span class="line">x = <span class="number">2</span>; <span class="comment">// 把一个新的内存地址 new p 复制给x, 但y还是指向原来的p</span></span><br></pre></td></tr></table></figure><p>  x的位存储的是基本类型<code>int 5</code>(32 bits), <code>x = 2</code>是把新的基本类型<code>int 2</code>复制给x, 但y还是指向原来的<code>int 5</code>， 所以y没变化。</p></li><li><p>引用类型 reference type 变量的位, 存储赋值的值（引用类型）在内存中的地址(固定的64 bits)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dog a = <span class="keyword">new</span> Dog(<span class="number">5</span>); <span class="comment">// 创建一个64位的内存位, 并赋值一个新的实例 p</span></span><br><span class="line">Dog b; <span class="comment">// 仅创建一个64位的内存位, 没有引用内存地址(null)</span></span><br><span class="line">b = a; <span class="comment">// 把a的位（是实例 p 的内存地址）复制给b, 这样 b 也是指向实例 p</span></span><br><span class="line">b.weight = <span class="number">21</span>; <span class="comment">// 此时修改b, 会改写b指向的内存实例 p</span></span><br></pre></td></tr></table></figure><p>  a和b只存储地址, 而它们的地址都指向相同的实例；<br>  如果对 b 的修改本质是对 p的修改, 那么输出<code>a.weight</code>的时候, 就会变成<code>21</code>.</p></li></ul><h3 id="参数传递-Parameter-Passing"><a href="#参数传递-Parameter-Passing" class="headerlink" title="参数传递 Parameter Passing"></a>参数传递 Parameter Passing</h3><p>给函数传递参数，本质上也是赋值操作，参考上面的等值规则，也即复制这些参数的bits给函数，也称之为pass by value。Java的参数传递都是pass by value。至于传递过去的参数会不会因为函数内部的操作而更改，其判断原理在上面的<a href="#java-等值规则-rule-of-equals">等值规则</a>已经阐明。</p><h3 id="通用数据类型-Generic"><a href="#通用数据类型-Generic" class="headerlink" title="通用数据类型 Generic"></a>通用数据类型 Generic</h3><p>在定义类的时候，有时候我们可能希望这个类能够接受任何类型的数据，而不仅仅是限定了基本类型中的任何一种。比如我们想实现一个类似PPT的类，自然需要这个PPT类能够接收各种类型的字符，数字，并呈现出来。这个时候就需要使用泛型 Generic, 也即通用数据类型。</p><p>在2004年，Java的设计者在语言中加入了泛型，使​​我们能够创建包含任何引用类型的数据结构（引用类型和基本类型的解释参考<a href="/NOTE-CS61B-data-structures-05-java-variable-types#引用类型-Reference-Types">另一篇文章</a>, ）。方法就是在类声明的类名后面，使用一个任意的占位符，并用尖括号括住<code>&lt;随便什么字符&gt;</code>。然后，在任何你想使用泛型的地方，改用占位符。<br>比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PPT</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PPT</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PPT</span>&lt;<span class="title">xxx</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PPT</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> xxx item;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>&lt;xxx&gt;</code>里面的名称并不重要, 改成其他也行, 只是一个标识符, 用来接受参数, 当用户实例化这个类时, 必须使用特殊的语法<code>PPT&lt;String&gt; d = new PPT&lt;&gt;(&quot;hello&quot;);</code></p><p>由于泛型仅适用于引用类型，因此我们不能将基本类型<code>int</code>等放在尖括号内。相反，我们使用基本类型的引用版本，比如对于int, 用 Integer，<code>PPT&lt;Integer&gt; d = new PPT&lt;&gt;(&quot;10&quot;);</code></p><p>总结使用方法:</p><ul><li>在一个实现某数据结构的<code>.java</code>文件中，在类名后面, 只指定泛型类型一次。</li><li>在其他使用该数据结构的java文件中，声明实例变量时要指定所需的类型。</li><li>如果您需要在基本类型上实例化泛型，请使用<code>Integer, Double, Character, Boolean, Long, Short, Byte, Float</code>，而不是其基本类型。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikibooks.org/zh-hans/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据类型&lt;/a&gt;是程序设计语言描述事物、对象的方法。Java数据类型分为基本类型（内置类型）和引用类型(扩展类型）两大类。基本类型就是Java语言本身提供的基本数据类型，比如，整型数，浮点数，字符，布尔值等等。而引用类型则是Java语言根据基本类型扩展出的其他类型，Java要求所有的引用扩展类型都必须包括在类定义里面，这就是Java为什么是面向对象编程语言的原因…&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机科学" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="cs61b" scheme="http://yoursite.com/tags/cs61b/"/>
    
  </entry>
  
</feed>
