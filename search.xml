<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AI学习路径和资料]]></title>
    <url>%2F2017%2F12%2F17%2Fai%2F</url>
    <content type="text"><![CDATA[简介记录学习CS和AI的学习笔记，内容包含基础知识的总结以及编程实现的整理。 Language:English 目录 人工智能 机器学习 深度学习 自然语言处理 计算机视觉 机器人 大数据 MapReduce 人工智能机器学习 Coursera Machine Learning， 吴恩达的简化版机器学习 Machine Learning, 吴恩达的机器学习课程 这个比较深入 Machine Learning Engineer nanodegree, Udacity Deep Learning, 吴恩达的深度学习课程 Neural Networks for Machine Learning, Hinton的神经网络课程 深度学习 Deep learning, Coursera Machine Learning Practical 每个lab的答案在下一个lab branch里，即lab1的答案可以在lab2 branch里面看到。这个代码全部用Python class，比coursera的难度高点。 自然语言处理 自然语言处理, 斯坦福 加速自然语言处理, 爱丁堡大学 深度学习处理自然语言，斯坦福 计算机视觉 图像识别：卷积神经网络，李飞飞，斯坦福 机器人 机器人入门，斯坦福 大数据MapReduce Hadoop和MapReduce入门，优达学城 MapReduce极限计算，爱丁堡大学 并行计算入门：MPI, openMP, and CUDA, 斯坦福 参考:Guide to technical development from Google educationOS Free Programming Books]]></content>
      <categories>
        <category>学习笔记</category>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS学习路径和资料]]></title>
    <url>%2F2017%2F12%2F16%2Fcs%2F</url>
    <content type="text"><![CDATA[简介记录学习CS的学习笔记，内容包含基础知识的总结以及编程实现的整理。 Language:English 目录 CS入门 学习编写(至少)一种面向对象编程语言(C ++，Java®，Python®) 学习其他编程语言 测试你的代码 逻辑推理和离散数学 深入了解算法和数据结构 了解计算机操作系统 CS入门现在的入门课基本都是用Python语言。 计算机科学导论，优达学城 CS50x 哈佛，语言包括C，Python，SQL和JavaScript加CSS和HTML 面向对象编程语言一般而言，建议先学Java，Python，再学C++。 这三种语言都基本掌握后，再根据自身的职业需求，选择其中一个语言（或者其他语言）进一步深入练习。因为学校课程主要以Python为主，所以目前我还是主要深入学习Python，这是我的Python学习笔记。 面向初学者程序员的在线资源： 编程方法学，斯坦福CS106A，Java 伯克利大学CS 61A计算机程序的结构与解读，Python Java编程简介，MIT Google的Python Class Google的C ++类 面向有经验的程序员的在线资源： 数据结构，伯克利大学 CS 61B，Java 计算机程序设计，Udacity，Python 抽象编程，斯坦福 CS106B，C ++最新作业：http://web.stanford.edu/class/cs106b/ 《数据结构与算法分析:C++描述》, Mark A. Weiss 其他编程语言根据实际需要自行选择一种或多种学习： JavaScript® CSS＆HTML Ruby® Lua PHP® Haskell Perl® Go Shell®脚本 Lisp® Scheme® 一些在线资源： CS50x 哈佛，语言包括C，Python，SQL和JavaScript加CSS和HTML Codecademy JavaScript Bento JavaScript Learning Track(Bento) Egghead.io 学习如何编程：JavaScript - Epicodus Inc. 学习：查询 CSS ＆ HTML Bento CSS Learning Track(Bento) Bento HTML Learning Track(Bento) 用破折号建立个人网站 使用Webflow构建响应式网站 使用骨架构建SaaS着陆页 建立动态网站 在1小时内编写个人启动页面：实用HTML和CSS简介 学习如何编程：CSS - Epicodus Inc. 从头开始学习HTML5编程 Ruby 学习如何编程：Ruby - Epicodus Inc. RubyMonk - 交互式Ruby教程 Haskell C9：功能编程基础知识 - Erik Meijer CIS 194：Haskell简介 - Brent Yorgey CS240h：Haskell的功能系统 - Bryan O’Sullivan edX：功能编程简介 - Erik Meijer 亚琛大学：功能编程 - JürgenGiesl Lua Lua Interactive Crash Course Lua Tutorial PHP 学习如何编程：PHP - Epicodus Inc. GO Go Tutorial 测试你的代码了解如何捕获错误，创建测试和破解软件. 软件测试，Udacity 软件调试，Udacity 逻辑推理和离散数学 数学计算机科学，麻省理工学院 数学思考导论，斯坦福大学，Coursera 概率图形模型，斯坦福大学，Coursera 博弈论，斯坦福大学和不列颠哥伦比亚大学，Coursera 算法和数据结构了解基本数据类型(堆栈，队列和袋子)，排序算法(快速排序，合并，堆栈)，数据结构(二叉搜索树，红黑树，哈希表)和Big O. 算法简介，麻省理工学院，2011秋季 算法，普林斯顿大学，Part 1 ＆ Part2 算法：设计和分析，斯坦福大学 算法，第4版，by Robert Sedgewick and Kevin Wayne 参考:Guide to technical development from Google educationOS Free Programming Books]]></content>
      <categories>
        <category>学习笔记</category>
        <category>计算机科学</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>计算机科学</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python奇技淫巧]]></title>
    <url>%2F2017%2F12%2F16%2FNote%20-%20Python%20digest%2F</url>
    <content type="text"><![CDATA[Python digestIntroductionLearn advanced python programming.Learn new concepts, patterns, and methods that will expand your programming abilities, helping move you from a novice to an expert programmer.Practice going from a problem description to a solution, using a series of assignments. Reference CS212 Design of Computer Program @Udacity cs258 Testing @Udacity cs259 Debugging @Udacity CS212 Course Wiki @Udacity The Python Tutorial Open Book Project: How to Think Like a Computer Scientist: Learning with PythonCS212 Syllabus 课程列表 Lesson 1: How to think to solve problem Lesson 2: Python features; Instrumentation Lesson 3: Build function as tools; Define language; Grammar Lesson 4: Dealing with Complexity Through Search Lesson 5: Dealing with Uncertainty Through ProbabilityNote Solving Problem Program Design and Development Test Aspect-oriented programming Function Regular Expression String Formatting Python data structure Object oriented Programming Descriptor Operator OperatorEmulating numeric typesin-place operation: One modifies the data-structure itself 12345678910111213object.__iadd__(self, other)object.__isub__(self, other)object.__imul__(self, other)object.__imatmul__(self, other)object.__itruediv__(self, other)object.__ifloordiv__(self, other)object.__imod__(self, other)object.__ipow__(self, other[, modulo])object.__ilshift__(self, other)object.__irshift__(self, other)object.__iand__(self, other)object.__ixor__(self, other)¶object.__ior__(self, other) These methods are called to implement the augmented arithmetic assignments. These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self). If x is an instance of a class with an __iadd__() method, x += y is equivalent to x = operator.iadd(x, y) 1234B = np.arange(12).reshape(4,3)for b in B: b += 1print(B) # B will be changed Object oriented ProgrammingClass Name Guidline underscore (_): For storing the value of last expression in interpreter. For ignoring the specific values. (so-called “I don’t care”) To give special meanings and functions to name of vartiables or functions _single_leading_underscore: weak “internal use” indicator, declaring private variables, functions, methods and classes in a module. Anything with this convention are ignored in from module import *. single_trailingunderscore: used by convention to avoid conflicts with Python keyword double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, boo becomes _FooBar__boo; see Designing for inheritance) double_leading_and_trailing_underscore: “magic” objects or attributes that live in user-controlled namespaces. E.g. init, import or file. Never invent such names; only use them as documented. See Magic Attributes To use as ‘Internationalization(i18n)’ or ‘Localization(l10n)’ functions. To separate the digits of number literal value.Designing for inheritance If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name. Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions. Note 2: Name mangling can make certain uses, such as debugging and getattr(), less convenient. However the name mangling algorithm is well documented and easy to perform manually. Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers. Magic Attributes __init__ object.dict: A dictionary or other mapping object used to store an object’s (writable) attributes. Basically it contains all the attributes which describe the object under question. It can be used to alter or read the attributes. call Solving ProblemA general process to solve problem with three steps: understand, specify and design. Start with a vague understanding that you refine into a formal specification of a problem. In this step you want to take inventory of the concepts you are dealing with. Specify how this problem can be made amenable to being coded. What is the input and output? What output is desirable? Design working code ?? —-(1 Vague Understanding)–&gt;Formal specification of a problem —(2 Specify)—&gt;Amendable specification—(3 Design)—&gt;Working Code Program Design and DevelopmentDimensions of programming Correctness, Efficiency, Features, Elegance Each part takes time, learn to make Tradeoff: During the process, generally Correctness comes first. Test But pursuing the 100% Correctness is not the best choice. There is a balance of tradeoff, and sometimes saving some time and efforts to improving the Efficiency or adding more Features may be a better option. Elegance is good for maintaining and improving the program, which means saving for the future. Refactoring - moving along the Elegance direction without changing the other dimensions. DRY: don’t repeat yourself Reuse: save time and code lines, also reduce the possibility of mistakeCoding StyleFor Python, https://www.python.org/dev/peps/pep-0008 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Here are the most important points extracted: Use 4-space indentation, and no tabs. 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out. Wrap lines so that they don’t exceed 79 characters. This helps users with small displays and makes it possible to have several code files side-by-side on larger displays. Use blank lines to separate functions and classes, and larger blocks of code inside functions. When possible, put comments on a line of their own. Use docstrings. Use spaces around operators and after commas, but not directly inside bracketing constructs: a = f(1, 2) + g(3, 4). Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use self as the name for the first method argument (see A First Look at Classes for more on classes and methods). Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case. Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code. DocstringAn easy way to associate documentation with a function. Documentation Strings conventions The first line should always be a short, concise summary of the object’s purpose. The second line should be blank The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc. The following Python file shows the declaration of docstrings within a Python source file: 123456789101112 &quot;&quot;&quot;Assuming this is file mymodule.py, then this string, being thefirst statement in the file, will become the &quot;mymodule&quot; module&apos;sdocstring when the file is imported.&quot;&quot;&quot; class MyClass(object): &quot;&quot;&quot;The class&apos;s docstring&quot;&quot;&quot; def my_method(self): &quot;&quot;&quot;The method&apos;s docstring&quot;&quot;&quot; def my_function(): &quot;&quot;&quot;The function&apos;s docstring&quot;&quot;&quot; ``` * The following is an interactive session showing how the docstrings may be accessed: import mymodule&gt;&gt;&gt; help(mymodule) Assuming this is file mymodule.py then this string, being thefirst statement in the file will become the mymodule modulesdocstring when the file is imported help(mymodule.MyClass)The class’s docstring&gt;&gt;&gt; help(mymodule.MyClass.my_method)The method’s docstring&gt;&gt;&gt; help(mymodule.my_function)The function’s docstring&gt;&gt;&gt; 1234567891011121314151617181920212223242526272829303132333435363738### TestIt is important that each part of the specification gets turned into a piece of code that implements it and a test that tests it.* Extreme values#### [assert](https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement)Insert debugging assertions into a program. Assertions are not a substitute for unit tests or system tests, but rather a complement.* [Using Assertions Effectively](http://wiki.python.org/moin/UsingAssertionsEffectively) * Places to consider putting assertions: * checking parameter types, classes, or values * checking data structure invariants * checking &quot;can&apos;t happen&quot; situations (duplicates in a list, contradictory state variables.) * after calling a function, to make sure that its return is reasonable#### Time* Tracking time Track which part of the code is the bottle neck of efficiency * \&gt;&gt; python -m cProfile file.py * `import cProfile`, `cProfile.run(&apos;test()&apos;)`### Aspect-oriented programming* correct * efficiency * [Tracking time](#time): to find out the bottle neck function or algorithm * Rethinking the implementation of the bottle neck * Fewer * Easier/smaller: [Divide and Conquer](https://github.com/ShootingSpace/Guide-to-Computer-Science/blob/master/Note%20-%20CS106B%20Stanford%20Programming%20Abstractions.md#divide-and-conquer)* debugging Each part is done with some line of codes. Instead of mix different part of the code together, it would be better to define them as different function/class. Try to seperate them as much as possible.### FunctionThere are many special and useful function implementation and control flow in python: lambda, map, filter, reduce, generator, etc..#### Lambda λ, istead of defining function with `def` and a specific function name, Lambda provide a convinent way to define a function using its own native logic and methematical expression. * The benifits are * A small function could be defined wihtin the same code structure without seperating out a specific `def` function * Without bothering creating any proper funciton name for a small anonymous function. * Lambda implementation * Like nested function definitions, lambda functions can reference variables from the containing scope, returning a function from another function. This is often used to create **function wrappers**, such as Python&apos;s decorators. # uses a lambda expression to return a function &gt;&gt;&gt; def make_incrementor(n): ... return lambda x: x + n ... &gt;&gt;&gt; f = make_incrementor(42) # f is declared as a lambda function &quot;lambda x: x+42&quot; with parameter n = 42 &gt;&gt;&gt; f(0) # call f with x=0 to return the 42 &gt;&gt;&gt; f(1) 43 12 This is like creating a compiler to save process cost: some parameters like default values or initial values are compiled into the compiler, program process these parameter only once, then this compiler as a function could be called many times with other input parameters which varies every time the compiler is being called(like user input values). * Pass a small function as an argument, sorting or max by an alternate key &gt;&gt;&gt; pairs = [(1, &apos;one&apos;), (2, &apos;two&apos;), (3, &apos;three&apos;), (4, &apos;four&apos;)] &gt;&gt;&gt; pairs.sort(key=lambda pair: pair[1]) &gt;&gt;&gt; pairs [(4, &apos;four&apos;), (1, &apos;one&apos;), (3, &apos;three&apos;), (2, &apos;two&apos;)] 1 &gt;&gt;&gt; l =[(&apos;x&apos;,2),(&apos;y&apos;,4),(&apos;z&apos;,0)] &gt;&gt;&gt; max(l, key = lambda x: x[0]) &gt;&gt;&gt; (&apos;z&apos;, 0) 12* Lambda with logic control flow Lambda x,y: False if x&lt;y else x+y 1234567891011#### [Filter](https://docs.python.org/2/library/functions.html#filter)Construct a list from the elements of an iterable for which function returns **true**. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. * `filter(function, iterable)` equals to * if function is `None`: `[item for item in iterable if item] ` * if not: `[item for item in iterable if function(item)]`* `mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])` &gt;&gt;&gt; `[3, 6, 9]`* See [itertools.ifilter()](https://docs.python.org/2/library/itertools.html#itertools.ifilter) and [itertools.ifilterfalse()](https://docs.python.org/2/library/itertools.html#itertools.ifilterfalse) for iterator versions of this function, including a variation that filters for elements where the function returns false.#### [Map](https://docs.python.org/2/library/functions.html#map) Apply function to every item of iterable and **return a list** of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel map(lambda x: x % 2, [1, 2, 3, 4, 5, 6, 7, 8, 9])[1, 0, 1, 0, 1, 0, 1, 0, 1]123#### [Reduce](https://docs.python.org/2/library/functions.html#reduce) Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value. In [1]: reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) Out[1]: 15 # ((((1+2)+3)+4)+5) In [1]: reduce(lambda a, b: ‘{}, {}’.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9]) Out[1]: ‘1, 2, 3, 4, 5, 6, 7, 8, 9’ 1234567891011121314151617181920212223242526#### List/Dict/Set Comprehensions* List comprehensions: `[ s for r, s in cards if r in &apos;JQK&apos; ]`* Dictionary comprehensions: `&#123;x: x ** 2 for x in range(5) if x % 2 == 0&#125;`* Set comprehensions: `&#123;int(sqrt(x)) for x in range(30)&#125;` * And in general, we can have any number of for statements, if statements, more for statements, more if statements. The whole is read from left to right#### [Generator Expressions](https://docs.python.org/2/reference/expressions.html#generator-expressions) Unlike the for loop in the list comprehensions which walk through the whole loop, generator will walk one step in the for loop if a `next()` is called.* The advantage is * less indentation * stop the loop early * easier to edit* Implementation of generator: `g = (sq(x) for x in range(10) if x%2 == 0).` * The generator function is a promise, but no computation has been done yet. * `next(g)` to call a one-time calculation. * When reaching the end of for-loop in the generator, the `next(g)` comment will return a false called &quot;StopIteration&quot;. * To avoid the &quot;StopIteration&quot; false * Use a outer for statement: `for xx in g: ...` * convert the generator to list: `list(g)`#### Generator functions Using a yield expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.* [Yield expressions](https://docs.python.org/2/reference/expressions.html#yield-expressions) The yield expression is only used when defining a generator function, and can only be used in the body of a function definition. * [Yield implementation](https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html) def ints(start, end=None): i = start while i &lt;= end or end is None: yield i i = i + 1 12 def fab(max): n, a, b = 0, 0, 1 while n &lt; max: yield b # print b a, b = b, a + b n = n + 1 12#### Iterator * The true beneath `For Statemet` is **iterable** for x in itmes: print x 1What the whole truth is: it = iter(items) try: while True: x = next(it) print x except StopIteration: pass 123456* Overall, Python calls the thing that can be iterated over in a for loop an iterable. Strings and lists are examples of iterables, and so are generators.* [itertools library](https://docs.python.org/2/library/itertools.html#module-itertools): Functions creating iterators for efficient looping* any(iterable): Return True if any element of the iterable is true. If the iterable is empty, return False.#### [Unpacking Argument Lists](https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments) The `*` operator simply unpacks the tuple or list and passes them as the positional arguments to the function. list(range(3, 6)) # normal call with separate arguments[3, 4, 5]args = [3, 6]list(range(*args)) # call with arguments unpacked from a list[3, 4, 5]12345678910#### Handling different types of argument (*polymorphism) An argument could be different type: timedcalls(n,fn), if n is int `isinstance(n,int)`, it means controling the how many times fn was called, while n is float, it means controling the total runtime of fn called#### eval()### [Descriptor](https://docs.python.org/2/howto/descriptor.html)#### [Decorator](https://www.python.org/dev/peps/pep-0318/)* Motivation: when applying a transformation to a function `def f(self): ...definition...; f = dec(f)`, it becomes less readable with longer methods. It also seems less than pythonic to name the function three times for what is conceptually a single declaration.* The solution is to place the decoration in the function&apos;s declaration: @dec def foo(cls): pass @property property(fget=None, fset=None, fdel=None, doc=None) A property object has three methods, getter(), setter(), and delete() to specify fget, fset and fdel at a later point. some_object = property(get_some_object,set_some_object) equals to 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 some_object = property() # make empty property some_object = some_object.getter(get_some_object) # assign fget some_object = some_object.setter(set_some_object) # assign fset * Decorator as tools * Debug tool: help developping, count calls times, count excecute time * Performance: make the programme faster, such as dynamic programming algorithm * Expressiveness: doc string, explaining funciton * Trace: help to monitor the execution of the program, such as each level result printed with different indentation * Disable decorator: `dec = disabled`, make the decorator disabled.### [Regular Expression](https://docs.python.org/2/library/re.html)import re [Reference: A Regular Expression Matcher](http://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html)* In C language, any number start with &apos;0&apos; is interpreted as an octal number( base-8 number system ) &apos;012&apos; -&gt; int 10, &apos;09&apos; -&gt; invalid* Special characters * `*` match 0 or more repetitions of the preceding character. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s. * `?` Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’. * `.` (Dot) matches any single character * `^` (Caret) Matches the start of the string * `$` Matches the end of the string or just before the newline at the end of the string, foo matches both ‘foo’ and ‘foobar’, while the regular expression foo$ matches only ‘foo’ * `+` match 1 or more repetitions of the preceding RE. `ab+` will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’.* Commonly used expression * Upper case letter `&apos;[A-Z]&apos;` * Any alphanumeric character `[a-zA-Z0-9_]` * Decimal digit `[0-9]` * Non-digit character `[^0-9]` * Whitespace character `[ \t\n\r\f\v]`* `search(string[, pos[, endpos]])` Scan through string looking for a location where this regular expression produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern.* `re.findall(pattern, string, flags=0)` Return all non-overlapping matches of pattern in string, as a list of strings.### [String Formatting](https://docs.python.org/2.4/lib/typesseq-strings.html)Modulo(%): String and Unicode objects have one unique built-in operation: the % operator (modulo). This is also known as the string formatting or interpolation operator. Given format % values (where format is a string or Unicode object), % conversion specifications in format are replaced with zero or more elements of values. * `%d`: Signed integer decimal. * `%s`: String (converts any python object using str()). * `print &apos;%d: %s&apos; % (1, &apos;animal&apos;)` &gt;&gt; `1: animal`### Python data structure#### [Numpy indexing](https://docs.scipy.org/doc/numpy-dev/reference/arrays.indexing.html#indexing)* Ellipsis: The same as `...`. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types. `a = [1,2,3], a[...] is actually the same as a`* None: extends one more demention by further slicing the corresponding c into smallest units. t = np.arange(27).reshape(3,3,3), #t shape is (3,3,3)t[None,].shape # (1, 3, 3, 3)t[…,None].shape # (3, 3, 3, 1)t[:, None,:].shape # (3, 1, 3, 3)t[:,:, None].shape # (3, 3, 1, 3)```]]></content>
      <categories>
        <category>学习笔记</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
